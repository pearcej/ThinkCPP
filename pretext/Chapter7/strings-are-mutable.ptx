<?xml version="1.0"?>
<section xml:id="chapter7_strings-are-mutable">
  <title><c>string</c>s are mutable</title>
  <p>You can change the letters in an <c>string</c> one at a time using the <c>[]</c> operator on the left
    side of an assignment.</p>
  <listing label="strings_are_mutable_AC_1">
    <caption>
      This active code changes the first letter in <c>greeting</c> to be <c>'J'</c>.
    </caption>
    <program xml:id="strings_are_mutable_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string greeting = "Hello, world!";
    greeting[0] = 'J';
    cout << greeting << endl;
}
        ]]></code>
    </program>
  </listing>
  <p>This produces the output <c>Jello, world!</c>.</p>
  <exercise label="string_mutable_1">
    <caption>
      What is printed by the following statements?
      <program line-numbers="yes">
        <code><![CDATA[
string fav_food = "ice cream";
fav_food[3] = "d";
cout << fav_food << endl;
]]></code>
      </program>
    </caption>
    <choices>
      <choice>
        <statement>
          <p>icd cream</p>
        </statement>
        <feedback>
          <p>Remember that indexing begins at 0, not 1.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>icedcream</p>
        </statement>
        <feedback>
          <p>Index 3 was a space and now it is "d".</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>ice cream</p>
        </statement>
        <feedback>
          <p>The character at index 3 should be changed to "d".</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>iced</p>
        </statement>
        <feedback>
          <p>The character at index 3 should be changed to "d", and the rest stays the same.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="string_mutable_2">
    <statement>
      <p>How can we fix the message to be <q>You're a wizard Harry</q>?</p>
      <program line-numbers="yes">
        <code>
string message = "You're a lizard Harry";
</code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>message[9] = "w";</p>
        </statement>
        <feedback>
          <p>Since "l" is at index 9, replacing it with "w" fixes the message.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>message[10] = "w";</p>
        </statement>
        <feedback>
          <p>Remember indexing starts at 0.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>"w" = message[9];</p>
        </statement>
        <feedback>
          <p>In order to change a letter in a string, the ``[]`` operator must be on the left of the
            assignment.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>message[8] = "w";</p>
        </statement>
        <feedback>
          <p>Remember indexing starts at 0.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="string_mutable_3"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Put together the code below to create a function <c>mixer</c> that takes in two strings and
        replaces every even index of the first string by the corresponding index of the second. It
        returns the modified first string. Example: <c>string_a = "food"</c> and <c>string_b = "summer"</c> . <c>mixer(string_a ,string_b )</c> makes <c>string_a</c>
        become <q>somd</q>.</p>
      <p>Assume second string is greater than first.</p>
    </statement>
    <blocks>
      <block order="13">
        <choice correct="yes">
          <cline>string mixer(string s1,string s2) {</cline>
        </choice>
        <choice>
          <cline>void mixer(string s1,string s2) { </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>   size_t size = s1.length();</cline>
        </choice>
        <choice>
          <cline>   size_t size = s2.length(); </cline>
        </choice>
      </block>
      <block order="10">
        <cline>   size_t i = 0;</cline>
        <cline>   while (i &amp;lt size) {</cline>
      </block>
      <block order="1"
             correct="no">
        <cline>   size_t i = size - 1; </cline>
        <cline>   while (i &amp;lt size) {</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>     if( (i % 2) == 0) {</cline>
          <cline>       s1[i] = s2[i];</cline>
          <cline>     }</cline>
        </choice>
        <choice>
          <cline>     if( (i % 2) == 1) { </cline>
          <cline>       s1[i] = s2[i];</cline>
          <cline>     }</cline>
        </choice>
      </block>
      <block order="6">
        <cline>     i++;</cline>
      </block>
      <block order="2">
        <cline>   }</cline>
      </block>
      <block order="12">
        <choice correct="yes">
          <cline>   return s1;</cline>
        </choice>
        <choice>
          <cline>   return s2; </cline>
        </choice>
      </block>
      <block order="3">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>