<?xml version="1.0"?>
<section xml:id="chapter7_activecode-exercises">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to
            assess what you have learned in this chapter.</p>
  <exercise label="XXX">
    <statement>
      <p>Write a program that prints the 4th character of word,
                    and finds and replaces all instances of &#x2018;i' with &#x2018;e'.
                    Finally, print out the string.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_7_1_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the program using the word &#x2018;irritating' as the string.

    
    <program xml:id="mucp_7_1_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string word = "irritating";
    cout << word[3] << endl;
    while ((int)word.find('i') != -1) {
        word[word.find('i')] = 'e';
    }
    cout << word << endl;
}
        ]]></code></program>

            

<exercise label="mucp_7_1_ac_a"><statement><p>Below is one way to write the program using the word &#x2018;irritating' as the string.</p></statement><program xml:id="mucp_7_1_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string word = "irritating";
    cout << word[3] << endl;
    while ((int)word.find('i') != -1) {
        word[word.find('i')] = 'e';
    }
    cout << word << endl;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>An anagram is a play on words by rearranging the letters of the original words
                    to form new words. For example, the letters in <q>listen</q> can be rearranged to
                    make <q>silent</q>. Write a program that rearranges <q>night</q> into <q>thing</q> and prints the anagram.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_7_2_ac_q_editor">
      <code><![CDATA[
#inlcude <iostream>
#include <string>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_7_2_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string original = "night";
    string anagram = original;
    anagram[0] = original[original.find('t')];
    anagram[1] = original[original.find('h')];
    anagram[2] = original[original.find('i')];
    anagram[3] = original[original.find('n')];
    anagram[4] = original[original.find('g')];
    cout << anagram;
}
        ]]></code></program>

            

<exercise label="mucp_7_2_ac_a"><statement><p>Below is one way to write the program.</p></statement><program xml:id="mucp_7_2_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string original = "night";
    string anagram = original;
    anagram[0] = original[original.find('t')];
    anagram[1] = original[original.find('h')];
    anagram[2] = original[original.find('i')];
    anagram[3] = original[original.find('n')];
    anagram[4] = original[original.find('g')];
    cout << anagram;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the function <c>longerString</c>, which takes two parameters,
                    first and second. If first has more letters
                    than second, longerString prints <q>first is longer than second</q>,
                    and vice versa. If they have the same number of letters, longerString
                    prints <q>first and second are the same length</q>.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_7_3_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    longerString("longer", "string");
    longerString("string", "second");
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the function longerString.

    
    <program xml:id="mucp_7_3_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

void longerString(string first, string second) {
    if (first.length() > second.length()) {
        cout << first << " is longer than " << second << endl;
    }
    else if (first.length() < second.length()) {
        cout << second << " is longer than " << first << endl;
    }
    else {
        cout << first << " and " << second << " are the same length" << endl;
    }
}

int main() {
    longerString("longer", "string");
    longerString("string", "second");
}
        ]]></code></program>

            

<exercise label="mucp_7_3_ac_a"><statement><p>Below is one way to write the function <c>longerString</c>.</p></statement><program xml:id="mucp_7_3_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

void longerString(string first, string second) {
    if (first.length() > second.length()) {
        cout << first << " is longer than " << second << endl;
    }
    else if (first.length() < second.length()) {
        cout << second << " is longer than " << first << endl;
    }
    else {
        cout << first << " and " << second << " are the same length" << endl;
    }
}

int main() {
    longerString("longer", "string");
    longerString("string", "second");
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the code for the <c>cipherText</c> function. cipherText
                    should be a void function that takes the string input as a parameter,
                    increases the value of each character by 1 (i.e. <q>bad</q> turns into <q>cbe</q>),
                    and prints the encrypted string.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_7_4_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    cipherText("bad");
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the function cipherText.

    
    <program xml:id="mucp_7_4_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

void cipherText(string input) {
    int i = 0;
    while ((unsigned)i < input.length()) {
        input[i] = input[i] + 1;
        i++;
    }
    cout << input;
}

int main() {
    cipherText("bad");
}
        ]]></code></program>

            

<exercise label="mucp_7_4_ac_a"><statement><p>Below is one way to write the function <c>cipherText</c>.</p></statement><program xml:id="mucp_7_4_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

void cipherText(string input) {
    int i = 0;
    while ((unsigned)i < input.length()) {
        input[i] = input[i] + 1;
        i++;
    }
    cout << input;
}

int main() {
    cipherText("bad");
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write a program that prints out the number of occurences of the character &#x2018;t'
                    in the string tongue_twister, with declaration in the order of <c>tongue_twister</c>, <c>count</c>, and <c>i</c>.
                    Declare the string tongue_twister as &#x2018;twelve twins twirled twelve twigs.'</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_7_5_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_7_5_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string tongue_twister = "twelve twins twirled twelve twigs";
    int count = 0;
    int i = 0;
    while (i < (int)tongue_twister.length()) {
        if (tongue_twister[i] == 't') {
            count++;
        }
        i++;
    }
    cout << count;
}
        ]]></code></program>

            

<exercise label="mucp_7_5_ac_a"><statement><p>Below is one way to write the program.</p></statement><program xml:id="mucp_7_5_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string tongue_twister = "twelve twins twirled twelve twigs";
    int count = 0;
    int i = 0;
    while (i < (int)tongue_twister.length()) {
        if (tongue_twister[i] == 't') {
            count++;
        }
        i++;
    }
    cout << count;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write a program that prints out the index of the second instance of the
                    character &#x2018;i'. Use <c>string quote = "Your time is limited, so don't waste it living someone else's life.</c></p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_7_6_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_7_6_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string quote = "Your time is limited, so don't waste it living someone else's life.";
    int first = quote.find("i");
    int index = find(quote, 'i', first + 1);
    cout << index;
}
        ]]></code></program>

            

<exercise label="mucp_7_6_ac_a"><statement><p>Below is one way to write the program.</p></statement><program xml:id="mucp_7_6_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string quote = "Your time is limited, so don't waste it living someone else's life.";
    int first = quote.find("i");
    int index = find(quote, 'i', first + 1);
    cout << index;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Deep in the forest live the 7 dwarves named Sorty, Torty, Vorty,
                    Worty, Xorty, Yorty, and Zorty. Write a program that prints
                    out each of their names.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_7_7_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_7_7_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string suffix = "orty";
    char letter = 'S';
    while (letter <= 'Z') {
        if (letter != 'U') {
            cout << letter + suffix << endl;
        }
        letter++;
    }
}
        ]]></code></program>

            

<exercise label="mucp_7_7_ac_a"><statement><p>Below is one way to write the program.</p></statement><program xml:id="mucp_7_7_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string suffix = "orty";
    char letter = 'S';
    while (letter <= 'Z') {
        if (letter != 'U') {
            cout << letter + suffix << endl;
        }
        letter++;
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>On the strange planet of Noes, there's a law that prohibits the usage of the letter <q>e</q>.
                    As a result, they hired you to write a function called <c>censorE</c> that replaces all occurences
                    of the letter <q>e</q> in a string with an asterisk and returns the censored string. For example,
                    if the input is <q>hello world</q>, the function returns <q>h*llo world</q>.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_7_8_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;
// YOUR CODE HERE


        ]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorE function") {
    REQUIRE(censorE("after") == "aft*r");
    REQUIRE(censorE("hello world") == "h*llo world");
    REQUIRE(censorE("censor") == "c*nsor");
}
</tests>
    </program>
    <solution>


    
                Below is one way to write the censorE function.

    
    <program xml:id="mucp_7_8_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

string censorE(string input) {
    int i = 0;
    while ((unsigned)i < input.length()) {
        if (input[i] == 'e') {
            input[i] = '*';
        }
        i++;
    }
    return input;
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorE function") {
    REQUIRE(censorE("after") == "aft*r");
    REQUIRE(censorE("hello world") == "h*llo world");
    REQUIRE(censorE("censor") == "c*nsor");
}
</tests></program>

            

<exercise label="mucp_7_8_ac_a"><statement><p>Below is one way to write the censorE function.</p></statement><program xml:id="mucp_7_8_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

string censorE(string input) {
    int i = 0;
    while ((unsigned)i < input.length()) {
        if (input[i] == 'e') {
            input[i] = '*';
        }
        i++;
    }
    return input;
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorE function") {
    REQUIRE(censorE("after") == "aft*r");
    REQUIRE(censorE("hello world") == "h*llo world");
    REQUIRE(censorE("censor") == "c*nsor");
}
</tests></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Your work for the planet of Noes impressed the nearby planets of Noas, Nois, Noos, and Nous.
                    They want you to write different functions that censor out each planet's corresponding forbidden letter.
                    However, your galaxy brain knows better than to write a different function for each planet.
                    Using generalization, write the function <c>censorLetter</c> which takes input and a char to censor
                    as parameters and returns a censored string. For example, censorLetter(<q>Bye world</q>, &#x2018;o') returns the
                    string <q>Bye w*rld</q>.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_7_9_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;
// YOUR CODE HERE


        ]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorLetter function") {
    REQUIRE(censorLetter("Bye world", 'o') == "Bye w*rld");
    REQUIRE(censorLetter("Hello world", 'l') == "He**o wor*d");
    REQUIRE(censorLetter("Goodbye world", 'd') == "Goo*bye worl*");
}
</tests>
    </program>
    <solution>


    
                Below is one way to write the censorLetter function.

    
    <program xml:id="mucp_7_9_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

string censorLetter(string input, char letter) {
    int i = 0;
    while ((unsigned)i < input.length()) {
        if (input[i] == letter) {
            input[i] = '*';
        }
        i++;
    }
    return input;
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorLetter function") {
    REQUIRE(censorLetter("Bye world", 'o') == "Bye w*rld");
    REQUIRE(censorLetter("Hello world", 'l') == "He**o wor*d");
    REQUIRE(censorLetter("Goodbye world", 'd') == "Goo*bye worl*");
}
</tests></program>

            

<exercise label="mucp_7_9_ac_a"><statement><p>Below is one way to write the censorLetter function.</p></statement><program xml:id="mucp_7_9_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

string censorLetter(string input, char letter) {
    int i = 0;
    while ((unsigned)i < input.length()) {
        if (input[i] == letter) {
            input[i] = '*';
        }
        i++;
    }
    return input;
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("censorLetter function") {
    REQUIRE(censorLetter("Bye world", 'o') == "Bye w*rld");
    REQUIRE(censorLetter("Hello world", 'l') == "He**o wor*d");
    REQUIRE(censorLetter("Goodbye world", 'd') == "Goo*bye worl*");
}
</tests></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write a function called <c>alphaCombine</c> which takes
                    two strings, first and second,
                    and returns a string which concatenates first and second in
                    alphabetical order. For example,
                    alphabetizer (<q>zebra, mega</q>) returns the string
                    <q>megazebra</q> since <q>mega</q> comes before <q>zebra</q> in the alphabet.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_7_10_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;
// YOUR CODE HERE


        ]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("alphaCombine function") {
    REQUIRE(alphaCombine("zebra","mega") == "megazebra");
    REQUIRE(alphaCombine("alpha","combine") == "alphacombine");
    REQUIRE(alphaCombine("combine","alpha") == "alphacombine");
}
</tests>
    </program>
    <solution>


    
                Below is one way to write the alphaCombine function.

    
    <program xml:id="mucp_7_10_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

string alphaCombine(string first, string second) {
    if (first > second) {
        return second + first;
    }
    else {
        return first + second;
    }
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("alphaCombine function") {
    REQUIRE(alphaCombine("zebra","mega") == "megazebra");
    REQUIRE(alphaCombine("alpha","combine") == "alphacombine");
    REQUIRE(alphaCombine("combine","alpha") == "alphacombine");
}
</tests></program>

            

<exercise label="mucp_7_10_ac_a"><statement><p>Below is one way to write the alphaCombine function.</p></statement><program xml:id="mucp_7_10_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

string alphaCombine(string first, string second) {
    if (first > second) {
        return second + first;
    }
    else {
        return first + second;
    }
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("alphaCombine function") {
    REQUIRE(alphaCombine("zebra","mega") == "megazebra");
    REQUIRE(alphaCombine("alpha","combine") == "alphacombine");
    REQUIRE(alphaCombine("combine","alpha") == "alphacombine");
}
</tests></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write a function called <c>ispalindrome</c> which takes
                    a string named input
                    and returns a bool
                    The function returns true if the string is a palindrome and false if not.
                    palindromes are symmetrical strings.
                    That is a string that reads the same backwards is palindrome.
                    palindromes:  <q>hih</q>, <q>i</q>, <q>bob</q>, <q>tenet</q>, <q>soos</q>, <q>madam</q> .
                    not palindromes: <q>join</q>, <q>hat</q>, <q>frat</q>, <q>supper</q>, <q>rhythm</q>.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_7_11_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;
// YOUR CODE HERE


        ]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("ispalindrome function") {
    REQUIRE(ispalindrome("madam") == true);
    REQUIRE(ispalindrome("join") == false);
}
</tests>
    </program>
    <solution>


    
                Below is one way to write the ispalindrome function.

    
    <program xml:id="mucp_7_11_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

bool ispalindrome(string input) {
    int front = 0;
    int back = input.length() - 1;
    while (front < back) {
        if( input[b] != input[e] ) {
            return false;
        }
        front = front + 1;
        back = back - 1;
    }
    return true;
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("ispalindrome function") {
    REQUIRE(ispalindrome("madam") == true);
    REQUIRE(ispalindrome("join") == false);
}
</tests></program>

            

<exercise label="mucp_7_11_ac_a"><statement><p>Below is one way to write the ispalindrome function.</p></statement><program xml:id="mucp_7_11_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

bool ispalindrome(string input) {
    int front = 0;
    int back = input.length() - 1;
    while (front < back) {
        if( input[b] != input[e] ) {
            return false;
        }
        front = front + 1;
        back = back - 1;
    }
    return true;
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("ispalindrome function") {
    REQUIRE(ispalindrome("madam") == true);
    REQUIRE(ispalindrome("join") == false);
}
</tests></program></exercise>
            </solution>
  </exercise>
</section>
