<?xml version="1.0"?>
<exercises xml:id="chapter7_coding-practice">
  <title>Coding Practice</title>
  <exercise label="cp_7_AC_1">
    <statement>
      <p>A palindrome is a word, phrase, or sentence that reads the same forwards and backwards.</p>
      <p>Write a function <c>isPalindrome</c> that takes a <c>string input</c> as a parameter and returns a boolean that is
        true if the input is a palindrome and false otherwise. Run and test your code!</p>
    </statement>
    <program interactive="activecode">
      <code><![CDATA[
#include <iostream>
#include <cctype>
using namespace std;

bool isPalindrome(string input) {
    // Write your implementation here.
}
]]></code>
      <tests>
      #define CATCH_CONFIG_MAIN
      #include &lt;catch.hpp&gt;

      TEST_CASE("factorial function") {
          REQUIRE(isPalindrome ("racecar") == 1);
          REQUIRE(isPalindrome ("no lemon, no melon") == 1);
          REQUIRE(isPalindrome ("kangaroo") == 0);
      }
      </tests>
    </program>
    <solution>
      <p>Below is one way to implement the program. We use the <c>isalpha</c> function to ignore the non
        alphabetical characters. Then we continuously check to see if the letters in the front are
        equal to the ones in the back until we reach the middle of the string.</p>
      <program xml:id="cp_7_AC_1a"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <cctype>
using namespace std;

bool isPalindrome(string input) {
    size_t front = 0;
    size_t back = input.length() - 1;
    while (front < back) {
        while (!isalpha(input[front])) {
            front++;
        }
        while (!isalpha(input[back])) {
            back--;
        }
        if (input[front] != input[back]) {
            return false;
        }
        front++;
        back--;
    }
    return true;
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cp_7_AC_2q">
    <statement>
      <p>How much does Bubba love shrimp? Probably a lot. But how many times does the word <q>shrimp</q>
        come up in his monologue? Write a function <c>countWord</c> that counts the number of times a given
        word appears in a given string. <c>countWord</c> should take two strings <c>input</c> and <c>word</c> as
        parameters and return an <c>int</c>. Feel free to use the <c>stringToLower</c> function we wrote earlier.
        Check the hint below for help with the construction of the code.</p>
    </statement>
    <program xml:id="cp_7_AC_2q_editor"
             interactive="activecode"
             line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include "ctype.h"
using namespace std;

void stringToLower(string &input) {
    size_t i = 0;
    while (i < input.length()) {
        if (isalpha(input[i]) && isupper(input[i])) {
            input[i] = tolower(input[i]);
        }
        i++;
    }
}

int countWord(string input, string word) {
    // Write your implementation here.
}

int main() {
    string quote =
        "Anyway, like I was sayin', shrimp is the fruit of the sea. You can "
        "barbecue it, boil it, broil it, bake it, saute it. Dey's uh, "
        "shrimp-kabobs, shrimp creole, shrimp gumbo. Pan fried, deep fried, "
        "stir-fried. There's pineapple shrimp, lemon shrimp, coconut shrimp, "
        "pepper shrimp, shrimp soup, shrimp stew, shrimp salad, shrimp and "
        "potatoes, shrimp burger, shrimp sandwich. That- that's about "
        "it.";
    cout << "Your output: " << countWord(quote, "shrimp") << ", Correct output: 14" << endl;
}
        ]]></code>
        </program>
    <hint>
      <activity label="cp_7_AC_2q_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide">
        <statement>
          <p>How much does Bubba love shrimp? Probably a lot. But how many times does the word <q>
            shrimp</q> come up in his monologue? Write a function <c>countWord</c> that counts the number of
            times a given word appears in a given string. <c>countWord</c> should take two strings <c>input</c>
            and <c>word</c> as parameters and return an <c>int</c>. Feel free to use the <c>stringToLower</c> function
            we wrote earlier. Use the lines to construct the code, then go back to complete the
            Activecode.</p>
        </statement>
        <blocks>
          <block order="2">
            <cline>int countWord(string input, string word) {</cline>
          </block>
          <block order="6">
            <cline>    int count = 0;</cline>
          </block>
          <block order="4">
            <choice correct="yes">
              <cline><![CDATA[    for (size_t i = 0; i < input.length() - 1; i++) {]]></cline>
              <cline>        size_t j = 0;</cline>
              <cline>        size_t k = i;</cline>
            </choice>
            <choice>
              <cline><![CDATA[    for (size_t i = 0; i < input.length(); i++) { ]]></cline>
              <cline>        size_t j = 0;</cline>
              <cline>        size_t k = i;</cline>
            </choice>
          </block>
          <block order="8">
            <cline><![CDATA[        for (size_t l = 0; l < word.length(); l++) {]]></cline>
          </block>
          <block order="1">
            <cline>            if (input[k] == word[l]) {</cline>
            <cline>                j++;</cline>
            <cline>            }</cline>
            <cline>            k++;</cline>
          </block>
          <block order="3">
            <cline>            if (j == word.length()) {</cline>
            <cline>                count++</cline>
            <cline>            }</cline>
          </block>
          <block order="5">
            <cline>        }</cline>
            <cline>    }</cline>
            <cline>    return count;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_7_AC_3">
    <statement> Write a void function <c>censorWord</c> that censors a given word from a given string and
      prints out the new string. <c>censorWord</c> should take two strings <c>input</c> and <c>word</c> as parameters
      and prints out <c>input</c> with every occurence of <c>word</c> censored with asterisks. For example, <c>censorWord("I really, really, really, really, really, really like
      you", "really")</c>
      results in the following output: <program>
<output>I ******, ******, ******, ******, ******, ****** like you</output>
</program>
    </statement>
    <program interactive="activecode">
      <code><![CDATA[
           #include <iostream>
           using namespace std;

           void censorWord(string input, string word) {
               // Write your implementation here.
           }

           int main() {
               censorWord("I really, really, really, really, really, really like you", "really");
           }
]]></code>
    </program>
    <solution>
      <p>Below
        is one way to implement the program. We use a while loop to
        repeatedly search for instances of word in input. Once found, we replace
        the length of the word with asterisks.</p>
      <program xml:id="cp_7_AC_3a"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void censorWord(string input, string word) {
    size_t length = word.length();
    while (input.find(word) != string::npos) {{
        int index = input.find(word);
        size_t i = 0;
        while (i < length) {
            input[index + i] = '*';
            i++;
        }
    }
    cout << input;
}

int main() {
    censorWord("I really, really, really, really, really, really like you", "really");
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cp_7_AC_4q">
    <statement>
      <p>Write a void function <c>removeWord</c> that removes a given word from a given string and prints out
        the new string. <c>removeWord</c> should take two strings <c>input</c> and <c>word</c> as parameters and prints
        out <c>input</c> with every occurence of <c>word</c> removed. Use string concatenation and the C++
        string function <c>substr</c>. <c>substr</c> takes two parameters, a starting index and a length. For
        example, if <c>string greeting = "hello world"</c>, then <c>greeting.substr(6, 5)</c> returns the string <c>"world"</c>. Test your function in main.
        Check the hint below for help with the construction of the code. The output should be:</p>
      <console>
        <output>Gucci , Gucci , Gucci , Gucci</output>
      </console>
    </statement>
    <program xml:id="cp_7_AC_4q_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

void removeWord(string input, string word) {
    // Write your implementation here.
}

int main() {
    removeWord("Gucci gang, Gucci gang, Gucci gang, Gucci gang", "gang");
}
    ]]></code>
    </program>
    <hint>
      <activity label="cp_7_AC_4q_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide">
        <statement>
          <p>Write a void function <c>removeWord</c> that removes a given word from a given string and prints
            out the new string. <c>removeWord</c> should take two strings <c>input</c> and <c>word</c> as parameters
            and prints out <c>input</c> with every occurence of <c>word</c> removed. Use string concatenation
            and the C++ string function <c>substr</c>. <c>substr</c> takes two parameters, a starting index and
            a length. For example, if <c>string greeting = "hello world"</c>, then <c>greeting.substr(6, 5)</c> returns the string <c>"world"</c>. Test your
            function in main. Use the lines to construct the code, then go back to complete the
            Activecode. The output should be:</p>
          <console>
            <output>Gucci , Gucci , Gucci , Gucci</output>
          </console>
        </statement>
        <blocks>
          <block order="2">
            <cline>void removeWord(string input, string word) {</cline>
          </block>
          <block order="5">
            <choice correct="yes">
              <cline><![CDATA[    for (size_t i = 0; i < word.length(); i++) {]]></cline>
            </choice>
            <choice>
              <cline><![CDATA[    for (size_t i = 0; i < input.length(); i++) { ]]></cline>
            </choice>
          </block>
          <block order="8">
            <cline>        size_t pos = input.find(word);</cline>
          </block>
          <block order="6">
            <choice correct="yes">
              <cline>        if (pos != string::npos) {</cline>
            </choice>
            <choice>
              <cline>        if (pos == input.length()) { </cline>
            </choice>
          </block>
          <block order="7">
            <cline>            input.erase(pos, word.length());</cline>
          </block>
          <block order="4">
            <cline>        }</cline>
            <cline>    }</cline>
            <cline>    cout &lt;&lt; input;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_7_AC_5">
    <statement>
      <p>ROT13 is a simple letter substitution cipher that shifts every letter forward by 13,
        looping around if necessary. For example, the letter 'a', 1st in the alphabet, becomes
        the letter 'n', 14th in the alphabet. The letter 'r', 18th in the alphabet, becomes the
        letter 'e', 5th in the alphabet. Since the alphabet has 26 letters and 13 is exactly half,
        a message encrypted using ROT13 can be decrypted by calling ROT13 on the encrypted message.</p>
      <p>Write the function <c>ROT13</c> , which takes a <c>string input</c> as a parameter and returns an encrypted <c>string</c>
        . Test your function in <c>main</c> .</p>
    </statement>
    <program interactive="activecode">
      <code><![CDATA[
          #include <iostream>
          #include <cctype>
          using namespace std;

          string ROT13 (string input) {
              // Write your implementation here.
          }

          int main() {
              string original = "Encrypt me then decrypt me!";
              string encrypted = ROT13 (original);
              string decrypted = ROT13 (encrypted);
              cout << "Original string: " << original << endl;
              cout << "Encrypted string: " << encrypted << endl;
              cout << "Decrypted string: " << decrypted << endl;

              // Uncomment and run the code below once your function works!
              // string secretMessage = "Pbatenghyngvbaf! Lbh'ir fhpprffshyyl vzcyrzragrq EBG13 naq qrpbqrq gur frperg zrffntr :)";
              // cout << ROT13 (secretMessage) << endl;
          }
]]></code>
    </program>
    <solution>
      <p>Below is one way to implement the <c>ROT13</c> function. We use a <c>while</c> loop to go through all
        the letters in the <c>string</c>. If the letter is between &#x2018;a' and &#x2018;n' or &#x2018;A'
        and &#x2018;N', we use character operations to add 13 to each letter. Otherwise, we subtract
        13 from each letter. We return the encrypted message at the end.</p>
      <program xml:id="cp_7_AC_5a"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <cctype>
using namespace std;

string ROT13(string input) {
    size_t n = 0;
    while (n < input.length()) {
        if (isalpha(input[n])) {
            if ((input[n] >= 'a' && input[n] < 'n') || (input[n] >= 'A' && input[n] < 'N')) {
                input[n] = input[n] + 13;
            }
            else {
                input[n] = input[n] - 13;
            }
        }
        n++;
    }
    return input;
}

int main() {
    string original = "Encrypt me then decrypt me!";
    string encrypted = ROT13 (original);
    string decrypted = ROT13 (encrypted);
    cout << "Original string: " << original << endl;
    cout << "Encrypted string: " << encrypted << endl;
    cout << "Decrypted string: " << decrypted << endl;

    // Uncomment and run the code below once your function works!
    // string secretMessage = "Pbatenghyngvbaf! Lbh'ir fhpprffshyyl vzcyrzragrq EBG13 naq qrpbqrq gur frperg zrffntr :)";
    // cout << ROT13 (secretMessage) << endl;
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cp_7_AC_6q">
    <statement>
      <p>Write the function <c>reverseWord</c> which takes a <c>string input</c>, reverses it, and returns the reversed <c>string</c>.
        Run and test your code! Check the hint below for help with the construction of the
        code.</p>
    </statement>
    <program xml:id="cp_7_AC_6q_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

string reverseWord(string input) {
    // Write your implementation here.
}
]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("reverseWord function") {
    REQUIRE(reverseWord("hello") == "olleh");
    REQUIRE(reverseWord("world") == "dlrow");
    REQUIRE(reverseWord("racecar") == "racecar");
}
</tests>
    </program>
    <hint>
      <activity label="cp_7_AC_6q_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide">
        <statement>
          <p>Write the function <c>reverseString</c> which takes a <c>string input</c>, reverses it, and returns the reversed <c>string</c>.
            Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="8">
            <cline>string reverseWord(string input) {</cline>
          </block>
          <block order="7">
            <cline>    size_t len = input.length();</cline>
          </block>
          <block order="1">
            <cline>    string reverse;</cline>
          </block>
          <block order="4">
            <choice correct="yes">
              <cline>    for (size_t i = len - 1; i != string::npos; i--) {</cline>
            </choice>
            <choice>
              <cline>    for (size_t i = len; i != string::npos; i--) { </cline>
            </choice>
          </block>
          <block order="2">
            <cline>        reverse.push_back(input[i]);</cline>
          </block>
          <block order="5">
            <cline>    }</cline>
          </block>
          <block order="6">
            <cline>    return reverse;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_7_AC_7">
    <statement>
      <p>Write the function <c>capitalize</c> , which takes a <c>string input</c> as a parameter. <c>capitalize</c> capitalizes the
        first letter of every word, and returns the new <c>string</c> .</p>
    </statement>
    <program interactive="activecode">
      <code><![CDATA[
          #include <iostream>
          #include <cctype>
          using namespace std;

          string capitalize(string input) {
              // Write your implementation here.
          }

          int main() {
              cout << capitalize("every word in this string should be capitalized!") << endl;
              cout << capitalize("this String As well") << endl;
          }
]]></code>
    </program>
    <solution>
      <p>Below is one way to implement the <c>capitalize</c> function. We use a <c>while</c> loop to go through all
        the <c>char</c>s in the <c>string</c>. We capitalize the first character and all characters following
        a space using <c>toupper</c>. At the end, we return the <c>string</c>.</p>
      <program xml:id="cp_7_AC_7a"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <cctype>
using namespace std;

string capitalize(string input) {
    size_t n = 0;
    while (n < input.length()) {
        if (n == 0) {
            input[n] = toupper(input[n]);
        }
        else if (input[n-1] == ' ') {
            input[n] = toupper(input[n]);
        }
        n++;
    }
    return input;
}

int main() {
    cout << capitalize ("every word in this string should be capitalized!") << endl;
    cout << capitalize ("this String As well") << endl;
}
]]></code></program>
    </solution>
  </exercise>

  <exercise label="cp_7_AC_8q">
    <statement>
      <p>Write the function <c>countVowels</c> which takes a <c>string input</c> and returns the number of vowels in the <c>string</c>.
        Remember, &#x2018;a', &#x2018;e', &#x2018;i', &#x2018;o', and &#x2018;u' are vowels. Run and
        test your code! Check the hint below for help with the construction of the code.</p>
    </statement>
    <program xml:id="cp_7_AC_8q_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int countVowels(string input) {
    // Write your implementation here.
}
]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("countVowels function") {
    REQUIRE(countVowels("onomatopoeia") == 8);
    REQUIRE(countVowels("cysts") == 0);
    REQUIRE(countVowels("vowels") == 2);
}</tests>
    </program>
    <hint>
      <activity label="cp_7_AC_8q_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide">
        <statement>
          <p>Write the function <c>countVowels</c> which takes a <c>string input</c> and returns the number of vowels in
            the <c>string</c>. Remember, &#x2018;a', &#x2018;e', &#x2018;i', &#x2018;o', and &#x2018;u'
            are vowels. Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="5">
            <cline>int countVowels(string input) {</cline>
          </block>
          <block order="1">
            <cline>    int count = 0;</cline>
          </block>
          <block order="9">
            <cline><![CDATA[    for (size_t i = 0; i < input.length; i++) {]]></cline>
          </block>
          <block order="3">
            <choice correct="yes">
              <cline>        if (input[i] == 'a' || input[i] == 'e' || input[i] == 'i' || input[i] == 'o' || input[i] == 'u') {</cline>
            </choice>
            <choice>
              <cline>        if (input[i] == 'a' &amp;&amp; input[i] == 'e' &amp;&amp; input[i] == 'i' &amp;&amp; input[i] == 'o' &amp;&amp; input[i] == 'u') { </cline>
            </choice>
          </block>
          <block order="6">
            <cline>            count++;</cline>
          </block>
          <block order="7">
            <cline>        }</cline>
          </block>
          <block order="4">
            <cline>    }</cline>
          </block>
          <block order="2">
            <cline>    return count;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>


  <exercise label="cp_7_AC_9">
    <statement>
      <p>Write the function <c>longestWord</c> , which takes a <c>string input</c> as a parameter. <c>longestWord</c> returns the
        words with the most letters in <c>input</c> . If there's a tie, return the first word. Use the <c>substr</c>
        function. Run and test your code!</p>
    </statement>
    <program interactive="activecode">
      <code><![CDATA[
          #include <iostream>
          using namespace std;

          string longestWord (string input) {
              // Write your implementation here.
          }
]]></code>
      <tests>
        #define CATCH_CONFIG_MAIN
        #include &lt;catch.hpp&gt;
        
        TEST_CASE("longestWord function") {
            REQUIRE(longestWord("what is the longest word in this string") == "longest");
            REQUIRE(longestWord("these words are very close in size") == "these");
            REQUIRE(longestWord("vowels") == "vowels");
        }
      </tests>
    </program>
    <solution>
      <p>Below is one way to implement the <c>longestWord</c> function. We use a <c>while</c> loop to go through all
        the <c>char</c>s in the <c>string</c>. We use variables to keep track of the longest word, the longest
        amount of letters, and the length of the current word. We can determine the length of a word
        by counting the number of <c>char</c>s between spaces. If the length is greater than the max,
        length becomes the new max and we update the longest word. This keeps repeating until we
        reach the end of the string, and the longest word is returned.</p>
      <program xml:id="cp_7_AC_9a"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

string longestWord(string input) {
    size_t n = 0;
    size_t maxLength = 0;
    while (n < input.length()) {
        size_t wordLength = 0;
        while (input[n] != ' ' && n < input.length()) {
            wordLength++;
            n++;
        }
        if (wordLength > maxLength) {
            maxLength = wordLength;
            longest = input.substr(n - maxLength, maxLength);
        }
        n++;
    }
    return longest;
}
]]></code></program>
    </solution>
  </exercise>

  <exercise label="cp_7_AC_10q">
    <statement>
      <p>Camel case is the practice of writing phrases without spaces or punctuation, indicating the
        separation of words using capital letter. For example, <q>camel case</q> in camel case is <q>
        camelCase</q>. Snake case is the practice of writing phrases where each space is replaced by
        an underscore. For example, <q>snake case</q> in snake case is <q>snake_case</q>. Write the
        functions <c>snakeToCamel</c> and <c>camelToSnake</c>. Each function takes a <c>string input</c> and returns the input using the
        other stylization. Feel free to use any <c>string</c> functions you'd like. Run and test your
        code! Check the hint below for help with the construction of the code.</p>
    </statement>
    <program xml:id="cp_7_AC_10q_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <string>
#include "ctype.h"
using namespace std;

string snakeToCamel(string input) {
    // Write your implementation here.
}

string camelToSnake(string input) {
    // Write your implementation here.
}
    ]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("snakeToCamel function") {
    REQUIRE(snakeToCamel ("turn_this_into_camel_case") == "turnThisIntoCamelCase");
    REQUIRE(snakeToCamel ("hello_world") == "helloWorld");
    REQUIRE(snakeToCamel ("code") == "code");
}

TEST_CASE("camelToSnake function") {
    REQUIRE(camelToSnake ("turnThisIntoSnakeCase") == "turn_this_into_snake_case");
    REQUIRE(camelToSnake ("helloWorld") == "hello_world");
    REQUIRE(camelToSnake ("code") == "code");
}
</tests>
    </program>
    <hint>
      <activity label="cp_7_AC_10q_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide">
        <statement>
          <p>Camel case is the practice of writing phrases without spaces or punctuation, indicating
            the separation of words using capital letter. For example, <q>camel case</q> in camel
            case is <q>camelCase</q>. Snake case is the practice of writing phrases where each space
            is replaced by an underscore. For example, <q>snake case</q> in snake case is <q>
            snake_case</q>. Write the functions <c>snakeToCamel</c> and <c>camelToSnake</c>. Each function takes a <c>string input</c>
            and returns the input using the other stylization. Feel free to use any <c>string</c>
            functions you'd like. Use the lines to construct the code, then go back to complete the
            Activecode.</p>
        </statement>
        <blocks>
          <block order="3">
            <cline>// snakeToCamel function</cline>
            <cline>string snakeToCamel(string input) {</cline>
            <cline>    size_t len = input.length();</cline>
            <cline><![CDATA[    for (size_t i = 0; i < len; i++) {]]></cline>
          </block>
          <block order="10">
            <cline>        if (input[i] == '_') {</cline>
            <cline>            input[i+1] = toupper(input[i+1]);</cline>
            <cline>            input.erase(i,1);</cline>
            <cline>        }</cline>
          </block>
          <block order="1">
            <cline>    }</cline>
            <cline>    return input;</cline>
            <cline>}</cline>
          </block>
          <block order="6">
            <cline>// camelToSnake function</cline>
            <cline>string camelToSnake(string input) {</cline>
            <cline>    size_t len = input.length();</cline>
            <cline><![CDATA[    for (size_t i = 0; i < len; i++) {]]></cline>
          </block>
          <block order="4">
            <cline>        if (isupper(input.at(i))) {</cline>
            <cline>            input.at(i) = tolower(input.at(i));</cline>
            <cline>            input.insert(i, "_");</cline>
            <cline>        }</cline>
          </block>
          <block order="8">
            <cline>    }</cline>
            <cline>    return input;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

</exercises>