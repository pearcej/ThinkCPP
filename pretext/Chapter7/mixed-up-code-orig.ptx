<?xml version="1.0"?>
<section xml:id="chapter7_mixed-up-code-practice">
  <title>Mixed Up Code Practice</title>
  <exercise label="mucp_7_1" numbered="yes" adaptive="yes" indentation="show">
    <statement>
      <p>Write a program that prints the 4th character of word,
            and finds and replaces all instances of &#x2018;i' with &#x2018;e'.
            Finally, print out the string. Put the necessary blocks in the correct order.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>int main() {</cline>
      </block>
      <block order="7">
        <cline>   string word = "irritating";</cline>
      </block>
      <block order="2">
        <cline><![CDATA[   cout << word[3] << endl;]]></cline>
      </block>
      <block order="10" correct="no">
        <cline><![CDATA[   cout << irritating[3] << endl;  ]]></cline>
      </block>
      <block order="9" correct="no">
        <cline><![CDATA[   cout << word.at(4) << endl;  ]]></cline>
      </block>
      <block order="6" correct="no">
        <cline><![CDATA[   cout << word[4] << endl;  ]]></cline>
      </block>
      <block order="4">
        <cline>   while ((int)word.find('i') != -1) {</cline>
      </block>
      <block order="8" correct="no">
        <cline>   while ((int)word.find('e') != -1) {  </cline>
      </block>
      <block order="12" correct="no">
        <cline>   while ((int)word.find('i')) {  </cline>
      </block>
      <block order="3">
        <cline>      word[word.find('i')] = 'e';</cline>
      </block>
      <block order="13" correct="no">
        <cline>      word[word.find('e')] = 'i';  </cline>
      </block>
      <block order="11">
        <cline>   }</cline>
      </block>
      <block order="1">
        <cline><![CDATA[   cout << word << endl;]]></cline>
      </block>
      <block order="14">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_7_2" numbered="yes" adaptive="yes" indentation="show">
    <statement>
      <p>An anagram is a play on words by rearranging the letters of the original words
            to form new words. For example, the letters in <q>listen</q> can be rearranged to
            make <q>silent</q>. Write a program that rearranges <q>night</q> into <q>thing</q> and prints the anagram.
            Put the necessary blocks in the correct order.</p>
    </statement>
    <blocks>
      <block order="8">
        <cline>int main() {</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>   string original = "night";</cline>
        </choice>
        <choice>
          <cline>   string original = "thing";  </cline>
        </choice>
      </block>
      <block order="9">
        <cline>   string anagram = original;</cline>
      </block>
      <block order="7">
        <cline>   anagram[0] = original[original.find('t')];</cline>
      </block>
      <block order="11">
        <cline>   anagram[1] = original[original.find('h')];</cline>
      </block>
      <block order="4">
        <cline>   anagram[2] = original[original.find('i')];</cline>
      </block>
      <block order="2">
        <cline>   anagram[3] = original[original.find('n')];</cline>
      </block>
      <block order="6">
        <cline>   anagram[4] = original[original.find('g')];</cline>
      </block>
      <block order="10">
        <cline>   cout &lt;&lt; anagram;</cline>
      </block>
      <block order="5">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_7_3" numbered="yes" adaptive="yes" indentation="show">
    <statement>
      <p>Let's write the function longerString, which takes two parameters,
            first and second. If first has more letters
            than second, longerString prints <q>first is longer than second</q>,
            and vice versa. If they have the same number of letters, longerString
            prints <q>first and second are the same length</q>.
            Put the necessary blocks in the correct order.</p>
    </statement>
    <blocks>
      <block order="8">
        <choice correct="yes">
          <cline>void longerString(string first, string second) {</cline>
        </choice>
        <choice>
          <cline>string longerString(string first, string second) {  </cline>
        </choice>
      </block>
      <block order="15">
        <choice correct="yes">
          <cline>   if (first.length() &gt; second.length()) {</cline>
        </choice>
        <choice>
          <cline>   if (first.length() &gt;= second.length()) {  </cline>
        </choice>
      </block>
      <block order="3">
        <cline><![CDATA[      cout << first << " is longer than " << second << endl;]]></cline>
      </block>
      <block order="4">
        <cline>   }</cline>
      </block>
      <block order="14">
        <cline><![CDATA[   else if (first.length() < second.length()) {]]></cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline><![CDATA[      cout << second << " is longer than " << first << endl;]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[      cout << second << " is longer than " << second << endl;  ]]></cline>
        </choice>
      </block>
      <block order="6">
        <cline>   }</cline>
      </block>
      <block order="11">
        <cline>   else {</cline>
      </block>
      <block order="10" correct="no">
        <cline>   else (first.length() == second.length()) {  </cline>
      </block>
      <block order="2">
        <cline><![CDATA[      cout << first << " and " << second << " are the same length" << endl;]]></cline>
      </block>
      <block order="7">
        <cline>   }</cline>
      </block>
      <block order="1">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_7_4" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Let's write the code for the cipherText function. cipherText
            should be a void function that takes input as a parameter,
            increases the value of each character by 1 (i.e. <q>bad</q> turns into <q>cbe</q>),
            and prints the encrypted string.</p>
    </statement>
    <blocks>
      <block order="9">
        <choice correct="yes">
          <cline>void cipherText(string input) {</cline>
        </choice>
        <choice>
          <cline>string cipherText(string input) {  </cline>
        </choice>
      </block>
      <block order="11">
        <cline>   int i = 0;</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline><![CDATA[   while (i < input.length()) {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[   while (i < input.length() - 1) {  ]]></cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>      input[i] = input[i] + 1;</cline>
        </choice>
        <choice>
          <cline>      input[i] = input[i] - 1;  </cline>
        </choice>
      </block>
      <block order="3">
        <cline>      i++;</cline>
      </block>
      <block order="8">
        <cline>   }</cline>
      </block>
      <block order="12">
        <choice correct="yes">
          <cline>   cout &lt;&lt; input;</cline>
        </choice>
        <choice>
          <cline>   return input;  </cline>
        </choice>
      </block>
      <block order="7">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_7_5" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>The program below should print out the number of occurences of the character &#x2018;t'
            in the string tongue_twister but the code is mixed up. Put the necessary blocks
            in the correct order, with declaration in the order of tongue_twister, count, and i.</p>
    </statement>
    <blocks>
      <block order="11">
        <cline>int main() {</cline>
      </block>
      <block order="4">
        <cline>   string tongue_twister = "twelve twins twirled twelve twigs";</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>   int count = 0;</cline>
        </choice>
        <choice>
          <cline>   int count = 1;  </cline>
        </choice>
      </block>
      <block order="8">
        <cline>   int i = 0;</cline>
      </block>
      <block order="13">
        <cline><![CDATA[   while (i < (int)tongue_twister.length()) {]]></cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>      if (tongue_twister[i] == 't') {</cline>
        </choice>
        <choice>
          <cline>      if (tongue_twister[i] = 't') {  </cline>
        </choice>
      </block>
      <block order="12">
        <cline>         count++;</cline>
      </block>
      <block order="1">
        <cline>      }</cline>
      </block>
      <block order="9">
        <cline>      i++;</cline>
      </block>
      <block order="5">
        <cline>   }</cline>
      </block>
      <block order="2">
        <cline>   cout &lt;&lt; count;</cline>
      </block>
      <block order="6">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_7_6" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>The program below should print out the index of the second instance of the
            character &#x2018;i' but the code is mixed up and contains extra blocks.
            Put the necessary blocks in the correct order.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>int main() {</cline>
      </block>
      <block order="9">
        <cline>   string quote = "Your time is limited, so don't waste it living someone else's life.";</cline>
      </block>
      <block order="7" correct="no">
        <cline>   int i = 0;  </cline>
      </block>
      <block order="2" correct="no">
        <cline><![CDATA[   while (i < quote.length()) {  ]]></cline>
      </block>
      <block order="6">
        <cline>   int first = quote.find("i");</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>   int index = find(quote, 'i', first + 1);</cline>
        </choice>
        <choice>
          <cline>   int index = find(quote, 'i', first);  </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>   cout &lt;&lt; index;</cline>
        </choice>
        <choice>
          <cline>   cout &lt;&lt; first;  </cline>
        </choice>
      </block>
      <block order="10">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_7_7" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Deep in the forest live the 7 dwarves named Sorty, Torty, Vorty,
            Worty, Xorty, Yorty, and Zorty. The program below should print
            out each of their names but the code is mixed up and contains extra blocks.
            Put the necessary blocks in the correct order.</p>
    </statement>
    <blocks>
      <block order="10">
        <cline>int main() {</cline>
      </block>
      <block order="8" correct="no">
        <cline>   string name = <q>Sorty</q>; </cline>
      </block>
      <block order="1">
        <cline>   string suffix = "orty";</cline>
      </block>
      <block order="4">
        <cline>   char letter = 'S';</cline>
      </block>
      <block order="12">
        <cline><![CDATA[   while (letter <= 'Z') {]]></cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>      if (letter != 'U') {</cline>
        </choice>
        <choice>
          <cline>      if (letter == 'U') {  </cline>
        </choice>
      </block>
      <block order="5">
        <cline><![CDATA[         cout << letter + suffix << endl;]]></cline>
      </block>
      <block order="9">
        <cline>      }</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>      letter++;</cline>
        </choice>
        <choice>
          <cline>      suffix++;  </cline>
        </choice>
      </block>
      <block order="11">
        <cline>   }</cline>
      </block>
      <block order="13">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_7_8" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>On the strange planet of Noes, there's a law that prohibits the usage of the letter <q>e</q>.
            As a result, they hired you to write a function called censorE that replaces all occurences
            of the letter <q>e</q> in a string with an asterisk and returns the censored string. For example,
            if the input is <q>hello world</q>, the function returns <q>h*llo world</q>.</p>
    </statement>
    <blocks>
      <block order="3">
        <choice correct="yes">
          <cline>string censorE(string input) {</cline>
        </choice>
        <choice>
          <cline>void censorE(string input) {  </cline>
        </choice>
      </block>
      <block order="4" correct="no">
        <cline>   string copy = input;  </cline>
      </block>
      <block order="8">
        <cline>   int i = 0;</cline>
      </block>
      <block order="11">
        <choice correct="yes">
          <cline><![CDATA[   while (i < input.length()) {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[   while (i < input.length() - 1) {  ]]></cline>
        </choice>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline>      if (input[i] == 'e') {</cline>
        </choice>
        <choice>
          <cline>      if (input[i] = 'e') {  </cline>
        </choice>
      </block>
      <block order="14">
        <choice correct="yes">
          <cline>         input[i] = '*';</cline>
        </choice>
        <choice>
          <cline>         '*' = input[i];  </cline>
        </choice>
      </block>
      <block order="2">
        <cline>      }</cline>
      </block>
      <block order="7">
        <cline>      i++;</cline>
      </block>
      <block order="6">
        <cline>   }</cline>
      </block>
      <block order="13">
        <cline>   return input;</cline>
      </block>
      <block order="15">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_7_9" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Your work for the planet of Noes impressed the nearby planets of Noas, Nois, Noos, and Nous.
            They want you to write different functions that censor out each planet's corresponding forbidden letter.
            However, your galaxy brain knows better than to write a different function for each planet.
            Using generalization, write the function censorLetter which takes input and a char to censor
            as parameters and returns a censored string. For example, censorLetter(<q>Bye world</q>, &#x2018;o') returns the
            string <q>Bye w*rld</q>.</p>
    </statement>
    <blocks>
      <block order="3">
        <choice correct="yes">
          <cline>string censorLetter(string input, char letter) {</cline>
        </choice>
        <choice>
          <cline>string censorLetter(string input) {  </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>   int i = 0;</cline>
        </choice>
        <choice>
          <cline>   int i = 1;  </cline>
        </choice>
      </block>
      <block order="9">
        <cline><![CDATA[   while (i < input.length()) {]]></cline>
      </block>
      <block order="13">
        <choice correct="yes">
          <cline>      if (input[i] == letter) {</cline>
        </choice>
        <choice>
          <cline>      if (input[i] == "letter") {  </cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>         input[i] = '*';</cline>
        </choice>
        <choice>
          <cline>         '*' = input[i];  </cline>
        </choice>
      </block>
      <block order="7">
        <cline>      }</cline>
      </block>
      <block order="10">
        <cline>      i++;</cline>
      </block>
      <block order="11">
        <cline>   }</cline>
      </block>
      <block order="14">
        <cline>   return input;</cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_7_10" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Let's write a function called alphaCombine which takes
            two strings, first and second,
            and returns a string which concatenates first and second in
            alphabetical order. For example,
            alphabetizer (<q>zebra, mega</q>) returns the string
            <q>megazebra</q> since <q>mega</q> comes before <q>zebra</q> in the alphabet.
            Put the necessary blocks in the correct order.</p>
    </statement>
    <blocks>
      <block order="2">
        <choice correct="yes">
          <cline>string alphaCombine(string first, string second) {</cline>
        </choice>
        <choice>
          <cline>void alphaCombine(string first, string second) {  </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>   if (first &gt; second) {</cline>
        </choice>
        <choice>
          <cline>   if ("first" &gt; "second") {  </cline>
        </choice>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>      return second + first;</cline>
          <cline>   }</cline>
        </choice>
        <choice>
          <cline><![CDATA[      cout << second << first;  ]]></cline>
          <cline>   }</cline>
        </choice>
      </block>
      <block order="4">
        <cline>   else {</cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>      return first + second;</cline>
          <cline>   }</cline>
        </choice>
        <choice>
          <cline><![CDATA[      cout << first << second;  ]]></cline>
          <cline>   }</cline>
        </choice>
      </block>
      <block order="5">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_7_11" numbered="yes" adaptive="yes" indentation="show">
    <statement>
      <p>Let's write a function called ispalindrome which takes
            a string named input
            and returns a bool
            The function returns true if the string is a palindrome and false if not.
            palindromes are symmetrical strings.
            That is a string that reads the same backwards is palindrome.
            palindromes:  <q>hih</q>, <q>i</q>, <q>bob</q>, <q>tenet</q>, <q>soos</q>, <q>madam</q> .
            not palindromes: <q>join</q>, <q>hat</q>, <q>frat</q>, <q>supper</q>, <q>rhythm</q>.
            The code is mixed up and contains extra blocks.
            Put the necessary blocks in the correct order.</p>
    </statement>
    <blocks>
      <block order="1">
        <choice correct="yes">
          <cline>bool ispalindrome(string input) {</cline>
        </choice>
        <choice>
          <cline>string ispalindrome(bool input) {  </cline>
        </choice>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>   int front = 0 , back = input.length() - 1;</cline>
        </choice>
        <choice>
          <cline>   int front = 0 , back = input.length(); </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>   while ( front &amp;lt back) {</cline>
        </choice>
        <choice>
          <cline>   while ( front &amp;gt back) { </cline>
        </choice>
      </block>
      <block order="2">
        <cline>      if( input[b] != input[e] ) {</cline>
      </block>
      <block order="14" correct="no">
        <cline>      else { </cline>
      </block>
      <block order="10">
        <cline>         return false;</cline>
      </block>
      <block order="11">
        <cline>      }</cline>
      </block>
      <block order="13">
        <cline>      front = front + 1;</cline>
      </block>
      <block order="6">
        <cline>      back = back - 1;</cline>
      </block>
      <block order="15">
        <cline>   }</cline>
      </block>
      <block order="12">
        <cline>   return true;</cline>
      </block>
      <block order="8">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>
