<?xml version="1.0"?>
<section xml:id="chapter7_traversal">
  <title>Traversal</title>
  <p>A common thing to do with a string is start at the beginning, select each character in turn, do
    something to it, and continue until the end. This pattern of processing is called a <term>
    traversal</term>. A natural way to encode a traversal is with a <c>while</c> statement.</p>
  <note>
    <p>On some machines, comparing an <c>int</c> to the output from <c>length</c> will generate a type error.
      This is because the length function returns an unsigned integer type. To keep the variable
      type consistent, you should use <c>size_t</c> rather than <c>int</c> for the type of the counter you
      use to keep track of the current index in the string.</p>
  </note>
  <listing label="traversal_AC_1">
    <caption>
      This active code outputs each letter of string <c>fruit</c> using a while loop.
    </caption>
    <program xml:id="traversal_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <string>
#include <iostream>
using namespace std;

int main() {
    string fruit = "apple";
    size_t index = 0;
    while (index < fruit.lenght()) {
        char letter = fruit[index];
        cout << letter << endl;
        index = index + 1;
    }
}
        ]]></code>
    </program>
  </listing>
  <p>This loop traverses the string and outputs each letter on a line by itself. Notice that the
    condition is <c>index &lt; lengthfruit</c>, which means that when <c>index</c> is equal to the length of the string, the
    condition is false and the body of the loop is not executed. The last character we access is the
    one with the index <c>fruit.length()-1</c>.</p>
  <p>The name of the loop variable is <c>index</c>. An <term>index</term> is a variable or value used to
    specify one member of an ordered set, in this case the set of characters in the string. The
    index indicates (hence the name) which one you want. The set has to be ordered so that each
    letter has an index and each index refers to a single character.</p>
  <p>As an exercise, write a function that takes an <c>string</c> as an argument and that outputs the
    letters backwards, all on one line.</p>
  <exercise label="traversal_1">
    <caption>
      Try writing the <c>reverseWord</c> function in the commented section of this active code. If done
        correctly, the program should output <q>hello</q> backwards. If you get stuck, you can
        reveal the hint below for help.
    </caption>
    <program xml:id="traversal_AC_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

void reverseWord(string word) {
    // 'reverseWord' should take the letters of 'word'
    // and output them in reverse.
}

int main() {
    reverseWord("hello");
}
        ]]></code>
    </program>
    <hint>
      <activity label="traversal_1_hint"
                numbered="yes"
                adaptive="yes"
                indentation="hide"
                exercise-interactive="parson"
                langauge="cpp">
        <statement>
          <p>Let's write the code for the <c>reverseWord</c> function. <c>reverseWord</c> should take a string as a
            parameter and output the letters backwards.</p>
        </statement>
        <blocks>
          <block order="5">
            <cline>void reverseWord(string input) {</cline>
          </block>
          <block order="7">
            <choice correct="yes">
              <cline> size_t count = 0;</cline>
              <cline> size_t index = input.length() - 1;</cline>
            </choice>
            <choice>
              <cline> size_t count = 0;</cline>
              <cline> size_t index = input.length();  </cline>
            </choice>
          </block>
          <block order="2">
            <choice correct="yes">
              <cline><![CDATA[ while (count < input.length()) {]]></cline>
            </choice>
            <choice>
              <cline><![CDATA[ while (count <= input.length() ) { ]]></cline>
            </choice>
          </block>
          <block order="4">
            <cline><![CDATA[  cout << input[index];]]></cline>
          </block>
          <block order="8">
            <cline>  index = index - 1;</cline>
            <cline>  count = count + 1;</cline>
            <cline> }</cline>
            <cline>}</cline>
          </block>
          <block order="3"
                 correct="no">
            <cline>  index = index + 1;</cline>
            <cline>  count = count + 1;</cline>
            <cline> }</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="traversal_2">
    <statement>
      <p>How many times is the letter o printed by the following statements?</p>
      <program line-numbers="yes">
        <code><![CDATA[
string s = "coding rocks";
size_t i = 1;
while (i < s.length()) {
  cout << s[i] << endl;
  i = i + 2;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          <p>i goes through the odd numbers starting at 1.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>Yes, i goes through the odd numbers starting at 1. o is at position 1 and 8.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>There are 2 o characters but idx does not take on the correct index values for both.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="traversal_3">
    <statement>
      <p>What is printed when the code is run?</p>
      <program line-numbers="yes">
        <code><![CDATA[
string truth = "engr101";
size_t index = 0;
int counter = 0;
while (index < truth.length()) {
  cout << truth[index] << " ";
  index = index + counter;
  counter = counter + 1;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>e e n r 1</p>
        </statement>
        <feedback>
          <p>Correct! the values of index are 0 0 1 3 6. After this while loop ends.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>e e e e e</p>
        </statement>
        <feedback>
          <p>We are updating the value of of <code>index</code>. Not doing so would make it an
            infinte loop!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>e e n r</p>
        </statement>
        <feedback>
          <p>Recalculate the values of <code>index</code> at each stage and consider which ones are
            &amp;lt 7.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>