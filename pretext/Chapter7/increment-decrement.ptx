<?xml version="1.0"?>
<section xml:id="chapter7_increment-and-decrement-operators">
  <title>Increment and decrement operators</title>
  <p>Incrementing and decrementing are such common operations that C++ provides special operators
    for them. The <c>++</c> operator adds one to the current value of an <c>int</c>, <c>char</c> or <c>double</c>,
    and <c>&#x2013;</c> subtracts one. Neither operator works on <c>string</c>s, and neither <em>should</em> be
    used on <c>bool</c>s.</p>
  <p>Technically, it is legal to increment a variable and use it in an
    expression at the same time. For example, you might see something like:</p>
  <program>
cout &lt;&lt; i++ &lt;&lt; endl;
</program>
  <p>Looking at this, it is not clear whether the increment will take effect
    before or after the value is displayed. Because expressions like this
    tend to be confusing, I would discourage you from using them. In fact,
    to discourage you even more, I'm not going to tell you what the result
    is. If you really want to know, you can try it.</p>
  <listing label="increment_decrement_AC_1">
    <caption>
      The active code demonstrates how using increment operators with <c>cout</c> statements can be
        confusing.
    </caption>
    <program xml:id="increment_decrement_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int x = 0;
    // We incremented x, so it should print out 1 now right?
    cout << x++ << endl; // Weird, x is still 0?
}
        ]]></code>
    </program>
  </listing>
  <p>If you're curious about this, feel free to search up about prefix and postfix
    increment operators. But for now, just avoid incrementing a variable
    and using it in an expression at the same time.</p>
  <p>Using the increment operators, we can rewrite the letter-counter:</p>
  <program>int index = 0;
while (index &lt; length) {
  if (fruit[index] == 'a') {
    count++;
  }
  index++;
}</program>
  <listing label="increment_decrement_AC_2">
    <caption>
      This active code adds increment operators to our old letter-counter.
    </caption>
    <program xml:id="increment_decrement_AC_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string fruit = "banana";
    int count = 0;

    size_t index = 0;
    while (index < fruit.length()) {
        if (fruit[index] == 'a') {
            count++;
        }
        index++;
    }
    cout << count << endl;
}
        ]]></code>
    </program>
  </listing>
  <p>It is a common error to write something like</p>
  <program>
index = index++;             // WRONG!!
</program>
  <p>Unfortunately, this is syntactically legal, so the compiler will not warn you. The effect of
    this statement is to leave the value of <c>index</c> unchanged. This is often a difficult bug to
    track down.</p>
  <warning>
    <p>Remember, you can write <c>index = index + 1;</c>, or you can write <c>index++;</c>, but you shouldn't mix them.</p>
  </warning>
  <exercise label="increment_decrement_1">
    <statement>
      <p>Click on the incorrect or not suggested increment statements.</p>
    </statement>
    <feedback>
      <p>Re-read the text above and try again.</p>
    </feedback>
    <areas>
      <cline><area correct="no">count = count + 1;</area></cline>
      <cline><area correct="no">index++;</area></cline>
      <cline><area correct="yes">count = count++;</area></cline>
      <cline><area correct="yes">cout &lt;&lt; x++ &lt;&lt; endl;</area></cline>
      <cline><area correct="no">count--; </area></cline>
    </areas>
  </exercise>
  <exercise label="increment_decrement_2">
    <statement>
      <p>What does the following code print?</p>
      <program line-numbers="yes">
        <code><![CDATA[
int x = -5;
while (x < 0) {
  x++;
  cout << x << " ";
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>5 4 3 2 1</p>
        </statement>
        <feedback>
          <p>Notice that x is negative.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>-5 -4 -3 -2 -1</p>
        </statement>
        <feedback>
          <p>Notice that the value of x is incremented before it is printed.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>-4 -3 -2 -1 0</p>
        </statement>
        <feedback>
          <p>The value of x is incremented before it is printed so the first value printed is -4.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="increment_decrement_3"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Print every number from 1-10 in this format: <q>Number 1</q>. Each number should be on its
        own line.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>int x = 1;</cline>
      </block>
      <block order="6"
             correct="no">
        <cline>x = 1; </cline>
      </block>
      <block order="2">
        <cline>while (x &lt;= 10) {</cline>
      </block>
      <block order="4">
        <cline> <![CDATA[cout << "Number " << x << endl;]]></cline>
      </block>
      <block order="1"
             correct="no">
        <cline> <![CDATA[cout << "Number " << x; ]]></cline>
      </block>
      <block order="7"
             correct="no">
        <cline> ++x; </cline>
      </block>
      <block order="3">
        <cline> x++;</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>