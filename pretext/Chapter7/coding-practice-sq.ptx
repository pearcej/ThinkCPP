<?xml version="1.0"?>
<section xml:id="chapter7_coding-practice-1">
  <title>Coding Practice</title>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter7', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_7_AC_2q">
        <statement>
          <p>How much does Bubba love shrimp? Probably a lot. But how many times does the word <q>shrimp</q> come
                    up in his monologue? Write a function <c>countWord</c> that counts the number of times a given word
                    appears in a given string. <c>countWord</c> should take two strings <c>input</c> and <c>word</c> as parameters and return an <c>int</c>.
                    Feel free to use the <c>stringToLower</c> function we wrote earlier. Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_7_AC_2q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include "ctype.h"
using namespace std;

void stringToLower(string &input) {
    int i = 0;
    while (i < input.length()) {
        if (isalpha(input[i]) && isupper(input[i])) {
            input[i] = tolower(input[i]);
        }
        i++;
    }
}

int countWord(string input, string word) {
    // Write your implementation here.
}

int main() {
    string quote =
        "Anyway, like I was sayin', shrimp is the fruit of the sea. You can "
        "barbecue it, boil it, broil it, bake it, saute it. Dey's uh, "
        "shrimp-kabobs, shrimp creole, shrimp gumbo. Pan fried, deep fried, "
        "stir-fried. There's pineapple shrimp, lemon shrimp, coconut shrimp, "
        "pepper shrimp, shrimp soup, shrimp stew, shrimp salad, shrimp and "
        "potatoes, shrimp burger, shrimp sandwich. That- that's about "
        "it.";
    cout << "Your output: " << countWord(quote, "shrimp") << ", Correct output: 14" << endl;
}
        ]]></code>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter7', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_7_AC_2q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>How much does Bubba love shrimp? Probably a lot. But how many times does the word <q>shrimp</q> come
                    up in his monologue? Write a function <c>countWord</c> that counts the number of times a given word
                    appears in a given string. <c>countWord</c> should take two strings <c>input</c> and <c>word</c> as parameters and return an <c>int</c>.
                    Feel free to use the <c>stringToLower</c> function we wrote earlier. Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="2">
            <cline>int countWord(string input, string word) {</cline>
          </block>
          <block order="6">
            <cline>    int count = 0;</cline>
          </block>
          <block order="4">
            <choice correct="yes">
              <cline><![CDATA[    for (int i = 0; i < input.length() - 1; i++) {]]></cline>
              <cline>        int j = 0;</cline>
              <cline>        int k = i;</cline>
            </choice>
            <choice>
              <cline><![CDATA[    for (int i = 0; i < input.length(); i++) { ]]></cline>
              <cline>        int j = 0;</cline>
              <cline>        int k = i;</cline>
            </choice>
          </block>
          <block order="8">
            <cline><![CDATA[        for (int l = 0; l < word.length(); l++) {]]></cline>
          </block>
          <block order="1">
            <cline>            if (input[k] == word[l]) {</cline>
            <cline>                j++;</cline>
            <cline>            }</cline>
            <cline>            k++;</cline>
          </block>
          <block order="3">
            <cline>        if (m == word.length()) {</cline>
            <cline>            count ++</cline>
            <cline>        }</cline>
          </block>
          <block order="5">
            <cline>        }</cline>
            <cline>    }</cline>
            <cline>    return count;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter7', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_7_AC_4q">
        <statement>
          <p>Write a void function <c>removeWord</c> that removes a given word from a given string and prints
                    out the new string. <c>removeWord</c> should take two strings <c>input</c> and <c>word</c> as parameters
                    and prints out <c>input</c> with every occurence of <c>word</c> removed. Use string concatenation and the C++
                    string function <c>substr</c>. <c>substr</c> takes two parameters, a starting index and a length. For example,
                    if <c>string greeting = "hello world"</c>, then <c>greeting.substr(6, 5)</c> returns the string <c>"world"</c>.
                    Test your function in main. Check the hint below for help with the construction of the code.
                    The output should be:</p>
          <program>
Gucci , Gucci , Gucci , Gucci
</program>
        </statement>
        <program xml:id="cp_7_AC_4q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

void removeWord(string input, string word) {
    // Write your implementation here.
}

int main() {
    removeWord ("Gucci gang, Gucci gang, Gucci gang, Gucci gang", "gang");
}
        ]]></code>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter7', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_7_AC_4q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Write a void function <c>removeWord</c> that removes a given word from a given string and prints
                    out the new string. <c>removeWord</c> should take two strings <c>input</c> and <c>word</c> as parameters
                    and prints out <c>input</c> with every occurence of <c>word</c> removed. Use string concatenation and the C++
                    string function <c>substr</c>. <c>substr</c> takes two parameters, a starting index and a length. For example,
                    if <c>string greeting = "hello world"</c>, then <c>greeting.substr(6, 5)</c> returns the string <c>"world"</c>.
                    Test your function in main. Use the lines to construct the code, then go back to complete the Activecode.
                    The output should be:</p>
          <program>
Gucci , Gucci , Gucci , Gucci
</program>
        </statement>
        <blocks>
          <block order="2">
            <cline>void removeWord(string input, string word) {</cline>
          </block>
          <block order="5">
            <choice correct="yes">
              <cline><![CDATA[    for (int i = 0; i < word.length(); i++) {]]></cline>
            </choice>
            <choice>
              <cline><![CDATA[    for (int i = 0; i < input.length(); i++) { ]]></cline>
            </choice>
          </block>
          <block order="8">
            <cline>        int pos = input.find(word);</cline>
          </block>
          <block order="6">
            <choice correct="yes">
              <cline>        if (pos != input.length()) {</cline>
            </choice>
            <choice>
              <cline>        if (pos == input.length()) { </cline>
            </choice>
          </block>
          <block order="7">
            <cline>            input.erase(pos, word.length());</cline>
          </block>
          <block order="4">
            <cline>        }</cline>
            <cline>    }</cline>
            <cline>    cout &lt;&lt; input;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter7', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_7_AC_6q">
        <statement>
          <p>Write the function <c>reverseString</c> which takes a <c>string input</c>, reverses it,
                    and returns the reversed <c>string</c>. Run and test your code! Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_7_AC_6q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

string reverseWord(string input) {
    // Write your implementation here.
}
        ]]></code>
          <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("reverseWord function") {
    REQUIRE(reverseWord ("hello") == "olleh");
    REQUIRE(reverseWord ("world") == "dlrow");
    REQUIRE(reverseWord ("racecar") == "racecar");
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter7', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_7_AC_6q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Write the function <c>reverseString</c> which takes a <c>string input</c>, reverses it,
                    and returns the reversed <c>string</c>. Use the lines to construct
                    the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="8">
            <cline>string reverseWord(string input) {</cline>
          </block>
          <block order="7">
            <cline>    int len = input.length();</cline>
          </block>
          <block order="1">
            <cline>    string reverse;</cline>
          </block>
          <block order="4">
            <choice correct="yes">
              <cline>    for (int i = len - 1; i &gt;= 0; i--) {</cline>
            </choice>
            <choice>
              <cline>    for (int i = len; i &gt;= 0; i--) { </cline>
            </choice>
          </block>
          <block order="2">
            <cline>        reverse.push_back(input[i]);</cline>
          </block>
          <block order="5">
            <cline>    }</cline>
          </block>
          <block order="6">
            <cline>    return reverse;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter7', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_7_AC_8q">
        <statement>
          <p>Write the function <c>countVowels</c> which takes a <c>string input</c> and returns
                    the number of vowels in the <c>string</c>. Remember, &#x2018;a', &#x2018;e', &#x2018;i', &#x2018;o', and &#x2018;u'
                    are vowels. Run and test your code! Check the hint below for help with
                    the construction of the code.</p>
        </statement>
        <program xml:id="cp_7_AC_8q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

int countVowels(string input) {
    // Write your implementation here.
}
        ]]></code>
          <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("countVowels function") {
    REQUIRE(countVowels ("onomatopoeia") == 8);
    REQUIRE(countVowels ("cysts") == 0);
    REQUIRE(countVowels ("vowels") == 2);
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter7', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_7_AC_8q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Write the function <c>countVowels</c> which takes a <c>string input</c> and returns
                    the number of vowels in the <c>string</c>. Remember, &#x2018;a', &#x2018;e', &#x2018;i', &#x2018;o', and &#x2018;u'
                    are vowels. Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="5">
            <cline>int countVowels(string input) {</cline>
          </block>
          <block order="1">
            <cline>    int count = 0;</cline>
          </block>
          <block order="9">
            <cline><![CDATA[    for (int i = 0; i < input.length; i++) {]]></cline>
          </block>
          <block order="3">
            <choice correct="yes">
              <cline>        if (input[i] == 'a' || input[i] == 'e' || input[i] == 'i' || input[i] == 'o' || input[i] == 'u') {</cline>
            </choice>
            <choice>
              <cline>        if (input[i] == 'a' &amp;&amp; input[i] == 'e' &amp;&amp; input[i] == 'i' &amp;&amp; input[i] == 'o' &amp;&amp; input[i] == 'u') { </cline>
            </choice>
          </block>
          <block order="6">
            <cline>            count++;</cline>
          </block>
          <block order="7">
            <cline>        }</cline>
          </block>
          <block order="4">
            <cline>    }</cline>
          </block>
          <block order="2">
            <cline>    return count;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter7', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_7_AC_10q">
        <statement>
          <p>Camel case is the practice of writing phrases without spaces or punctuation,
                    indicating the separation of words using capital letter. For example, <q>camel case</q>
                    in camel case is <q>camelCase</q>. Snake case is the practice of writing phrases
                    where each space is replaced by an underscore. For example, <q>snake case</q>
                    in snake case is <q>snake_case</q>. Write the functions <c>snakeToCamel</c> and <c>camelToSnake</c>.
                    Each function takes a <c>string input</c> and returns the input using the other stylization.
                    Feel free to use any <c>string</c> functions you'd like. Run and test your code!
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_7_AC_10q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include <string>
#include "ctype.h"
using namespace std;

string snakeToCamel(string input) {
    // Write your implementation here.
}

string camelToSnake(string input) {
    // Write your implementation here.
}
        ]]></code>
          <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("snakeToCamel function") {
    REQUIRE(snakeToCamel ("turn_this_into_camel_case") == "turnThisIntoCamelCase");
    REQUIRE(snakeToCamel ("hello_world") == "helloWorld");
    REQUIRE(snakeToCamel ("code") == "code");
}

TEST_CASE("camelToSnake function") {
    REQUIRE(camelToSnake ("turnThisIntoSnakeCase") == "turn_this_into_snake_case");
    REQUIRE(camelToSnake ("helloWorld") == "hello_world");
    REQUIRE(camelToSnake ("code") == "code");
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter7', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_7_AC_10q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Camel case is the practice of writing phrases without spaces or punctuation,
                    indicating the separation of words using capital letter. For example, <q>camel case</q>
                    in camel case is <q>camelCase</q>. Snake case is the practice of writing phrases
                    where each space is replaced by an underscore. For example, <q>snake case</q>
                    in snake case is <q>snake_case</q>. Write the functions <c>snakeToCamel</c> and <c>camelToSnake</c>.
                    Each function takes a <c>string input</c> and returns the input using the other stylization.
                    Feel free to use any <c>string</c> functions you'd like. Use the lines to construct the code,
                    then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="3">
            <cline>// snakeToCamel function</cline>
            <cline>string snakeToCamel(string input) {</cline>
          </block>
          <block order="9">
            <cline>    int len = input.length();</cline>
          </block>
          <block order="2">
            <cline><![CDATA[    for (int i = 0; i < len; i++) {]]></cline>
          </block>
          <block order="10">
            <cline>        if (input[i] == '_') {</cline>
            <cline>            input[i+1] = toupper(input[i+1]);</cline>
            <cline>            input.erase(i,1);</cline>
            <cline>        }</cline>
          </block>
          <block order="1">
            <cline>    }</cline>
            <cline>    return input;</cline>
            <cline>}</cline>
          </block>
          <block order="6">
            <cline>// camelToSnake function</cline>
            <cline>string camelToSnake(string input) {</cline>
          </block>
          <block order="7">
            <cline>    int len = input.length();</cline>
          </block>
          <block order="5">
            <cline><![CDATA[    for (int i = 0; i < len; i++) {]]></cline>
          </block>
          <block order="4">
            <cline>        if (isupper(input.at(i))) {</cline>
            <cline>            input.at(i) = tolower(input.at(i));</cline>
            <cline>            input.insert(i, "_");</cline>
            <cline>        }</cline>
          </block>
          <block order="8">
            <cline>    }</cline>
            <cline>    return input;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
</section>
