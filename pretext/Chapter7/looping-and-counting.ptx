<?xml version="1.0"?>
<section xml:id="chapter7_looping-and-counting-loopcount">
  <title>Looping and counting</title>
  <listing label="looping_and_counting_AC_1">
    <caption>
      This active code counts the number of times the letter <c>'a'</c> appears in a string <c>fruit</c>
        .
    </caption>
    <program xml:id="looping_and_counting_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string fruit = "banana";
    size_t count = 0;

    size_t index = 0;
    while (index < fruit.length()) {
        if (fruit[index] == 'a') {
            count = count + 1;
        }
        index = index + 1;
    }
    cout << count << endl;
}
        ]]></code>
    </program>
  </listing>
  <p>This program demonstrates a common idiom, called a <term>counter</term>. The variable <c>count</c>
    is initialized to zero and then incremented each time we find an <c>'a'</c>. (To <term>increment</term>
    is to increase by one; it is the opposite of <term>decrement</term>, and unrelated to <term>
    excrement</term>, which is a noun.) When we exit the loop, <c>count</c> contains the result: the
    total number of a's.</p>
  <exercise label="looping_counting_1">
    <statement>
      <p>What does the following code print?</p>
      <program line-numbers="yes">
        <code><![CDATA[
int x = -5;
while (x < 0) {
  x = x + 1;
  cout << x << " ";
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>5 4 3 2 1</p>
        </statement>
        <feedback>
          <p>Notice that x is negative.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>-5 -4 -3 -2 -1</p>
        </statement>
        <feedback>
          <p>Notice that the value of x is incremented before it is printed.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>-4 -3 -2 -1 0</p>
        </statement>
        <feedback>
          <p>The value of x is incremented before it is printed so the first value printed is -4.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="looping_counting_2"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>As an exercise, encapsulate this code in a function named <c>countLetters</c>, and generalize it so
        that it accepts the string and the letter as arguments. In the function, declare <c>length</c>, <c>count</c>,
        and <c>index</c> in that order. Within the main function, declare <c>city</c> and <c>letter</c> in that
        order.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>size_t countLetters(string s, char letter) {</cline>
      </block>
      <block order="9">
        <cline> size_t length = s.length();</cline>
        <cline> size_t count = 0;</cline>
        <cline> size_t index = 0;</cline>
      </block>
      <block order="2">
        <cline> <![CDATA[while (index < length) {]]></cline>
      </block>
      <block order="10">
        <cline>  if (s[index] == letter) {</cline>
      </block>
      <block order="6">
        <cline>   count = count + 1;</cline>
        <cline>  }</cline>
      </block>
      <block order="13">
        <cline>  index = index + 1;</cline>
        <cline> }</cline>
      </block>
      <block order="1">
        <cline> return count;</cline>
        <cline>}</cline>
      </block>
      <block order="12">
        <cline>int main() {</cline>
      </block>
      <block order="8">
        <cline> string city = "New Baltimore";</cline>
        <cline> char letter = "e";</cline>
      </block>
      <block order="3">
        <cline> <![CDATA[cout << countLetters(city, letter);]]></cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="looping_counting_3"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>The following is the correct code for printing the even numbers from 0 to 10, but it also
        includes some extra code that you won't need. Drag the needed blocks from the left and put
        them in the correct order on the right.</p>
    </statement>
    <blocks>
      <block order="4"
             correct="no">
        <cline>x = x + 1; </cline>
      </block>
      <block order="5">
        <cline>x = 0;</cline>
      </block>
      <block order="3">
        <cline>while (x &lt;= 10) {</cline>
      </block>
      <block order="1"
             correct="no">
        <cline>while (x &lt; 10) { </cline>
      </block>
      <block order="2">
        <cline> <![CDATA[cout << x << endl;]]></cline>
      </block>
      <block order="6">
        <cline> x = x + 2;</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="looping_counting_4">
    <statement>
      <p>What is the value of <c>counter</c> right before main returns 0?</p>
      <program line-numbers="yes">
        <code><![CDATA[
string word_1 = "understand";
string word_2 = "underwaa";

size_t end_1 = word_1.length();
size_t end_2 = word_2.length();

if ( end_2 < end_1 ) {
   end_1 = end_2;
}

size_t index = 0;
size_t counter = 0;

while ( index < end_1 ) {
  if ( word_1[index] == word_2[index] ) {
     counter = counter + 1;
  }
  else {
     counter = counter - 1;
  }
  index = index + 1;
}

return 0;
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="looping_counting_4_opt_a">
          <p>The code dosen't reach <c>return 0</c> because we index out of bounds in <c>word_2</c>.</p>
        </statement>
        <feedback id="looping_counting_4_opt_a">
          <p>We set <c>end_1</c> to be the smaller of the two lengths so we don't index out of bounds.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="looping_counting_4_opt_b">
          <p>2</p>
        </statement>
        <feedback id="looping_counting_4_opt_b">
          <p>Not all the letters after index 4 differ in the two words.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="looping_counting_4_opt_c">
          <p>3</p>
        </statement>
        <feedback id="looping_counting_4_opt_c">
          <p>We decrement the value of counter when we don't have matching letters.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="looping_counting_4_opt_d">
          <p>4</p>
        </statement>
        <feedback id="looping_counting_4_opt_d">
          <p>Correct! we have 6 matching letters and 2 differing letters upto the length of <c>word_2</c>.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>