<?xml version="1.0"?>
<section xml:id="chapter7_string-concatenation">
  <title>String concatenation</title>
  <p>Interestingly, the <c>+</c> operator can be used on strings; it performs string <term>
    concatenation</term>. To concatenate means to join the two operands end to end.</p>
  <listing label="string_concatenation_AC_1">
    <caption>
      In this active code, we use the <c>+</c> operator to concatenate <c>fruit</c> with <c>bakedGood</c>
        to create <c>dessert</c>.
    </caption>
    <program xml:id="string_concatenation_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string fruit = "banana";
    string bakedGood = " nut bread";
    string dessert = fruit + bakedGood;
    cout << dessert << endl;
}
        ]]></code>
    </program>
  </listing>
  <p>The output of this program is <c>banana nut bread</c>.</p>
  <warning>
    <p>Unfortunately, the <c>+</c> operator does not work on native C strings.</p>
  </warning>
  <p>Thus, you cannot write something like</p>
  <program>
string dessert = "banana" + " nut bread";
</program>
  <p>because both operands are C strings. As long as one of the operands is a <c>string</c>, though, C++
    will automatically convert the other.</p>
  <p>It is also possible to concatenate a character onto the beginning or end of an <c>string</c>. In the
    following example, we will use concatenation and character arithmetic to output an abecedarian
    series.</p>
  <p><q>Abecedarian</q> refers to a series or list in which the elements appear in alphabetical
    order. For example, in Robert McCloskey's book <em>Make Way
      for Ducklings</em>, the names of the ducklings are Jack, Kack, Lack, Mack, Nack, Ouack, Pack
    and Quack. Here is a loop that outputs these names in order:</p>
  <listing label="string_concatenation_AC_2">
    <caption>
      This active code outputs the ducklings names in alphabetical order.
    </caption>
    <program xml:id="string_concatenation_AC_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string suffix = "ack";
    string u = "u";
    char letter = 'J';
    while (letter <= 'Q') {
        if (letter == 'O' || letter == 'Q') {
            cout << letter + u + suffix << endl;
        } else {
            cout << letter + suffix << endl;
        }
        letter++;
    }
}
        ]]></code>
    </program>
  </listing>
  <p>The output of this program is:</p>
  <console><output>Jack
Kack
Lack
Mack
Nack
Ouack
Pack
Quack</output></console>
  <p>Again, be careful to use string concatenation only with <c>string</c>s and not with native C strings.
    Unfortunately, an expression like <c>letter + "ack"</c> is syntactically legal in C++, although it produces a
    very strange result, at least in my development environment.</p>
  <exercise label="string_concatenation_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program line-numbers="yes">
        <code><![CDATA[
string s = "C++";
string t = "rocks";
cout << s + t << endl;
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>C++ rocks</p>
        </statement>
        <feedback>
          <p>Concatenation does not automatically add a space.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>C++</p>
        </statement>
        <feedback>
          <p>The expression s+t is evaluated first, then the resulting string is printed.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>C++rocks</p>
        </statement>
        <feedback>
          <p>Yes, the two strings are glued end to end.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, you cannot add two strings together.</p>
        </statement>
        <feedback>
          <p>The + operator has different meanings depending on the operands, in this case, two
            strings.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="string_concatenation_2"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>As an exercise, put together the code below so that it prints <c>C++ is so fun!</c></p>
    </statement>
    <blocks>
      <block order="5">
        <cline>int main() {</cline>
      </block>
      <block order="6">
        <cline>   string language = "C++";</cline>
        <cline>   string action = " is so ";</cline>
        <cline>   string adjective = "fun!";</cline>
      </block>
      <block order="1"
             correct="no">
        <cline>   string language = "C++"; </cline>
        <cline>   string action = "is so";</cline>
        <cline>   string adjective = "fun!";</cline>
      </block>
      <block order="4">
        <cline><![CDATA[   cout << language + action + adjective << endl;]]></cline>
      </block>
      <block order="2"
             correct="no">
        <cline><![CDATA[   cout << "language" + "action" + "adjective" << endl; ]]></cline>
      </block>
      <block order="3">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="string_concatenation_3"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Put together the code below to creater a function <c>greeter</c> that adds <q>hello</q> and <q>
        goodbye</q> behind and ahead of a message respectively and then prints the new message.
        Example: <c>greeter("ssup")</c> will print <q>hello ssup goodbye</q></p>
    </statement>
    <blocks>
      <block order="1">
        <cline>void greeter(string message) {</cline>
      </block>
      <block order="4"
             correct="no">
        <cline>string greeter(string message) { </cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>   string beginning = "hello ";</cline>
          <cline>   string end = " goodbye";</cline>
        </choice>
        <choice>
          <cline>   string beginning = "hello"; </cline>
          <cline>   string end = "goodbye";</cline>
        </choice>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>   string new_Word = beginning + message;</cline>
          <cline>   new_Word = new_Word + end;</cline>
        </choice>
        <choice>
          <cline>   string new_Word = message + beginning; </cline>
          <cline>   new_Word = message + end;</cline>
        </choice>
      </block>
      <block order="3"
             correct="no">
        <cline><![CDATA[   cout << "new_Word"; ]]></cline>
      </block>
      <block order="6">
        <cline>   cout &lt;&lt; new_Word;</cline>
      </block>
      <block order="9">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>