<?xml version="1.0"?>
<section xml:id="chapter7_the-find-function">
  <title>The <c>find</c> function</title>
  <p>The <c>string</c> class provides several other functions that you can invoke on strings. The <c>find</c>
    function is like the opposite the <c>[]</c> operator. Instead of taking an index and extracting
    the character at that index, <c>find</c> takes a character and finds the index where that character
    appears.</p>
  <listing label="find_function_AC_1">
    <caption>
      Take a look at this active code, which uses the <c>find</c> function to find the character <c>'a'</c>
        in string <c>fruit</c> and string <c>dessert</c>.
    </caption>
    <program xml:id="find_function_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string fruit = "banana";
    size_t index = fruit.find('a');
    cout << index << endl;
    string dessert = "pudding";
    size_t another_index = dessert.find('a');
    cout << another_index << " = " << string::npos << endl;
}
        ]]></code>
    </program>
  </listing>
  <p>This example finds the index of the letter <c>'a'</c> in the string. In this case, the letter
    appears three times, so it is not obvious what <c>find</c> should do. According to the
    documentation, it returns the index of the <em>first</em> appearance, so the result is 1. If the
    given letter does not appear in the string, <c>find</c> a <em>very</em> large integer. We can test
    whether <c>find</c> found a given letter by checking to see if it equals the constant defined by <c>string::npos</c>
    .</p>
  <p>In addition, there is a version of <c>find</c> that takes another <c>string</c> as an argument and that
    finds the index where the substring appears in the string.</p>
  <listing label="find_function_AC_2">
    <caption>
      This active code finds the starting index of <c>"nan"</c> in <c>fruit</c>.
    </caption>
    <program xml:id="find_function_AC_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string fruit = "banana";
    size_t index = fruit.find("nan");
    cout << index;
}
        ]]></code>
    </program>
  </listing>
  <p>This example returns the value 2.</p>
  <p>You should remember from <xref ref="chapter5_overloading"/> that there can be
    more than one function with the same name, as long as they take a different number of parameters
    or different types. In this case, C++ knows which version of <c>find</c> to invoke by looking at the
    type of the argument we provide.</p>
  <exercise label="find_function_1">
    <statement>
      <p>Click on the name of each variable that had been initialized with the value of 0.</p>
    </statement>
    <feedback>
      <p>Remember that the index of a string begins at 0, not 1.</p>
    </feedback>
    <areas>
<cline><area correct="no">def main() {:</area></cline>
<cline><area correct="no">string fruit = "apple";</area></cline>
<cline>    size_t<area correct="no"> index_a </area>= fruit.find('e');</cline>
<cline>    size_t<area correct="yes"> index_b </area>= fruit.find("app");</cline>
<cline>    size_t<area correct="yes"> index_c </area>= fruit.find('a');</cline>
<cline>    size_t<area correct="no"> index_d </area>= fruit.find('l');</cline>
<cline>}</cline>
    </areas>
  </exercise>
  <exercise label="find_function_2"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a block of code that correctly finds and prints where the first <q>B</q> is in
        the string. Declare <c>city</c> before <c>index</c>.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>int main() {</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline> string city = "New Baltimore";</cline>
        </choice>
        <choice>
          <cline> string city = "New Baltimore" </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline> size_t index = city.find('B');</cline>
        </choice>
        <choice>
          <cline> size_t index = city.find(B); </cline>
        </choice>
        <choice>
          <cline> size_t index = city.find('b'); </cline>
        </choice>
      </block>
      <block order="3">
        <cline> <![CDATA[cout << index << endl;]]></cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="find_function_3">
    <statement>
      <p>What is printed when the code is run?</p>
      <program line-numbers="yes">
        <code><![CDATA[
string sentence = "Most seas are rough but this sea is so calm!";
string target = "sea";
size_t index = sentence.find(target);
cout << "Index to find sea is " << index << endl;
]]></code>
      </program>
      <p>
        <ul>
          <li>
            <p>Index to find sea is 29</p>
            <p>
              <ul>
                <li>
                  <p><c>find</c> returns the index of the <em>first</em> occurence of <q>sea</q>.</p>
                </li>
              </ul>
            </p>
          </li>
          <li>
            <p>Index to find sea is 5</p>
            <p>
              <ul>
                <li>
                  <p>Correct! <c>index</c> only has to look for a sequence arranged as <q>sea</q> in the
                    string.</p>
                </li>
              </ul>
            </p>
          </li>
          <li>
            <p>Index to find sea is <c>string::npos</c></p>
            <p>
              <ul>
                <li>
                  <p><q>sea</q> is present in the <c>sentence</c> string.</p>
                </li>
              </ul>
            </p>
          </li>
        </ul>
      </p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Index to find sea is 29</p>
        </statement>
        <feedback>
          <p><code>find</code> returns the index of the FIRST occurence of "sea".</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Index to find sea is 5</p>
        </statement>
        <feedback>
          <p>Correct! <code>index</code> only has to look for a sequence arranged as "sea" in the
            string.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Index to find sea is -1</p>
        </statement>
        <feedback>
          <p>sea is present in the <code>sentence</code>.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>