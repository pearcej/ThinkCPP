<?xml version="1.0"?>
<section xml:id="chapter7_our-own-version-of-find">
  <title>Our own version of <c>find</c></title>
  <p>If we are looking for a letter in a <c>string</c>, we may not want to start at the beginning of the
    string. One way to generalize the <c>find</c> function is to write a version that takes an
    additional parameter&#x2014;the index where we should start looking. Here is an implementation
    of this function.</p>
  <program>size_t find(string s, char c, size_t i) {
  while (i &lt; s.length()) {
    if (s[i] == c)
      return i;
    i = i + 1;
  }
  return string::npos;
}</program>
  <p>Instead of invoking this function on an <c>string</c>, like the first version of <c>find</c>, we have to
    pass the <c>string</c> as the first argument. The other arguments are the character we are looking for
    and the index where we should start.</p>
  <listing label="own_version_find_AC_1">
    <caption>
      In this active code , we are finding the number of <c>'e'</c> characters in the <q>Shepard</q>
        part of <q>German Shepard</q> using our function. Then we use the built-in <c>find</c> function
        to demonstrate how they work differentlsssy.
    </caption>
    <program xml:id="own_version_find_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

size_t find(string s, char c, size_t i) {
    size_t length = s.length();
    while (i < length) {
        if (s[i] == c) {
            return i;
        }
        i = i + 1;
    }
    return string::npos;
}

int main() {
    string dog = "German Shepard";
    size_t start_shepard = 7;
    cout << find(dog, 'e', start_shepard) << endl;
    cout << dog.find('e') << endl;
}
        ]]></code>
    </program>
  </listing>
  <exercise label="own_version_find_1">
    <statement>
      <p>What is the correct output of the code below?</p>
      <program line-numbers="yes">
        <code><![CDATA[
int main() {
  string quote = "The way to get started is to quit talking and begin doing.";
  cout << find(quote, 't', 11) << ", " << find(quote, 't', 42) << ", " << quote.find('t');
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="own_version_find_1_opt_a">
          <p>13, <c>string::npos</c>, 8</p>
        </statement>
        <feedback id="own_version_find_1_opt_a">
          <p>Notice how the built-in <c>find</c> function works differently from ours.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="own_version_find_1_opt_b">
          <p>13, 0, 7</p>
        </statement>
        <feedback id="own_version_find_1_opt_b">
          <p>Remember that when a character isn't found, the function returns <c>string::npos</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="own_version_find_1_opt_c">
          <p>13, <c>string::npos</c>, 0</p>
        </statement>
        <feedback id="own_version_find_1_opt_c">
          <p>Keep in mind that the find function is case sensitive, so &#x2018;A' is different from
            &#x2018;a'.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="own_version_find_1_opt_d">
          <p>14, <c>string::npos</c>, 9</p>
        </statement>
        <feedback id="own_version_find_1_opt_d">
          <p>Remember that indexing begins at 0 for C++.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>