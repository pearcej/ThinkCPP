<?xml version="1.0"?>
<section xml:id="xml_quick-reference-for-ap-classes">
  <title>Quick reference for AP classes</title>
  <p>These class definitions are copied from the College Board web page,</p>
  <url>http://www.collegeboard.org/ap/computer-science/html/quick_ref.htm</url>
  <p>with minor formatting changes. This is probably a good time to repeat
            the following text, also from the College Board web page.</p>
  <blockquote>
    <p>
      <q>Inclusion of the C++ classes defined for use in the Advanced
                Placement Computer Science courses does not constitute endorsement of
                the other material in this textbook by the College Board, Educational
                Testing service, or the AP Computer Science Development Committee.
                The versions of the C++ classes defined for use in the AP Computer
                Science courses included in this textbook were accurate as of 20 July
                1999. Revisions to the classes may have been made since that time.</q>
    </p>
  </blockquote>
  <subsection xml:id="xml_apstring">
    <title>
      <c>apstring</c>
    </title>
    <program>extern const int npos;  // used to indicate not a position in the string

// public member functions

  // constructors/destructor
  apstring();                       // construct empty string ""
  apstring(const char * s);         // construct from string literal
  apstring(const apstring &amp; str);   // copy constructor
  ~apstring();                      // destructor

  // assignment
  const apstring &amp; operator= (const apstring &amp; str); // assign str
  const apstring &amp; operator= (const char * s);       // assign s
  const apstring &amp; operator= (char ch);              // assign ch

  // accessors
  int length() const;                      // number of chars
  int find(const apstring &amp; str) const;    // index of first occurrence of str
  int find(char ch) const;                 // index of first occurrence of ch
  apstring substr(int pos, int len) const; // substring of len chars,
                                           // starting at pos
  const char * c_str() const;              // explicit conversion to char *

  // indexing
  char operator[ ](int k) const; // range-checked indexing
  char &amp; operator[ ](int k);     // range-checked indexing

  // modifiers
  const apstring &amp; operator+= (const apstring &amp; str); // append str
  const apstring &amp; operator+= (char ch);              // append char

  // The following free (non-member) functions operate on strings

  // I/O functions
  ostream &amp; operator&lt;&lt; ( ostream &amp; os, const apstring &amp; str );
  istream &amp; operator&gt;&gt; ( istream &amp; is, apstring &amp; str );
  istream &amp; getline( istream &amp; is, apstring &amp; str );

  // comparison operators
  bool operator== ( const apstring &amp; lhs, const apstring &amp; rhs );
  bool operator!= ( const apstring &amp; lhs, const apstring &amp; rhs );
  bool operator&lt;  ( const apstring &amp; lhs, const apstring &amp; rhs );
  bool operator&lt;= ( const apstring &amp; lhs, const apstring &amp; rhs );
  bool operator&gt;  ( const apstring &amp; lhs, const apstring &amp; rhs );
  bool operator&gt;= ( const apstring &amp; lhs, const apstring &amp; rhs );

  // concatenation operator +
  apstring operator+ ( const apstring &amp; lhs, const apstring &amp; rhs );
  apstring operator+ ( char ch, const apstring &amp; str );
  apstring operator+ ( const apstring &amp; str, char ch );</program>
  </subsection>
  <subsection xml:id="xml_apvector">
    <title>
      <c>apvector</c>
    </title>
    <program>template &lt;class itemType&gt;
class apvector

// public member functions

  // constructors/destructor
  apvector();                                 // default constructor (size==0)
  apvector(int size);                         // initial size of vector is size
  apvector(int size, const itemType &amp; fillValue);  // all entries == fillValue
  apvector(const apvector &amp; vec);             // copy constructor
  ~apvector();                                // destructor

  // assignment
  const apvector &amp; operator= (const apvector &amp; vec);

  // accessors
  int length() const;                            // capacity of vector

  // indexing
  // indexing with range checking
  itemType &amp; operator[ ](int index);
  const itemType &amp; operator[ ](int index) const;

  // modifiers
  void resize(int newSize);               // change size dynamically
                                          //can result in losing values</program>
  </subsection>
  <subsection xml:id="xml_apmatrix">
    <title>
      <c>apmatrix</c>
    </title>
    <program>template &lt;class itemType&gt;
class apmatrix

// public member functions

  // constructors/destructor
  apmatrix();                                   // default size is 0 x 0
  apmatrix(int rows, int cols);                 // size is rows x cols
  apmatrix(int rows, int cols, const itemType &amp; fillValue);
                                                // all entries == fillValue
  apmatrix(const apmatrix &amp; mat);               // copy constructor
  ~apmatrix( );                                 // destructor

  // assignment
  const apmatrix &amp; operator = (const apmatrix &amp; rhs);

  // accessors
  int numrows() const;                                  // number of rows
  int numcols() const;                                  // number of columns

  // indexing
  // range-checked indexing
  const apvector&lt;itemType&gt; &amp; operator[ ](int k) const;
  apvector&lt;itemType&gt; &amp; operator[ ](int k);

  // modifiers
  void resize(int newRows, int newCols); // resizes matrix to newRows x newCols
                                         // (can result in losing values)</program>
  </subsection>
</section>
