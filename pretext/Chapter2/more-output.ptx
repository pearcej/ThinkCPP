<?xml version="1.0"?>
<section xml:id="chapter2_more-output">
  <title>More Output</title>
  <p>As I mentioned in the last chapter, you can put as many statements as you want in <c>main</c>. For
    example, to output more than one line:</p>

  <listing label="more_output_AC_1">
    <caption>
      This program prints two different statements on two different lines using <c>endl</c>.
    </caption>
    <program label="more_output_AC_1_editor"
             interactive="activecode"
             line-numbers="yes"
             highlight-lines="5-6">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    cout << "Hello, world." << endl;     // output one line
    cout << "How are you?" << endl;      // output another
}
        ]]></code>
    </program>
  </listing>
  <p>As you can see, it is legal to put comments at the end of a line, as
    well as on a line by themselves.</p>
  <p>The phrases that appear in quotation marks are called <term>strings</term>, because they are
    made up of a sequence (string) of letters.</p>
  <note>
    <p>In C++, strings are declared as type <c>string</c>. We'll explain what that means in the next few
      pages.</p>
  </note>
  <p>Actually, strings can contain any combination of letters, numbers,
    punctuation marks, and other special characters.</p>
  <p>Often it is useful to display the output from multiple output statements all on one line. You
    can do this by leaving out the first <c>endl</c>:</p>
  <listing label="more_output_AC_2">
    <caption>
      This program prints two different statements on the same line.
    </caption>
    <program xml:id="more_output_AC_2_editor"
             interactive="activecode"
             line-numbers="yes"
             highlight-lines="5">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    cout << "Goodbye, ";
    cout << "cruel world!" << endl;
}
]]></code>
    </program>
  </listing>
  <p>In this case the output appears on a single line as <c>Goodbye, cruel
world!</c>. Notice in <c>main</c> that there is a
    space between <q>Goodbye,</q> and the second quotation mark. This space appears in the output,
    so it affects the behavior of the program.</p>
  <p>Spaces that appear outside of quotation marks generally do not affect
    the behavior of the program. For example, I could have written:</p>
  <listing label="more_output_AC_3">
    <caption>
      This program accomplishes the same thing as the one above. The
        difference is that there are no spaces separating the different
        components of each line.
    </caption>
    <program xml:id="more_output_AC_3_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    cout<<"Goodbye, ";
    cout<<"cruel world!"<<endl;
}
        ]]></code>
    </program>
  </listing>
  <p>This program would compile and run just as well as the original. The
    breaks at the ends of lines (newlines) do not affect the program's
    behavior either, so I could have written:</p>
  <listing label="more_output_AC_4">
    <caption>
      This program accomplishes the same thing as the two above, but
        it only uses one line. However, this format is pretty messy and relatively
        hard to follow.
    </caption>
    <program xml:id="more_output_AC_4_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {cout<<"Goodbye, ";cout<<"cruel world!"<<endl;}
        ]]></code>
    </program>
  </listing>
  <p>That would work, too, although you have probably noticed that the
    program is getting harder and harder to read. Newlines and spaces are
    useful for organizing your program visually, making it easier to read
    the program and locate syntax errors.</p>
  <exercise label="more_output_1">
    <statement>
      <p>A phrase that appears in quotation marks is called a(n)<var/>.</p>
    </statement>
    <setup>
      <var case="insensitive">
        <condition string="^\s*string\s*$">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Try again!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="more_output_2">
    <statement>
      <p>On how many separate lines will the 7's be printed?</p>
      <program
               line-numbers="yes">
#include &lt;iostream&gt;
using namespace std;

int main() {
  cout &lt;&lt; 7 &lt;&lt; endl;
  cout &lt;&lt; 7;
  cout &lt;&lt; 7;
  cout &lt;&lt; 7;
}
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>There is an "endl" statement, implying that a new line is created.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>"endl" creates one new line. The first line will say 7, while the second will print
            777.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>In C++, you must make sure to say "endl" every time you'd like to create a new line.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>In C++, you must make sure to say "endl" every time you'd like to create a new line.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="more_output_3"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Construct a main function that prints <q>Snap!</q> on the first line, <q>Crackle!</q> on
        the third line, and <q>Pop!</q> on the sixth line. You might not use all of endl blocks
        provided.</p>
    </statement>
    <program-preamble>
      #include &lt;iostream&gt;
      using namespace std;
    </program-preamble>
    <program
             codelens="no"></program>
    <blocks>
      <block order="3">
        <cline>int main() {</cline>
      </block>
      <block order="4">
        <cline> cout &lt;&lt; "Snap!";</cline>
      </block>
      <block order="8">
        <cline><![CDATA[ cout << endl; // first endl]]></cline>
      </block>
      <block order="7">
        <cline><![CDATA[ cout << endl; // second endl]]></cline>
      </block>
      <block order="2">
        <cline><![CDATA[ cout << "Crackle!" << endl;]]></cline>
      </block>
      <block order="11">
        <cline><![CDATA[ cout << endl; // third endl]]></cline>
      </block>
      <block order="6">
        <cline><![CDATA[ cout << endl; // fourth endl]]></cline>
      </block>
      <block order="9">
        <cline> cout &lt;&lt; "Pop!";</cline>
      </block>
      <block order="5"
             correct="no">
        <cline><![CDATA[ cout << endl; // fifth endl ]]></cline>
      </block>
      <block order="10"
             correct="no">
        <cline><![CDATA[ cout << endl; // sixth endl ]]></cline>
      </block>
      <block order="1">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="more_output_4"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Construct a main function that prints <q>Hello, world!</q> so that <q>Hello,</q> and <q>
        world!</q> are printed on two separate lines.</p>
    </statement>
    <program-preamble>
      #include &lt;iostream&gt;
      using namespace std;
    </program-preamble>
    <program
             codelens="no"></program>
    <blocks>
      <block order="6">
        <cline>int main() {</cline>
      </block>
      <block order="4">
        <cline><![CDATA[ cout << "Hello," << endl; cout << "world!";]]></cline>
      </block>
      <block order="5"
             correct="no">
        <cline><![CDATA[ cout << "Hello," << "world!" << endl; ]]></cline>
      </block>
      <block order="1"
             correct="no">
        <cline> cout &gt;&gt; "Hello," &gt;&gt; endl; cout &gt;&gt; "world!"; </cline>
      </block>
      <block order="2"
             correct="no">
        <cline> cout &gt;&gt; "Hello," &gt;&gt; "world!" &gt;&gt; endl; </cline>
      </block>
      <block order="3">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>