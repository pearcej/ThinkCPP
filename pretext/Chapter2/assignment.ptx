<?xml version="1.0"?>
<section xml:id="chapter2_assignment">
  <title>Assignment</title>
  <p>Now that we have created some variables, we would like to store values in them. We do that with
    an <term>assignment statement</term>.</p>
  <program>
firstLetter = 'a';   // give firstLetter the value 'a'
hour = 11;           // assign the value 11 to hour
minute = 59;         // set minute to 59
</program>
  <p>This example shows three assignments, and the comments show three
    different ways people sometimes talk about assignment statements. The
    vocabulary can be confusing here, but the idea is straightforward:</p>
  <p>
    <ul>
      <li>
        <p>When you declare a variable, you create a named storage location.</p>
      </li>
      <li>
        <p>When you make an assignment to a variable, you give it a value.</p>
      </li>
    </ul>
  </p>
  <p>A common way to represent variables on paper is to draw a box with the name of the variable on
    the outside and the value of the variable on the inside. This kind of figure is called a <term>state
    diagram</term> because is shows what state each of the variables is in (you can think of it as
    the variable's <q>state of mind</q>). This diagram shows the effect of the three assignment
    statements:</p>
  <figure align="center">
    <image source="Chapter2/Images/2.4statediagram.png"
           width="50%"
           alt="Three boxes. One labeled firstLetter containing 'a'. One labeled hour containing 11. One labeled minute containing 59."/>
  </figure>
  <p>I sometimes use different shapes to indicate different variable types.
    These shapes should help remind you that one of the rules in C++ is that
    a variable has to have the same type as the value you assign it.</p>
  <p>It can be useful to examine the <q>state of mind</q> of the computer
    as it runs code you have written. Programmers use <term>debuggers</term>
    to do so. In this book, you can use the <term>codelens</term> feature to
    run programs line by line.
  </p>
  <activity label="state_of_mind">
    <statement>
      <p>Run the code sample below by using the <b>Next</b> button to advance line by line. As you do so,
      watch the area to the right to examine the <q>state of mind</q> of the computer as it runs the
      code.</p>
    </statement>
    <program interactive="codelens" xml:id="state_of_mind_ed">
  int main() {
    char firstLetter;
    firstLetter = 'a';   // give firstLetter the value 'a'
    int hour;
    hour = 11;           // assign the value 11 to hour
    int minute;
    minute = 59;         // set minute to 59
  }
    </program>
  </activity>
  <warning>
    <p>The variable type that you declare must match the type of the value
      assigned to it. A type mismatch will generate a compile error.</p>
  </warning>
  <p>For example, you cannot store a string in an <c>int</c> variable. The following statement
    generates a compile error.</p>
  <program>int hour;
hour = "Hello.";       // WRONG !!</program>
  <p>This rule is sometimes a source of confusion, because there are many
    ways that you can convert values from one type to another, and C++
    sometimes converts things automatically. But for now you should remember
    that as a general rule variables and values have the same type, and
    we'll talk about special cases later.</p>
  <p>Another source of confusion is that some strings <em>look</em> like integers, but they are not.
    For example, the string <q>123</q>, which is made up of the characters 1, 2 and 3, is not the
    same thing as the <em>number</em> 123. This assignment is illegal:</p>
  <program>
int minute = "59";         // WRONG!
</program>
  <exercise label="assignment_1">
    <statement>
      <p>A(n) <var/> statement gives a value to a variable. </p>
    </statement>
    <setup>
      <var case="insensitive">
        <condition string="^\s*assignment\s*$">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Try again!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="assignment_2">
    <statement>
      <p>What must be changed in order for this code block to work?</p>
      <program line-numbers="yes">#include &lt;iostream&gt;
using namespace std;
// main: generate some simple output

int main() {
  int p;
  int q;
  p = "h";
  q = "9";
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Change the type of variable q from int to string.</p>
        </statement>
        <feedback>
          <p>Yes, but take a look at variable p.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Change the type of both variables (p and q) from int to string.</p>
        </statement>
        <feedback>
          <p>Both variables are a character surrounded by double quotes, so they should be type
            string.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Change the type of variable p from int to char.</p>
        </statement>
        <feedback>
          <p>Yes, but take a look at variable q.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Nothing needs to change! The code will work just fine!</p>
        </statement>
        <feedback>
          <p>No! There will be a compile error.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="assignment_3"
           numbered="yes"
           adaptive="yes"
           indentation="hide">
    <statement>
      <p>You love your car, and you decide to keep track of its make, model, and year. You do so
        using three assignment statements IN THAT ORDER. For the sake of this problem, suppose you
        drive a 2001 Jeep Cherokee. Hint: there are a couple ways to write an assignment statement.</p>
    </statement>
    <blocks>
      <block order="1">
        <choice correct="yes">
          <cline>string make;</cline>
          <cline>make = "Jeep";</cline>
        </choice>
        <choice>
          <cline>string make = Jeep; </cline>
        </choice>
      </block>
      <block order="4">
        <cline>make = "Jeep;" </cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>string model = "Cherokee";</cline>
        </choice>
        <choice>
          <cline>string model; </cline>
          <cline>model = Cherokee;</cline>
        </choice>
      </block>
      <block order="3">
        <cline>string model = Cherokee; </cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>int year = 2001;</cline>
        </choice>
        <choice>
          <cline>int year; </cline>
          <cline>2001 = year;</cline>
        </choice>
      </block>
      <block order="5">
        <cline>int year; </cline>
        <cline>year = 2001</cline>
      </block>
    </blocks>
  </exercise>
</section>