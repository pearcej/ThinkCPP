<?xml version="1.0"?>
<section xml:id="chapter14_coding-practice-1">
  <title>Coding Practice</title>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter14', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_14_AC_2q">
        <statement>
          <p>There are errors in the code below. Modify the code so that <c>main</c> runs
                    successfully. Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_14_AC_2q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

class Room {
    private:
        int length;
        int width;
        int height;

    public:
        int calculateArea() {
            return length * width;
        }

        int calculateVolume() {
            return length * width * height;
        }

        // Add any necessary functions here.
};

int main() {
    Room r;
    r.length = 12;
    r.width = 14;
    r.height = 10;
    cout << "The room with dimensions " << r.length ", " << r.width
        << ", and " << r.height << " has an area of " << r.calculateArea()
        << " and a volume of " << r.calculateVolume << endl;
}
        ]]></code>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter14', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_14_AC_2q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>There are errors in the code below. Modify the code so that <c>main</c> runs
                    successfully. Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="14">
            <cline>class Room {</cline>
            <cline>    private:</cline>
            <cline>        int length;</cline>
            <cline>        int width;</cline>
            <cline>        int height;</cline>
          </block>
          <block order="6">
            <cline>    public:</cline>
            <cline>        int calculateArea() {</cline>
            <cline>            return length * width;</cline>
            <cline>        }</cline>
          </block>
          <block order="4">
            <cline>        int calculateVolume() {</cline>
            <cline>            return length * width * height;</cline>
            <cline>        }</cline>
          </block>
          <block order="8">
            <cline>        void setLength(int l) {</cline>
            <cline>            length = l;</cline>
            <cline>        }</cline>
          </block>
          <block order="16">
            <cline>        int getLength() const {</cline>
            <cline>            return length;</cline>
            <cline>        }</cline>
          </block>
          <block order="9">
            <cline>        void setWidth(int w) {</cline>
            <cline>            width = w;</cline>
            <cline>        }</cline>
          </block>
          <block order="3">
            <cline>        int getWidth() const {</cline>
            <cline>            return width;</cline>
            <cline>        }</cline>
          </block>
          <block order="13">
            <cline>        void setHeight(int h) {</cline>
            <cline>            height = h;</cline>
            <cline>        }</cline>
          </block>
          <block order="17">
            <cline>        int getHeight() const {</cline>
            <cline>            return height;</cline>
            <cline>        }</cline>
          </block>
          <block order="2">
            <cline>};</cline>
          </block>
          <block order="15">
            <cline>int main() {</cline>
          </block>
          <block order="12">
            <cline>    Room r;</cline>
          </block>
          <block order="11">
            <cline>    r.setLength(12);</cline>
          </block>
          <block order="1">
            <cline>    r.setWidth(14);</cline>
          </block>
          <block order="5">
            <cline>    r.setHeight(10);</cline>
          </block>
          <block order="10">
            <cline><![CDATA[    cout << "The room with dimensions " << r.getLength() << ", " << r.getWidth()]]></cline>
            <cline><![CDATA[        << ", and " << r.getHeight() << " has an area of " << r.calculateArea()]]></cline>
            <cline><![CDATA[        << " and a volume of " << r.calculateVolume() << endl;]]></cline>
          </block>
          <block order="7">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter14', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_14_AC_4q">
        <statement>
          <p>In <c>main</c> create a <c>Temp</c> object to calculate
                    what 100 degrees Celsius is in Fahrenheit.
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_14_AC_4q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

class Temp {
    private:
        double fahrenheit;
        double celsius;
        bool is_fahrenheit;
        bool is_celsius;

        double cToF() {
            return celsius * 9/5 + 32;
        }

        double fToC() {
            return (fahrenheit - 32) * 5/9;
        }

    public:
        double getFahrenheit() {
            if (is_celsius) { return cToF(); }
            else { return fahrenheit; }
        }
        double getCelsius() {
            if (is_fahrenheit) { return fToC(); }
            else { return celsius; }
        }
        void setFahrenheit(double f) { fahrenheit = f; is_fahrenheit = true; is_celsius = false; }
        void setCelsius(double c) { celsius = c; is_celsius = true; is_fahrenheit = false; }
        void printTemp() {
            if (is_fahrenheit) {
                cout << "It is " << getFahrenheit() << " degrees Fahrenheit" << endl;
            }
            else {
                cout << "It is " << getCelsius() << " degrees Celsius" << endl;
            }
        }
};

int main() {
    // Write your code here.
}
        ]]></code>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter14', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_14_AC_4q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>In <c>main</c> create a <c>Temp</c> object to calculate
                    what 100 degrees Celsius is in Fahrenheit.
                    Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="5">
            <cline>int main() {</cline>
          </block>
          <block order="4">
            <cline>    Temp t;</cline>
          </block>
          <block order="1">
            <cline>    t.setCelsius(100);</cline>
          </block>
          <block order="6">
            <cline>    t.setFahrenheit(t.getFahrenheit());</cline>
          </block>
          <block order="2">
            <cline>    t.printTemp();</cline>
          </block>
          <block order="3">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter14', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_14_AC_6q">
        <statement>
          <p>What if we had an existing <c>vector</c> with data that we want to copy
                    into our <c>MyVector</c>? Write a constructor that takes a <c>vector</c>
                    and copies the data into the <c>elements</c> vector.
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_14_AC_6q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

class MyVector {
    private:
        vector<int> elements;

    public:
        MyVector() {};
        // Write your constructor here.
};
        ]]></code>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter14', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_14_AC_6q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>What if we had an existing <c>vector</c> with data that we want to copy
                    into our <c>MyVector</c>? Write a constructor that takes a <c>vector</c>
                    and copies the data into the <c>elements</c> vector.
                    Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="1">
            <cline><![CDATA[MyVector(vector<int> vec) {]]></cline>
          </block>
          <block order="2">
            <cline>   elements = vec;</cline>
          </block>
          <block order="3">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter14', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_14_AC_8q">
        <statement>
          <p>Now we can write some of our own fun functions! No longer
                    do we need to write <c>for</c> loops every time we want to
                    print out a <c>vector</c>. With <c>MyVector</c>, we can just
                    call the member function <c>print</c>! Write the <c>MyVector</c>
                    member function <c>print</c>, which prints out the contents
                    of <c>MyVector</c>. For example, if our <c>MyVector</c> contained
                    the elements 2, 5, 1, and 8, <c>print</c> should print out
                    [2, 5, 1, 8] followed by a newline.
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_14_AC_8q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

class MyVector {
    private:
        vector<int> elements;

    public:
        MyVector() {};
        MyVector(vector<int> vec);

        int size();
        void push_back(int value);
        void pop_back();
        int at(int index);

        // Write your print function here.
};

int main() {
    MyVector myVec;
    myVec.push_back(13);
    myVec.push_back(2);
    myVec.push_back(4);
    myVec.push_back(7);
    myVec.push_back(9);
    myVec.push_back(24);
    myVec.print();
}
        ]]></code>
          <tests>
MyVector::MyVector(vector&lt;int&gt; vec) {
    elements = vec;
}

int MyVector::size() { return elements.size(); }

void MyVector::push_back(int value) { elements.push_back(value); }

void MyVector::pop_back() { elements.pop_back(); };

int MyVector::at(int index) { return elements[index]; }
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter14', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_14_AC_8q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Now we can write some of our own fun functions! No longer
                    do we need to write <c>for</c> loops every time we want to
                    print out a <c>vector</c>. With <c>MyVector</c>, we can just
                    call the member function <c>print</c>! Write the <c>MyVector</c>
                    member function <c>print</c>, which prints out the contents
                    of <c>MyVector</c>. For example, if our <c>MyVector</c> contained
                    the elements 2, 5, 1, and 8, <c>print</c> should print out
                    [2, 5, 1, 8] followed by a newline. Use the lines to construct
                    the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="5">
            <cline>void print() {</cline>
          </block>
          <block order="7">
            <cline>   cout &lt;&lt; "[";</cline>
          </block>
          <block order="2">
            <cline><![CDATA[   for (size_t i = 0; i < elements.size() - 1; ++i) {]]></cline>
          </block>
          <block order="4">
            <cline><![CDATA[       cout << elements[i] << ", ";]]></cline>
          </block>
          <block order="3">
            <cline>   }</cline>
          </block>
          <block order="6">
            <cline><![CDATA[   cout << elements[elements.size() - 1] << "]" << endl;]]></cline>
          </block>
          <block order="1">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter14', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_14_AC_10q">
        <statement>
          <p>What if we wanted to return the largest and smallest elements in our
                    <c>MyVector</c>? Write the public member functions <c>max</c> and <c>min</c>
                    which calls the private member functions <c>findMax</c> and <c>findMin</c>.
                    <c>findMax</c> and <c>findMin</c> return the indices of the max and min
                    values, and <c>max</c> and <c>min</c> call these private member functions
                    and return the max and min values. Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_14_AC_10q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

class MyVector {
    private:
        vector<int> elements;

        // Write your findMax function here.

        // Write your findMin function here.

    public:
        MyVector() {};
        MyVector(vector<int> vec);

        int size();
        void push_back(int value);
        void pop_back();
        int at(int index);
        void print();
        void push_front(int value);
        void pop_front();
};

// Write your max function here.

// Write your min function here.

int main() {
    vector<int> vec = { 8, 1, 5, 87, 23, 64 };
    MyVector myVec(vec);
    cout << "The largest element is " << myVec.max() << endl;
    cout << "The smallest element is " << myVec.min() << endl;
}
        ]]></code>
          <tests>
MyVector::MyVector(vector&lt;int&gt; vec) {
    elements = vec;
}

int MyVector::size() { return elements.size(); }

void MyVector::push_back(int value) { elements.push_back(value); }

void MyVector::pop_back() { elements.pop_back(); };

int MyVector::at(int index) { return elements[index]; }

void MyVector::print() {
    cout &lt;&lt; "[";
    for (size_t i = 0; i &lt; elements.size() - 1; ++i) {
        cout &lt;&lt; elements[i] &lt;&lt; ", ";
    }
    cout &lt;&lt; elements[elements.size() - 1] &lt;&lt; "]" &lt;&lt; endl;
}

void MyVector::push_front(int value) {
    vector&lt;int&gt; temp;
    temp.push_back(value);
    for (size_t i = 0; i &lt; elements.size(); ++i) {
        temp.push_back(elements[i]);
    }
    elements = temp;
}

void MyVector::pop_front() {
    for (size_t i = 1; i &lt; elements.size(); ++i) {
        elements[i - 1] = elements[i];
    }
    elements.pop_back();
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter14', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_14_AC_10q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>What if we wanted to return the largest and smallest elements in our
                    <c>MyVector</c>? Write the public member functions <c>max</c> and <c>min</c>
                    which calls the private member functions <c>findMax</c> and <c>findMin</c>.
                    <c>findMax</c> and <c>findMin</c> return the indices of the max and min
                    values, and <c>max</c> and <c>min</c> call these private member functions
                    and return the max and min values. Use the lines to construct the code,
                    then go back to complete the Activecode. Be sure to declare the <c>max</c> and <c>min</c>
                    functions in <c>public</c> when you complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="3">
            <cline>// findMax private member function</cline>
            <cline><![CDATA[int findMax (vector<int> vec) {]]></cline>
          </block>
          <block order="22">
            <cline>    int inMax;</cline>
          </block>
          <block order="16">
            <cline>    int max = vec[0];</cline>
          </block>
          <block order="25">
            <cline><![CDATA[    for (size_t i = 0; i < vec.size() - 1; i++) {]]></cline>
          </block>
          <block order="8">
            <cline>        if (vec[i] &gt; max) {</cline>
          </block>
          <block order="18">
            <cline>            max = vec[i];</cline>
          </block>
          <block order="13">
            <cline>            inMax = i;</cline>
          </block>
          <block order="9">
            <cline>        }</cline>
          </block>
          <block order="1">
            <cline>    }</cline>
          </block>
          <block order="4">
            <cline>    return inMax;</cline>
          </block>
          <block order="21">
            <cline>}</cline>
          </block>
          <block order="2">
            <cline>// findMin private member function</cline>
            <cline><![CDATA[int findMin (vector<int> vec) {]]></cline>
          </block>
          <block order="20">
            <cline>    int inMin;</cline>
          </block>
          <block order="5">
            <cline>    int min = vec[0];</cline>
          </block>
          <block order="7">
            <cline><![CDATA[    for (size_t i = 0; i < vec.size(); i++) {]]></cline>
          </block>
          <block order="23">
            <cline><![CDATA[        if (vec[i] < min) {]]></cline>
          </block>
          <block order="10">
            <cline>            min = vec[i];</cline>
          </block>
          <block order="14">
            <cline>            inMin = i;</cline>
          </block>
          <block order="24">
            <cline>        }</cline>
          </block>
          <block order="17">
            <cline>    }</cline>
          </block>
          <block order="15">
            <cline>    return inMin;</cline>
          </block>
          <block order="28">
            <cline>}</cline>
          </block>
          <block order="11">
            <cline>// max public member function</cline>
            <cline>int MyVector::max() {</cline>
          </block>
          <block order="27">
            <cline>    return elements[findMax(elements)];</cline>
          </block>
          <block order="26">
            <cline>}</cline>
          </block>
          <block order="19">
            <cline>// min public member function</cline>
            <cline>int MyVector::min() {</cline>
          </block>
          <block order="6">
            <cline>    return elements[findMin(elements)];</cline>
          </block>
          <block order="12">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
</section>
