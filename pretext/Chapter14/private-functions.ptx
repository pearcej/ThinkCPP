<?xml version="1.0"?>
<section xml:id="chapter14_private-functions">
  <title>Private functions</title>
  <p>In some cases, there are member functions that are used internally by a class, but that should
    not be invoked by client programs. For example, <c>calculatePolar</c> and <c>calculateCartesian</c> are used by the accessor
    functions, but there is probably no reason clients should call them directly (although it would
    not do any harm). If we wanted to protect these functions, we could declare them <c>private</c> the
    same way we do with instance variables. In that case the complete class definition for <c>Complex</c>
    would look like:</p>
  <program>class Complex
{
private:
    double real, imag;
    double mag, theta;
    bool cartesian, polar;

    void calculateCartesian();
    void calculatePolar();

public:
    Complex() { cartesian = false;  polar = false; }

    Complex(double r, double i)
    {
        real = r;
        imag = i;
        cartesian = true;
        polar = false;
    }

    void printCartesian();
    void printPolar();

    double getReal();
    double getImag();
    double getMag();
    double getTheta();

    void setCartesian(double r, double i);
    void setPolar(double m, double t);
};</program>
  <note>The <c>private</c> label at the beginning is not necessary, but it is a useful reminder.</note>
  <listing label="fourteeneleven">
    <caption>
      This active code updates <c>calculatePolar</c> and <c>calculateCartesian</c> to be private functions. Notice how we are no
        longer able to call <c>calculateCartesian</c> in main. Feel free to modify the code and experiment around!
    </caption>
    <program xml:id="fourteeneleven_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <cmath>
#include <cassert>
using namespace std;

class Complex
{
    double real, imag;
    double mag, theta;
    bool cartesian, polar;
    void calculateCartesian();
    void calculatePolar();

public:
    Complex();
    Complex(double r, double i);
    double getReal();
    double getImag();
    double getMag();
    double getTheta();
    void printCartesian();
    void printPolar();
    void setPolar(double m, double t);
    void setCartesian(double r, double i);
};

Complex add (Complex& a, Complex& b);
Complex subtract (Complex& a, Complex& b);
Complex mult (Complex& a, Complex& b);

int main() {
    Complex c1(-4.0, 0.0);
    c1.setPolar(4.0, 3.1415);
    // ``calculateCartesian`` can't be called in main because
    // it is now a private member function
    c1.calculateCartesian();
}
        ]]></code>
      <tests>
Complex::Complex() { cartesian = false;  polar = false; }

Complex::Complex(double r, double i) {
  real = r;  imag = i;
  cartesian = true;  polar = false;
}

void Complex::calculateCartesian() {
  assert(polar);
  real = mag * cos (theta);
  imag = mag * sin (theta);
  cartesian = true;
  assert(polar &amp;&amp; cartesian);
}

double Complex::getReal() {
  if (cartesian == false) calculateCartesian();
  return real;
}

double Complex::getImag() {
  if (cartesian == false) calculateCartesian();
  return imag;
}

void Complex::calculatePolar() {
  mag = sqrt(pow(real, 2) + pow(imag, 2));
  theta = atan(imag / real);
  polar = true;
}

double Complex::getMag() {
  if (polar == false) {
    calculatePolar();
  }
  return mag;
}

double Complex::getTheta() {
  if (polar == false) {
    calculatePolar();
  }
  return theta;
}

void Complex::printCartesian() {
  cout &lt;&lt; getReal() &lt;&lt; " + " &lt;&lt; getImag() &lt;&lt; "i" &lt;&lt; endl;
}

void Complex::printPolar() {
  cout &lt;&lt; getMag() &lt;&lt; " e^ " &lt;&lt; getTheta() &lt;&lt; "i" &lt;&lt; endl;
}

Complex add (Complex&amp; a, Complex&amp; b) {
  double real = a.getReal() + b.getReal();
  double imag = a.getImag() + b.getImag();
  Complex sum (real, imag);
  return sum;
}

Complex subtract (Complex&amp; a, Complex&amp; b) {
  double real = a.getReal() - b.getReal();
  double imag = a.getImag() - b.getImag();
  Complex diff (real, imag);
  return diff;
}

void Complex::setPolar(double m, double t) {
  mag = m;  theta = t;
  cartesian = false;  polar = true;
}

Complex mult (Complex&amp; a, Complex&amp; b) {
  double mag = a.getMag() * b.getMag();
  double theta = a.getTheta() + b.getTheta();
  Complex product;
  product.setPolar (mag, theta);
  return product;
}

void Complex::setCartesian(double r, double i) {
  real = r;    imag = i;
  cartesian = true;  polar = false;
}
</tests>
    </program>
  </listing>
</section>