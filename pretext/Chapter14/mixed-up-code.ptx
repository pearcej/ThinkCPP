<?xml version="1.0"?>
<exercises xml:id="chapter14_mixed-up-code-practice">
  <title>Mixed Up Code Practice</title>
  <exercise label="mucp_14_1"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Let's write the class definition for <c>Circle</c>. <c>Circle</c> should have its radius stored in a
        private member variable. Also write the constructor for <c>Circle</c>, which takes a radius as a
        parameter, in addition to the public member function <c>calculateArea</c>, which returns the area of the <c>Circle</c>.
        Make sure to include the <c>private</c> and <c>public</c> keywords! Use 3.14 for the value of pi. Put the
        necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>class Circle {</cline>
      </block>
      <block order="2"
             correct="no">
        <cline>struct Circle {  </cline>
      </block>
      <block order="7">
        <cline>private:</cline>
      </block>
      <block order="8"
             correct="no">
        <cline>private {</cline>
      </block>
      <block order="10"
             correct="no">
        <cline>}</cline>
      </block>
      <block order="6">
        <cline> double radius;</cline>
      </block>
      <block order="9">
        <cline>public:</cline>
      </block>
      <block order="5">
        <cline> Circle(double r) { radius = r; }</cline>
      </block>
      <block order="1"
             correct="no">
        <cline> Circle(int r) { radius = r; }  </cline>
      </block>
      <block order="4">
        <cline> double calculateArea() {</cline>
        <cline>  return 3.14 * radius * radius;</cline>
        <cline> }</cline>
        <cline>};</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_14_2"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Now that we have our <c>Circle</c> class, let's write some accessor functions! Write the <c>Circle</c>
        member functions <c>getRadius</c> and <c>setRadius</c>. It doesn't make sense for a <c>Circle</c>'s radius to be
        negative, so in your <c>setRadius</c> function, output an error message if the given radius is
        negative. Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="9">
        <cline>class Circle {</cline>
        <cline> private:</cline>
        <cline>  double radius;</cline>
        <cline> public:</cline>
        <cline>  Circle(double r) { radius = r; }</cline>
        <cline>  double calculateArea() { return 3.14 * radius * radius; }</cline>
      </block>
      <block order="2">
        <cline>  double getRadius() {</cline>
      </block>
      <block order="7"
             correct="no">
        <cline>  void getRadius() {  </cline>
      </block>
      <block order="11">
        <cline>   return radius;</cline>
      </block>
      <block order="6">
        <cline>  }</cline>
      </block>
      <block order="3">
        <cline>  void setRadius(double r) {</cline>
      </block>
      <block order="8"
             correct="no">
        <cline>  double setRadius(double r) {  </cline>
      </block>
      <block order="4">
        <cline><![CDATA[   if (r < 0) { cout << "Error! Cannot have a negative radius!" << endl; }]]></cline>
      </block>
      <block order="10">
        <cline>   else { radius = r; }</cline>
      </block>
      <block order="1">
        <cline>  }</cline>
      </block>
      <block order="5">
        <cline>};</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_14_3"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Write a <c>main</c>. In <c>main</c>, create a <c>Circle</c> with radius 2.4 and output the radius. Then
        change the radius to 3.6 and output the new radius. Put the necessary blocks of code in the
        correct order.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>int main() {</cline>
      </block>
      <block order="2">
        <cline> Circle c(2.4);</cline>
      </block>
      <block order="10"
             correct="no">
        <cline> Circle c;  </cline>
      </block>
      <block order="7"
             correct="no">
        <cline> c.radius = 2.4;  </cline>
      </block>
      <block order="4">
        <cline><![CDATA[ cout << "Radius: " << c.getRadius() << endl;]]></cline>
      </block>
      <block order="5"
             correct="no">
        <cline><![CDATA[ cout << "Radius: " << c.radius << endl;  ]]></cline>
      </block>
      <block order="8"
             correct="no">
        <cline> c.radius = 3.6;  </cline>
      </block>
      <block order="9">
        <cline> s.setRadius (3.6);</cline>
      </block>
      <block order="11">
        <cline><![CDATA[ cout << "New radius: " << c.getRadius() << endl;]]></cline>
      </block>
      <block order="6"
             correct="no">
        <cline><![CDATA[ cout << "New radius: " << c.radius << endl;  ]]></cline>
      </block>
      <block order="1">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_14_4"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>A <c>Rectangle</c> can be constructed given only two points. First, write the class definition for <c>Point</c>,
        which stores an x and a y value in private member variables. Also write the default
        constructor, which sets x and y to 0, and a constructor that takes in an xVal and yVal. In
        addition, write its accessor functions, <c>getX</c>, <c>getY</c>, <c>setX</c>, and <c>setY</c>. Put the
        necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>class Point {</cline>
      </block>
      <block order="8">
        <cline>private:</cline>
      </block>
      <block order="7">
        <cline> double x, y;</cline>
      </block>
      <block order="4">
        <cline>public:</cline>
      </block>
      <block order="10">
        <cline> Point() { x = 0; y = 0; }</cline>
      </block>
      <block order="9">
        <cline> Point(double xVal, double yVal) { x = xVal; y = yVal; }</cline>
      </block>
      <block order="5">
        <cline> double getX() { return x; }</cline>
      </block>
      <block order="3">
        <cline> double getY() { return y; }</cline>
      </block>
      <block order="2">
        <cline> void setX(double xVal) { x = xVal; }</cline>
      </block>
      <block order="1">
        <cline> void setY(double yVal) { y = yVal; }</cline>
      </block>
      <block order="11">
        <cline>};</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_14_5"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Now that we've defined the <c>Point</c> class, we can go back to writing the <c>Rectangle</c> class. <c>Rectangle</c>
        should store it's upper-left and lower-right points as private member variables. Write
        accessor functions for these variables after the constructor. It should also have length and
        height stored as public member variables. Also write a constructor that takes an upper-left
        point and a lower-right point as parameters.</p>
    </statement>
    <blocks>
      <block order="8">
        <cline>class Rectangle {</cline>
      </block>
      <block order="5">
        <cline>private:</cline>
      </block>
      <block order="3">
        <cline> Point upperLeft, lowerRight;</cline>
      </block>
      <block order="11">
        <cline>public:</cline>
      </block>
      <block order="1">
        <cline> double length, height;</cline>
      </block>
      <block order="10">
        <cline> Rectangle(Point upLeft, Point lowRight) { upperLeft = upLeft; lowerRight = lowRight; }</cline>
      </block>
      <block order="2">
        <cline> Point getUpperLeft() { return upperLeft; }</cline>
      </block>
      <block order="7">
        <cline> Point getLowerRight() { return lowerRight; }</cline>
      </block>
      <block order="6">
        <cline> void setUpperLeft(Point p) { upperLeft = p; }</cline>
      </block>
      <block order="9">
        <cline> void setLowerRight(Point p) { lowerRight = p; }</cline>
      </block>
      <block order="4">
        <cline>};</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_14_6"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Write the <c>Rectangle</c> member function <c>calculateSides</c>, which finds the length and height of the
        rectangle using the stored <c>Point``s.
Afterwards, write the ``Rectangle</c> member function <c>calculateArea</c>, which returns the area of the
        rectangle.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>void Rectangle::calculateSides() {</cline>
      </block>
      <block order="1">
        <cline>double Rectangle::calculateSides() {</cline>
      </block>
      <block order="9">
        <cline> length = getLowerRight().getX() - getUpperLeft().getX();</cline>
      </block>
      <block order="2">
        <cline> height = getUpperLeft().getY() - getLowerRight().getY();</cline>
      </block>
      <block order="10"
             correct="no">
        <cline> length = lowerRight.x - upperLeft.x;  </cline>
      </block>
      <block order="13"
             correct="no">
        <cline> height = upperLeft.y - lowerRight.y;  </cline>
      </block>
      <block order="12"
             correct="no">
        <cline> return length;  </cline>
      </block>
      <block order="3"
             correct="no">
        <cline> return height;  </cline>
      </block>
      <block order="8">
        <cline>}</cline>
      </block>
      <block order="5">
        <cline>double Rectangle::calculateArea() {</cline>
      </block>
      <block order="6">
        <cline> return length * height;</cline>
      </block>
      <block order="4"
             correct="no">
        <cline> return getLength() * getHeight();  </cline>
      </block>
      <block order="11">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_14_7"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Write a <c>main</c> In <c>main</c>, create a <c>Rectangle</c> with corners at (2.5, 7.5) and (8, 1.5). Print
        out the length and height, calculate the area, and print out the area. Then change the
        upperLeft corner to be at (4.2, 10.7) and print out the new area.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>int main() {</cline>
      </block>
      <block order="14">
        <cline> Point p1(2.5, 7.5);</cline>
      </block>
      <block order="11">
        <cline> Point p2(8, 1.5);</cline>
      </block>
      <block order="12">
        <cline> Rectangle r(p1, p2);</cline>
      </block>
      <block order="15"
             correct="no">
        <cline> Rectangle r(p2, p1);  </cline>
      </block>
      <block order="4">
        <cline> r.calculateSides();</cline>
      </block>
      <block order="3">
        <cline><![CDATA[ cout << "Length: " << r.length << ", Height: " << r.height << endl;]]></cline>
      </block>
      <block order="13"
             correct="no">
        <cline><![CDATA[ cout << "Length: " << r.getLength() << ", Height: " << r.getHeight() << endl;  ]]></cline>
      </block>
      <block order="2">
        <cline><![CDATA[ cout << "Area: " << r.calculateArea() << endl;]]></cline>
      </block>
      <block order="1">
        <cline> Point p3(4.2, 10.7);</cline>
      </block>
      <block order="10">
        <cline> r.setUpperLeft(p3);</cline>
      </block>
      <block order="8"
             correct="no">
        <cline> r.upperLeft = p3;  </cline>
      </block>
      <block order="9">
        <cline> r.calculateSides();</cline>
      </block>
      <block order="7">
        <cline><![CDATA[ cout << "New area: " << r.calculateArea() << endl;]]></cline>
      </block>
      <block order="6">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_14_8"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's write the <c>Date</c> class. <c>Date</c> stores information about the day, month, and year in
        private variables, in addition to a <c>vector</c> of the number of days in each month. Write
        accessor functions for each variable, keeping in mind the valid values each variable can
        take. In addition, write the default constructor, which initializes the date to January 1,
        2000. Write another constructor which takes in a day, month, and year in that order.</p>
    </statement>
    <blocks>
      <block order="13">
        <cline>class Date {</cline>
      </block>
      <block order="6">
        <cline>private:</cline>
      </block>
      <block order="11">
        <cline> int day, month, year;</cline>
      </block>
      <block order="7">
        <cline><![CDATA[ vector<int> daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };]]></cline>
      </block>
      <block order="16">
        <cline>public:</cline>
      </block>
      <block order="14">
        <cline> Date() { day = 1; month = 1; year = 2000; }</cline>
      </block>
      <block order="15"
             correct="no">
        <cline> Date() { day = 0; month = 0; year = 0; }  </cline>
      </block>
      <block order="3">
        <cline> Date(int d, int m, int y) { day = d; month = m; year = y; }</cline>
      </block>
      <block order="8">
        <cline> int getDay() { return day; }</cline>
      </block>
      <block order="18">
        <cline> int getMonth() { return month; }</cline>
      </block>
      <block order="17">
        <cline> int getYear() { return year; }</cline>
      </block>
      <block order="2">
        <cline><![CDATA[ void setDay(int d) { if (d > 0 && d < 32) day = d; }]]></cline>
      </block>
      <block order="12">
        <cline><![CDATA[ void setMonth(int m) { if (m > 0 && m < 13) month = m; }]]></cline>
      </block>
      <block order="10">
        <cline> void setYear(int y) { year = y; }</cline>
      </block>
      <block order="4"
             correct="no">
        <cline><![CDATA[ void setDay(int d) { if (d > 1 && d < 31) day = d; }  ]]></cline>
      </block>
      <block order="5"
             correct="no">
        <cline><![CDATA[ void setMonth(int m) { if (m >= 0 && m <= 12) month = m; }  ]]></cline>
      </block>
      <block order="9"
             correct="no">
        <cline><![CDATA[ void setYear(int y) { if (y >= 2000 && y < 3000) year = y; }  ]]></cline>
      </block>
      <block order="1">
        <cline>};</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_14_9"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's write the <c>Date</c> member function, <c>printDate</c>, which prints the date out in the
        following format: month/day/year CE/BCE depending on whether the year is negative or not.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>void Date::printDate() {</cline>
      </block>
      <block order="8">
        <cline><![CDATA[ if (getYear() < 0) {]]></cline>
      </block>
      <block order="10">
        <cline><![CDATA[  cout << getMonth() << "/" << getDay() << "/" << -getYear() << " BCE" << endl;]]></cline>
      </block>
      <block order="6"
             correct="no">
        <cline><![CDATA[  cout << month << "/" << day << "/" << year << " BCE" << endl;  ]]></cline>
      </block>
      <block order="2"
             correct="no">
        <cline><![CDATA[  cout << getMonth() << "/" << getDay() << "/" << getYear() << " BCE" << endl;  ]]></cline>
      </block>
      <block order="9">
        <cline> }</cline>
      </block>
      <block order="4">
        <cline> else {</cline>
      </block>
      <block order="1">
        <cline><![CDATA[  cout << getMonth() << "/" << getDay() << "/" << getYear() << " CE" << endl;]]></cline>
      </block>
      <block order="3">
        <cline> }</cline>
      </block>
      <block order="5">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_14_10"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Write the <c>Date</c> member function <c>isLeapYear</c>, which returns true if the year is a leap year.
        Then write the <c>Date</c> member function <c>lastDayInMonth</c>, which returns the last day in the <c>Date</c>'s
        month.</p>
    </statement>
    <blocks>
      <block order="13">
        <cline>bool Date::isLeapYear() {</cline>
      </block>
      <block order="2">
        <cline> if (getYear() % 4 != 0) { return false; }</cline>
      </block>
      <block order="4"
             correct="no">
        <cline> if (getYear() % 4 == 0) { return false; }  </cline>
      </block>
      <block order="11">
        <cline> else if (getYear() % 100 != 0) { return true; }</cline>
      </block>
      <block order="16">
        <cline> else if (getYear() % 400 != 0) { return false; }</cline>
      </block>
      <block order="3">
        <cline> else { return true; }</cline>
      </block>
      <block order="6"
             correct="no">
        <cline> else { return false; }  </cline>
      </block>
      <block order="1">
        <cline>}</cline>
      </block>
      <block order="12">
        <cline>int Date::lastDayInMonth() {</cline>
      </block>
      <block order="15">
        <cline> if (isLeapYear() &amp;&amp; getMonth() == 2) {</cline>
      </block>
      <block order="5"
             correct="no">
        <cline> if (isLeapYear()) {  </cline>
      </block>
      <block order="9">
        <cline>  return daysInMonth[getMonth() - 1] + 1;</cline>
      </block>
      <block order="7">
        <cline> }</cline>
        <cline> else {</cline>
      </block>
      <block order="10">
        <cline>  return daysInMonth[getMonth() - 1];</cline>
      </block>
      <block order="14"
             correct="no">
        <cline>  return daysInMonth[getMonth()];  </cline>
      </block>
      <block order="8">
        <cline> }</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</exercises>