<?xml version="1.0"?>
<section xml:id="chapter14_activecode-exercises">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to assess what you have learned in this chapter.</p>
  <exercise label="XXX">
    <statement>
      <p>Let's write the class definition for <c>Circle</c>. <c>Circle</c> should have its
                    radius stored in a private member variable. Also write the constructor
                    for <c>Circle</c>, which takes a radius as a parameter, in addition to the
                    public member function <c>calculateArea</c>, which returns the area of
                    the <c>Circle</c>. Make sure to include the <c>private</c> and <c>public</c> keywords!
                    Use 3.14 for the value of pi.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_14_1_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to wrte the class definition and constructor for Circle.

    
    <program xml:id="mucp_14_11_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Circle {
    private:
        double radius;
    public:
        Circle(double r) { radius = r; }
        double calculateArea() { return 3.14 * radius * radius; }
};
        ]]></code></program>

            

<exercise label="mucp_14_11_ac_a"><statement><p>Below is one way to wrte the class definition and constructor for <c>Circle</c>.</p></statement><program xml:id="mucp_14_11_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Circle {
    private:
        double radius;
    public:
        Circle(double r) { radius = r; }
        double calculateArea() { return 3.14 * radius * radius; }
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Now that we have our <c>Circle</c> class, let's write some accessor
                    functions! Write the <c>Circle</c> member functions <c>getRadius</c>
                    and <c>setRadius</c>. It doesn't make sense for a <c>Circle</c>'s
                    radius to be negative, so in your <c>setRadius</c> function,
                    output an error message if the given radius is negative.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_14_2_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the accessor functions for getRadius and setRadius.

    
    <program xml:id="mucp_14_2_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Circle {
    private:
        double radius;
    public:
        Circle(double r) { radius = r; }
        double calculateArea() { return 3.14 * radius * radius; }
        double getRadius() {
            return radius;
        }
        void setRadius(double r) {
            if (r < 0) { cout << "Error! Cannot have a negative radius!" << endl; }
            else { radius = r; }
        }
};
        ]]></code></program>

            

<exercise label="mucp_14_2_ac_a"><statement><p>Below is one way to write the accessor functions for <c>getRadius</c> and <c>setRadius</c>.</p></statement><program xml:id="mucp_14_2_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Circle {
    private:
        double radius;
    public:
        Circle(double r) { radius = r; }
        double calculateArea() { return 3.14 * radius * radius; }
        double getRadius() {
            return radius;
        }
        void setRadius(double r) {
            if (r < 0) { cout << "Error! Cannot have a negative radius!" << endl; }
            else { radius = r; }
        }
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write a <c>main</c>. In <c>main</c>, create a <c>Circle</c> with radius 2.4
                    and output the radius. Then change the radius to 3.6 and output</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_14_3_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the code.

    
    <program xml:id="mucp_14_3_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Circle {
    private:
        double radius;
    public:
        Circle(double r) { radius = r; }
        double calculateArea() { return 3.14 * radius * radius; }
        double getRadius() {
            return radius;
        }
        void setRadius(double r) {
            if (r < 0) { cout << "Error! Cannot have a negative radius!" << endl; }
            else { radius = r; }
        }
};

int main() {
    Circle c(2.4);
    cout << "Radius: " << c.getRadius() << endl;
    c.setRadius (3.6);
    cout << "New radius: " << c.getRadius() << endl;
}
        ]]></code></program>

            

<exercise label="mucp_14_3_ac_a"><statement><p>Below is one way to write the code.</p></statement><program xml:id="mucp_14_3_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Circle {
    private:
        double radius;
    public:
        Circle(double r) { radius = r; }
        double calculateArea() { return 3.14 * radius * radius; }
        double getRadius() {
            return radius;
        }
        void setRadius(double r) {
            if (r < 0) { cout << "Error! Cannot have a negative radius!" << endl; }
            else { radius = r; }
        }
};

int main() {
    Circle c(2.4);
    cout << "Radius: " << c.getRadius() << endl;
    c.setRadius (3.6);
    cout << "New radius: " << c.getRadius() << endl;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>A <c>Rectangle</c> can be constructed given only two points. First,
                    write the class definition for <c>Point</c>, which stores an x and
                    a y value in private member variables. Also write the default constructor, which
                    sets x and y to 0, and a constructor that takes in an xVal and yVal.
                    In addition, write its accessor functions,
                    <c>getX</c>, <c>getY</c>, <c>setX</c>, and <c>setY</c>.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_14_4_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the code.

    
    <program xml:id="mucp_14_4_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Point {
    private:
        double x, y;
    public:
        Point() { x = 0; y = 0; }
        Point(double xVal, double yVal) { x = xVal; y = yVal; }
        double getX() { return x; }
        double getY() { return y; }
        void setX(double xVal) { x = xVal; }
        void setY(double yVal) { y = yVal; }
};
        ]]></code></program>

            

<exercise label="mucp_14_4_ac_a"><statement><p>Below is one way to write the code.</p></statement><program xml:id="mucp_14_4_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Point {
    private:
        double x, y;
    public:
        Point() { x = 0; y = 0; }
        Point(double xVal, double yVal) { x = xVal; y = yVal; }
        double getX() { return x; }
        double getY() { return y; }
        void setX(double xVal) { x = xVal; }
        void setY(double yVal) { y = yVal; }
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Now that we've defined the <c>Point</c> class, we can go back to
                    writing the <c>Rectangle</c> class. <c>Rectangle</c> should store
                    it's upper-left and lower-right points as private member variables.
                    Write accessor functions for these variables after the constructor.
                    It should also have length and height stored as public member variables.
                    Also write a constructor that
                    takes an upper-left point and a lower-right point as parameters.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_14_5_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the Rectangle class.

    
    <program xml:id="mucp_14_5_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Point {
    private:
        double x, y;
    public:
        Point() { x = 0; y = 0; }
        Point(double xVal, double yVal) { x = xVal; y = yVal; }
        double getX() { return x; }
        double getY() { return y; }
        void setX(double xVal) { x = xVal; }
        void setY(double yVal) { y = yVal; }
};

class Rectangle {
    private:
        Point upperLeft, lowerRight;
    public:
        double length, height;
        Rectangle(Point upLeft, Point lowRight) { upperLeft = upLeft; lowerRight = lowRight; }
        Point getUpperLeft() { return upperLeft; }
        Point getLowerRight() { return lowerRight; }
        void setUpperLeft(Point p) { upperLeft = p; }
        void setLowerRight(Point p) { lowerRight = p; }
};
        ]]></code></program>

            

<exercise label="mucp_14_5_ac_a"><statement><p>Below is one way to write the <c>Rectangle</c> class.</p></statement><program xml:id="mucp_14_5_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Point {
    private:
        double x, y;
    public:
        Point() { x = 0; y = 0; }
        Point(double xVal, double yVal) { x = xVal; y = yVal; }
        double getX() { return x; }
        double getY() { return y; }
        void setX(double xVal) { x = xVal; }
        void setY(double yVal) { y = yVal; }
};

class Rectangle {
    private:
        Point upperLeft, lowerRight;
    public:
        double length, height;
        Rectangle(Point upLeft, Point lowRight) { upperLeft = upLeft; lowerRight = lowRight; }
        Point getUpperLeft() { return upperLeft; }
        Point getLowerRight() { return lowerRight; }
        void setUpperLeft(Point p) { upperLeft = p; }
        void setLowerRight(Point p) { lowerRight = p; }
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write the <c>Rectangle</c> member function <c>calculateSides</c>, which finds
                    the length and height of the rectangle using the stored <c>Point``s.
Afterwards, write the ``Rectangle</c> member function <c>calculateArea</c>,
                    which returns the area of the rectangle.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_14_6_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the calculateSides and calculateArea member functions.

    
    <program xml:id="mucp_14_6_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Point {
    private:
        double x, y;
    public:
        Point() { x = 0; y = 0; }
        Point(double xVal, double yVal) { x = xVal; y = yVal; }
        double getX() { return x; }
        double getY() { return y; }
        void setX(double xVal) { x = xVal; }
        void setY(double yVal) { y = yVal; }
};

class Rectangle {
    private:
        Point upperLeft, lowerRight;
    public:
        double length, height;
        Rectangle(Point upLeft, Point lowRight) { upperLeft = upLeft; lowerRight = lowRight; }
        Point getUpperLeft() { return upperLeft; }
        Point getLowerRight() { return lowerRight; }
        void setUpperLeft(Point p) { upperLeft = p; }
        void setLowerRight(Point p) { lowerRight = p; }
};

void Rectangle::calculateSides() {

double Rectangle::calculateSides() {
    length = getLowerRight().getX() - getUpperLeft().getX();
    height = getUpperLeft().getY() - getLowerRight().getY();
}

double Rectangle::calculateArea() {
    return length * height;
}
        ]]></code></program>

            

<exercise label="mucp_14_6_ac_a"><statement><p>Below is one way to write the <c>calculateSides</c> and <c>calculateArea</c> member functions.</p></statement><program xml:id="mucp_14_6_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Point {
    private:
        double x, y;
    public:
        Point() { x = 0; y = 0; }
        Point(double xVal, double yVal) { x = xVal; y = yVal; }
        double getX() { return x; }
        double getY() { return y; }
        void setX(double xVal) { x = xVal; }
        void setY(double yVal) { y = yVal; }
};

class Rectangle {
    private:
        Point upperLeft, lowerRight;
    public:
        double length, height;
        Rectangle(Point upLeft, Point lowRight) { upperLeft = upLeft; lowerRight = lowRight; }
        Point getUpperLeft() { return upperLeft; }
        Point getLowerRight() { return lowerRight; }
        void setUpperLeft(Point p) { upperLeft = p; }
        void setLowerRight(Point p) { lowerRight = p; }
};

void Rectangle::calculateSides() {

double Rectangle::calculateSides() {
    length = getLowerRight().getX() - getUpperLeft().getX();
    height = getUpperLeft().getY() - getLowerRight().getY();
}

double Rectangle::calculateArea() {
    return length * height;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write a <c>main</c> In <c>main</c>, create a <c>Rectangle</c> with corners
                    at (2.5, 7.5) and (8, 1.5). Print out the length and height, calculate the area,
                    and print out the area. Then change the upperLeft corner to be at (4.2, 10.7) and
                    print out the new area.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_14_7_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to create this Rectangle.

    
    <program xml:id="mucp_14_7_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Point {
    private:
        double x, y;
    public:
        Point() { x = 0; y = 0; }
        Point(double xVal, double yVal) { x = xVal; y = yVal; }
        double getX() { return x; }
        double getY() { return y; }
        void setX(double xVal) { x = xVal; }
        void setY(double yVal) { y = yVal; }
};

class Rectangle {
    private:
        Point upperLeft, lowerRight;
    public:
        double length, height;
        Rectangle(Point upLeft, Point lowRight) { upperLeft = upLeft; lowerRight = lowRight; }
        Point getUpperLeft() { return upperLeft; }
        Point getLowerRight() { return lowerRight; }
        void setUpperLeft(Point p) { upperLeft = p; }
        void setLowerRight(Point p) { lowerRight = p; }
};

void Rectangle::calculateSides() {

double Rectangle::calculateSides() {
    length = getLowerRight().getX() - getUpperLeft().getX();
    height = getUpperLeft().getY() - getLowerRight().getY();
}

double Rectangle::calculateArea() {
    return length * height;
}

int main() {
    Point p1(2.5, 7.5);
    Point p2(8, 1.5);
    Rectangle r(p1, p2);
    r.calculateSides();
    cout << "Length: " << r.length << ", Height: " << r.height << endl;
    cout << "Area: " << r.calculateArea() << endl;
    Point p3(4.2, 10.7);
    r.setUpperLeft(p3);
    r.calculateSides();
    cout << "New area: " << r.calculateArea() << endl;
}
        ]]></code></program>

            

<exercise label="mucp_14_7_ac_a"><statement><p>Below is one way to create this <c>Rectangle</c>.</p></statement><program xml:id="mucp_14_7_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

class Point {
    private:
        double x, y;
    public:
        Point() { x = 0; y = 0; }
        Point(double xVal, double yVal) { x = xVal; y = yVal; }
        double getX() { return x; }
        double getY() { return y; }
        void setX(double xVal) { x = xVal; }
        void setY(double yVal) { y = yVal; }
};

class Rectangle {
    private:
        Point upperLeft, lowerRight;
    public:
        double length, height;
        Rectangle(Point upLeft, Point lowRight) { upperLeft = upLeft; lowerRight = lowRight; }
        Point getUpperLeft() { return upperLeft; }
        Point getLowerRight() { return lowerRight; }
        void setUpperLeft(Point p) { upperLeft = p; }
        void setLowerRight(Point p) { lowerRight = p; }
};

void Rectangle::calculateSides() {

double Rectangle::calculateSides() {
    length = getLowerRight().getX() - getUpperLeft().getX();
    height = getUpperLeft().getY() - getLowerRight().getY();
}

double Rectangle::calculateArea() {
    return length * height;
}

int main() {
    Point p1(2.5, 7.5);
    Point p2(8, 1.5);
    Rectangle r(p1, p2);
    r.calculateSides();
    cout << "Length: " << r.length << ", Height: " << r.height << endl;
    cout << "Area: " << r.calculateArea() << endl;
    Point p3(4.2, 10.7);
    r.setUpperLeft(p3);
    r.calculateSides();
    cout << "New area: " << r.calculateArea() << endl;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the <c>Date</c> class. <c>Date</c> stores information
                    about the day, month, and year in private variables, in addition to a <c>vector</c>
                    of the number of days in each month. Write accessor functions
                    for each variable, keeping in mind the valid values each variable can take.
                    In addition, write the default constructor, which initializes
                    the date to January 1, 2000. Write another constructor which takes in a day,
                    month, and year in that order.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_14_8_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the Date class and addtional constructors.

    
    <program xml:id="mucp_14_8_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

class Date {
    private:
        int day, month, year;
        vector<int> daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    public:
        Date() { day = 1; month = 1; year = 2000; }
        Date(int d, int m, int y) { day = d; month = m; year = y; }
        int getDay() { return day; }
        int getMonth() { return month; }
        int getYear() { return year; }
        void setDay(int d) { if (d > 0 && d < 32) day = d; }
        void setMonth(int m) { if (m > 0 && m < 13) month = m; }
        void setYear(int y) { year = y; }
};
        ]]></code></program>

            

<exercise label="mucp_14_8_ac_a"><statement><p>Below is one way to write the <c>Date</c> class and addtional constructors.</p></statement><program xml:id="mucp_14_8_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

class Date {
    private:
        int day, month, year;
        vector<int> daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    public:
        Date() { day = 1; month = 1; year = 2000; }
        Date(int d, int m, int y) { day = d; month = m; year = y; }
        int getDay() { return day; }
        int getMonth() { return month; }
        int getYear() { return year; }
        void setDay(int d) { if (d > 0 && d < 32) day = d; }
        void setMonth(int m) { if (m > 0 && m < 13) month = m; }
        void setYear(int y) { year = y; }
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the <c>Date</c> member function, <c>printDate</c>,
                    which prints the date out in the following format: month/day/year CE/BCE
                    depending on whether the year is negative or not.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_14_9_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the printDate member function.

    
    <program xml:id="mucp_14_9_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

class Date {
    private:
        int day, month, year;
        vector<int> daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    public:
        Date() { day = 1; month = 1; year = 2000; }
        Date(int d, int m, int y) { day = d; month = m; year = y; }
        int getDay() { return day; }
        int getMonth() { return month; }
        int getYear() { return year; }
        void setDay(int d) { if (d > 0 && d < 32) day = d; }
        void setMonth(int m) { if (m > 0 && m < 13) month = m; }
        void setYear(int y) { year = y; }
};

void Date::printDate() {
    if (getYear() < 0) {
        cout << getMonth() << "/" << getDay() << "/" << -getYear() << " BCE" << endl;
    }
    else {
        cout << getMonth() << "/" << getDay() << "/" << getYear() << " CE" << endl;
    }
}
        ]]></code></program>

            

<exercise label="mucp_14_9_ac_a"><statement><p>Below is one way to write the <c>printDate</c> member function.</p></statement><program xml:id="mucp_14_9_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

class Date {
    private:
        int day, month, year;
        vector<int> daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    public:
        Date() { day = 1; month = 1; year = 2000; }
        Date(int d, int m, int y) { day = d; month = m; year = y; }
        int getDay() { return day; }
        int getMonth() { return month; }
        int getYear() { return year; }
        void setDay(int d) { if (d > 0 && d < 32) day = d; }
        void setMonth(int m) { if (m > 0 && m < 13) month = m; }
        void setYear(int y) { year = y; }
};

void Date::printDate() {
    if (getYear() < 0) {
        cout << getMonth() << "/" << getDay() << "/" << -getYear() << " BCE" << endl;
    }
    else {
        cout << getMonth() << "/" << getDay() << "/" << getYear() << " CE" << endl;
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write the <c>Date</c> member function <c>isLeapYear</c>, which returns true if
                    the year is a leap year. Then write the <c>Date</c> member function <c>lastDayInMonth</c>,
                    which returns the last day in the <c>Date</c>'s month.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_14_10_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is onne way to write the isLeapYear and lastDayInMonth member functions.

    
    <program xml:id="mucp_14_10_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

class Date {
    private:
        int day, month, year;
        vector<int> daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    public:
        Date() { day = 1; month = 1; year = 2000; }
        Date(int d, int m, int y) { day = d; month = m; year = y; }
        int getDay() { return day; }
        int getMonth() { return month; }
        int getYear() { return year; }
        void setDay(int d) { if (d > 0 && d < 32) day = d; }
        void setMonth(int m) { if (m > 0 && m < 13) month = m; }
        void setYear(int y) { year = y; }
};

bool Date::isLeapYear() {
    if (getYear() % 4 != 0) { return false; }
    else if (getYear() % 100 != 0) { return true; }
    else if (getYear() % 400 != 0) { return false; }
    else { return true; }
}

int Date::lastDayInMonth() {
    if (isLeapYear() && getMonth() == 2) {
        return daysInMonth[getMonth() - 1] + 1;
    else {
        return daysInMonth[getMonth() - 1];
    }
}
        ]]></code></program>

            

<exercise label="mucp_14_10_ac_a"><statement><p>Below is onne way to write the <c>isLeapYear</c> and <c>lastDayInMonth</c> member functions.</p></statement><program xml:id="mucp_14_10_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

class Date {
    private:
        int day, month, year;
        vector<int> daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    public:
        Date() { day = 1; month = 1; year = 2000; }
        Date(int d, int m, int y) { day = d; month = m; year = y; }
        int getDay() { return day; }
        int getMonth() { return month; }
        int getYear() { return year; }
        void setDay(int d) { if (d > 0 && d < 32) day = d; }
        void setMonth(int m) { if (m > 0 && m < 13) month = m; }
        void setYear(int y) { year = y; }
};

bool Date::isLeapYear() {
    if (getYear() % 4 != 0) { return false; }
    else if (getYear() % 100 != 0) { return true; }
    else if (getYear() % 400 != 0) { return false; }
    else { return true; }
}

int Date::lastDayInMonth() {
    if (isLeapYear() && getMonth() == 2) {
        return daysInMonth[getMonth() - 1] + 1;
    else {
        return daysInMonth[getMonth() - 1];
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
</section>
