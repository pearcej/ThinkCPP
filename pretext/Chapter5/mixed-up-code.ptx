<?xml version="1.0"?>
<exercises xml:id="chapter5_mixed-up-code-exercises">
  <title>Mixed Up Code Practice</title>
  <exercise label="mucp_5_1"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Vacation time! But before you go, you need to convert your currency.
        Let's write the code for the dollarToYen function. dollarToYen
        takes dollar as a parameter and returns the equivalent amount of Japanese yen.
        The conversion rate is 1 USD equals 105.42 Japanese yen.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>double dollarToYen(double dollar) {</cline>
      </block>
      <block order="5"
             correct="no">
        <cline>int dollarToYen(double dollar) {  </cline>
      </block>
      <block order="7"
             correct="no">
        <cline>void dollarToYen(double dollar) {  </cline>
      </block>
      <block order="4"
             correct="no">
        <cline>double dollarToYen() {  </cline>
      </block>
      <block order="2"
             correct="no">
        <cline>   double yen;  </cline>
      </block>
      <block order="6">
        <cline>   return 105.42 * dollar;</cline>
      </block>
      <block order="8"
             correct="no">
        <cline>   return 105.42 * yen;  </cline>
      </block>
      <block order="3">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="mucp_5_2"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>When you buy something, you also need to pay sales tax. For example,
        a nice shirt could be labeled with a price of exactly $20, but when
        you pay, you actually need to pay $21.20 in a state with 6% sales tax.
        However, different states have different tax rates. Write the function
        priceWithTax, which takes price and percentTax as parameters.
        priceWithTax calculates the price after tax and returns it.
        For example, priceWithTax(20, 6) returns 21.2.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>double priceWithTax(double price, double percentTax) {</cline>
      </block>
      <block order="3"
             correct="no">
        <cline>int priceWithTax(double price, int percentTax) {  </cline>
      </block>
      <block order="4"
             correct="no">
        <cline>double priceWithTax(price, percentTax) {  </cline>
      </block>
      <block order="1">
        <cline>   return (1 + percentTax / 100) * price;</cline>
      </block>
      <block order="6"
             correct="no">
        <cline>   return (1 + percentTax) * price;  </cline>
      </block>
      <block order="7"
             correct="no">
        <cline>   return percentTax * price;  </cline>
      </block>
      <block order="2">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>


  <exercise label="mucp_5_3"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Most assignments and tests are graded as a percentage, but final
        grades are letters. Let's write the code for the percentToLetter function.
        percentToLetter takes a percentage (possibly as a decimal) and returns the corresponding
        letter grade. A 90 and above is an &#x2018;A', an 80 and above is a &#x2018;B', a 70 and
        above
        is a &#x2018;C', and anything under a 70 is an &#x2018;F'.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>char percentToLetter(double percentage) {</cline>
      </block>
      <block order="13"
             correct="no">
        <cline>void percentToLetter(double percentage) {  </cline>
      </block>
      <block order="1"
             correct="no">
        <cline>void percentToLetter(int percentage) {  </cline>
      </block>
      <block order="14"
             correct="no">
        <cline>char percentToLetter(percentage) {  </cline>
      </block>
      <block order="19">
        <cline>   if (percentage &gt;= 90) {</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>      return 'A';</cline>
          <cline>   }</cline>
        </choice>
        <choice>
          <cline>      return A;  </cline>
          <cline>   }</cline>
        </choice>
      </block>
      <block order="12">
        <cline>   else if (percentage &gt;= 80) {</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>      return 'B';</cline>
          <cline>   }</cline>
        </choice>
        <choice>
          <cline>      return 'B'  </cline>
          <cline>   }</cline>
        </choice>
      </block>
      <block order="16">
        <choice correct="yes">
          <cline>   else if (percentage &gt;= 70) {</cline>
        </choice>
        <choice>
          <cline>   else if (percentage &gt; 70) {  </cline>
        </choice>
      </block>
      <block order="3">
        <cline>      return 'C';</cline>
        <cline>   }</cline>
      </block>
      <block order="11">
        <cline>   else {</cline>
      </block>
      <block order="4">
        <cline>      return 'F';</cline>
        <cline>   }</cline>
      </block>
      <block order="17">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_5_4"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Let's write the code for the triangleArea function. triangleArea
        takes two parameters, base and height. It returns the
        area of the triangle using the formula 1/2 * base * height.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>double triangleArea(double base, double height) {</cline>
      </block>
      <block order="3"
             correct="no">
        <cline>int triangleArea(double base, double height) {  </cline>
      </block>
      <block order="7"
             correct="no">
        <cline>void triangleArea(double base, double height) {  </cline>
      </block>
      <block order="8"
             correct="no">
        <cline>double triangleArea(base, height) {  </cline>
      </block>
      <block order="6"
             correct="no">
        <cline>   double area;  </cline>
      </block>
      <block order="5">
        <cline>   return 0.5 * base * height;</cline>
      </block>
      <block order="1"
             correct="no">
        <cline><![CDATA[   cout << 0.5 * base * height << endl;  ]]></cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_5_5"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's write the code for the cylinderVolume function. cylinderVolume
        takes two parameters, radius and height. It returns the
        volume of the cylinder using the formula pi * radius * radius * height.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>double cylinderVolume(double radius, double height) {</cline>
      </block>
      <block order="3"
             correct="no">
        <cline>void cylinderVolume(double radius, double height) {  </cline>
      </block>
      <block order="6"
             correct="no">
        <cline>double cylinderVolume(radius, height) {  </cline>
      </block>
      <block order="5">
        <cline>   double pi = 3.14;</cline>
      </block>
      <block order="4">
        <cline>   return pi * radius * radius * height;</cline>
      </block>
      <block order="1">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_5_6"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>On a distant planet, depending on the characteristics of an egg, a kenchic,
        an ooseg, or a guinpen might hatch from it. Let's write the function
        birdType which returns an int corresponding to each type of bird
        (1 for kenchic, 2 for ooseg, and 3 for guinpen). If the egg is round, then it is a
        guinpen. Otherwise, if the egg is round and it isn't gray, then it is a kenchic. If
        it isn't a guinpen and it isn't a kenchic, then it's an ooseg.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="10">
        <cline>int birdType(bool isRound, bool isGray) {</cline>
      </block>
      <block order="7"
             correct="no">
        <cline>void birdType(bool isRound, bool isGray) {  </cline>
      </block>
      <block order="11"
             correct="no">
        <cline>double birdType(int isRound, char isGray) {  </cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>   if (isRound &amp;&amp; !isGray) {</cline>
        </choice>
        <choice>
          <cline>   if (!isRound &amp;&amp; !isGray) {  </cline>
        </choice>
      </block>
      <block order="5">
        <cline>      return 1;</cline>
        <cline>   }</cline>
      </block>
      <block order="15">
        <choice correct="yes">
          <cline>   else if (!isRound &amp;&amp; isGray) {</cline>
        </choice>
        <choice>
          <cline>   else if (!(isRound || isGray)) {  </cline>
        </choice>
      </block>
      <block order="13">
        <cline>      return 2;</cline>
        <cline>   }</cline>
      </block>
      <block order="3">
        <cline>   else {</cline>
      </block>
      <block order="4">
        <cline>      return 3;</cline>
        <cline>   }</cline>
      </block>
      <block order="2"
             correct="no">
        <cline>      return 0;  </cline>
        <cline>   }</cline>
      </block>
      <block order="14">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_5_7"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's write the code for the isDoubleDigit function. isDoubleDigit
        takes num as a parameter. isDoubleDigit returns true if
        num is a double digit number and returns false otherwise.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="2">
        <choice correct="yes">
          <cline>bool isDoubleDigit(int num) {</cline>
        </choice>
        <choice>
          <cline>isDoubleDigit(int num) {  </cline>
        </choice>
      </block>
      <block order="10">
        <cline><![CDATA[   if (num >= 10 && num < 100) {]]></cline>
      </block>
      <block order="6"
             correct="no">
        <cline><![CDATA[   if (10 <= num <= 99) {  ]]></cline>
      </block>
      <block order="3"
             correct="no">
        <cline><![CDATA[   if (num > 10 && num < 100) {  ]]></cline>
      </block>
      <block order="1"
             correct="no">
        <cline><![CDATA[   if (num > 10 && num <= 100) {  ]]></cline>
      </block>
      <block order="4">
        <cline>      return true;</cline>
        <cline>   }</cline>
      </block>
      <block order="7">
        <cline>   else {</cline>
      </block>
      <block order="11">
        <cline>      return false;</cline>
        <cline>   }</cline>
      </block>
      <block order="9">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_5_8"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's write the code for the Compare function. Compare
        takes two integers a, b. Compare returns 1 if
        a is greater than b, -1 if a is less than b and 0 if they are equal.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="13">
        <choice correct="yes">
          <cline>int Compare(int a, int b) {</cline>
        </choice>
        <choice>
          <cline>bool Compare(int a, int b) {   </cline>
        </choice>
      </block>
      <block order="7">
        <cline>   if (a &gt; b) {</cline>
      </block>
      <block order="9"
             correct="no">
        <cline>   if (a &gt; b &amp;&amp; a &amp;lt b) {  </cline>
      </block>
      <block order="12">
        <cline>      return 1;</cline>
        <cline>   }</cline>
      </block>
      <block order="3">
        <cline>   else if (a &amp;lt b) {</cline>
      </block>
      <block order="10"
             correct="no">
        <cline>   else if (a!=b) {  </cline>
      </block>
      <block order="11">
        <cline>      return -1;</cline>
        <cline>   }</cline>
      </block>
      <block order="14"
             correct="no">
        <cline>   else if (a &gt; 0) { </cline>
      </block>
      <block order="6">
        <cline>   else {</cline>
      </block>
      <block order="1">
        <cline>      return 0;</cline>
        <cline>   }</cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_5_9"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's write the code for the isFactor function. isFactor
        takes two parameters, num and factor.
        isFactor returns true if factor is a factor of num
        and returns false otherwise.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="8">
        <choice correct="yes">
          <cline>bool isFactor(int num, int factor) {</cline>
        </choice>
        <choice>
          <cline>void isFactor(int num, int factor) {  </cline>
        </choice>
      </block>
      <block order="6">
        <cline>   if (num % factor == 0) {</cline>
      </block>
      <block order="10"
             correct="no">
        <cline>   if (num / factor == 0) {  </cline>
      </block>
      <block order="5"
             correct="no">
        <cline>   if (num % factor) {  </cline>
      </block>
      <block order="11"
             correct="no">
        <cline>   if (factor % num == 0) {  </cline>
      </block>
      <block order="12">
        <cline>      return true;</cline>
        <cline>   }</cline>
      </block>
      <block order="4">
        <cline>   else {</cline>
      </block>
      <block order="3">
        <cline>      return false;</cline>
        <cline>   }</cline>
      </block>
      <block order="2">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_5_10"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's write the code for the isPerfectSquare function. isPerfectSquare
        takes input as a parameter and returns true if input is a
        perfect square and returns false otherwise.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="11">
        <cline>bool isPerfectSquare(int input) {</cline>
      </block>
      <block order="9"
             correct="no">
        <cline>bool isPerfectSquare(int input) </cline>
      </block>
      <block order="6"
             correct="no">
        <cline>int isPerfectSquare(int input) {  </cline>
      </block>
      <block order="12">
        <cline>   int root = sqrt(input);</cline>
      </block>
      <block order="3"
             correct="no">
        <cline>   double root = sqrt(input);  </cline>
      </block>
      <block order="7">
        <cline>   if (pow(root, 2) == input) {</cline>
      </block>
      <block order="13"
             correct="no">
        <cline>   if (sqrt(input)) {  </cline>
      </block>
      <block order="8">
        <cline>      return true;</cline>
        <cline>   }</cline>
      </block>
      <block order="10">
        <cline>   else {</cline>
      </block>
      <block order="1">
        <cline>      return false;</cline>
        <cline>   }</cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_5_11"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Most bacteria cultures grow exponentially. For this problem,
        assume the number of cells in a bacterial culture doubles every hour.
        Let's write the code for the countBacteria function. countBacteria
        takes hour as a parameter and returns the number of bacteria cells
        after hour hours. Assume when hour is 0, there is one cell. When
        hour is one, the number of cells doubles to two. When hour is two,
        the number of cells doubles to four. Use recursion.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>int countBacteria(int hour) {</cline>
      </block>
      <block order="7"
             correct="no">
        <cline>void countBacteria(int hour) {  </cline>
      </block>
      <block order="8"
             correct="no">
        <cline>bool countBacteria(int hour) {  </cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>   if (hour == 0) {</cline>
        </choice>
        <choice>
          <cline>   if (hour == 1) {  </cline>
        </choice>
      </block>
      <block order="5">
        <cline>      return 1;</cline>
        <cline>   }</cline>
      </block>
      <block order="13"
             correct="no">
        <cline>      return 2 * hour;  </cline>
        <cline>   }</cline>
      </block>
      <block order="12">
        <cline>   else {</cline>
      </block>
      <block order="1">
        <cline>      return 2 * countBacteria(hour - 1);</cline>
        <cline>   }</cline>
      </block>
      <block order="2"
             correct="no">
        <cline>      return 2 + countBacteria(hour - 1);  </cline>
        <cline>   }</cline>
      </block>
      <block order="10"
             correct="no">
        <cline>      return 2 * countBacteria(hour);  </cline>
        <cline>   }</cline>
      </block>
      <block order="3">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</exercises>