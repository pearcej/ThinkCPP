<?xml version="1.0"?>
<exercises xml:id="chapter5_multiple-choice-exercises">
  <title>Multiple Choice Exercises</title>
  <exercise label="mce_5_1">
    <statement>
      <p>What should be the return type of the function <c>convertToCelsius</c>?</p>
      <program line-numbers="yes">
        <code>
______ convertToCelsius(double fahrenheit) {
  double celsius;
  celsius = (fahrenheit - 32) * 5 / 9;
  return celsius;
}
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_5_1_opt_a">
          <p>
            <c>int</c>
          </p>
        </statement>
        <feedback id="mce_5_1_opt_a">
          <p>What variable are we returning in the function, and what is the variable's type?</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_5_1_opt_b">
          <p>
            <c>double</c>
          </p>
        </statement>
        <feedback id="mce_5_1_opt_b">
          <p>The function returns <c>celsius</c>, which is a <c>double</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_1_opt_c">
          <p>
            <c>string</c>
          </p>
        </statement>
        <feedback id="mce_5_1_opt_c">
          <p>What variable are we returning in the function, and what is the variable's type?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_1_opt_d">
          <p>
            <c>void</c>
          </p>
        </statement>
        <feedback id="mce_5_1_opt_d">
          <p>Since we are returning something in the function, the function is not <c>void</c>.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_5_2">
    <statement>
      <p>What would be returned by <c>secretFunction</c> if the input was 14?</p>
      <program line-numbers="yes">
        <code>
int secretFunction(int input) {
  if (input % 2 == 0) {
    return 3 * input - 2;
  }
  else {
    if (input % 7 == 0) {
      return input;
    }
    return 2 * input + 9;
  }
  return input + 4;
}
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_5_2_opt_a">
          <p>14</p>
        </statement>
        <feedback id="mce_5_2_opt_a">
          <p>Although 14 is divisible by 7, take another look at the conditionals.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_2_opt_b">
          <p>18</p>
        </statement>
        <feedback id="mce_5_2_opt_b">
          <p>The flow of code would never reach the last return statement.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_2_opt_c">
          <p>36</p>
        </statement>
        <feedback id="mce_5_2_opt_c">
          <p>Check your order of operations!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_2_opt_d">
          <p>37</p>
        </statement>
        <feedback id="mce_5_2_opt_d">
          <p>Take a closer look at the conditional statements.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_5_2_opt_e">
          <p>40</p>
        </statement>
        <feedback id="mce_5_2_opt_e">
          <p>Since 14 is divisible by 2, the function returns two less than three times 14.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_5_3">
    <statement>
      <p>If we wanted to create a boolean function called <c>isPrime</c>, which takes an <c>int input</c> as a
        parameter, which of the following would be the correct function header?</p>
    </statement>
    <choices>
      <choice>
        <statement id="mce_5_3_opt_a">
          <p>
            <c>boolean isPrime(int input) {</c>
          </p>
        </statement>
        <feedback id="mce_5_3_opt_a">
          <p>In C++, use the <c>bool</c> keyword for a boolean.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_3_opt_b">
          <p>
            <c>bool isPrime (input) {</c>
          </p>
        </statement>
        <feedback id="mce_5_3_opt_b">
          <p>In a function header, the type of each variable must be specified in the parameter
            list.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_5_3_opt_c">
          <p>
            <c>bool isPrime(int input) {</c>
          </p>
        </statement>
        <feedback id="mce_5_3_opt_c">
          <p>This is the correct function header for the function.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_3_opt_d">
          <p>
            <c>int isPrime(bool input) {</c>
          </p>
        </statement>
        <feedback id="mce_5_3_opt_d">
          <p>Take a closer look at what the return type is.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_5_4">
    <statement>
      <p>If we wrote the following function, which of the other functions below can we also legally
        write
        and add to the program?</p>
      <program line-numbers="yes">
        <code>
int func(double x, bool y);
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_5_4_opt_a">
          <p>
            <c>int func(double a, bool b);</c>
          </p>
        </statement>
        <feedback id="mce_5_4_opt_a">
          <p>Since this function has the same name and parameter types as the given function, it is
            not allowed.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_5_4_opt_b">
          <p>
            <c>int foo(double x, bool y);</c>
          </p>
        </statement>
        <feedback id="mce_5_4_opt_b">
          <p>This function has a different name from the given function, so it is allowed.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_5_4_opt_c">
          <p>
            <c>int func(double x);</c>
          </p>
        </statement>
        <feedback id="mce_5_4_opt_c">
          <p>Although this function has the same name as the given function, it has a different
            number of parameters, so it is allowed.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_4_opt_d">
          <p>
            <c>void func(double x, bool y);</c>
          </p>
        </statement>
        <feedback id="mce_5_4_opt_d">
          <p>Although this function has a different return type, its parameter list is the same as
            the given function, so it is not allowed.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_5_4_opt_e">
          <p>
            <c>int func(bool y, double x);</c>
          </p>
        </statement>
        <feedback id="mce_5_4_opt_e">
          <p>Although this function has the same name as the given function, its parameter list is
            in a different order, so it is allowed.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_5_5">
    <statement>
      <p>What is the output of the code below?</p>
      <program line-numbers="yes">
        <code><![CDATA[
int main() {
  bool x = 2 < 3;
  cout << x;
  cout << false;
  cout << ((1 + 4) * 4 > 24);
  cout << (23 == (32 + 2 - 11));
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="mce_5_5_opt_a">
          <p>1001</p>
        </statement>
        <feedback id="mce_5_5_opt_a">
          <p>Since the first and last statements are true and the middle two are false, this is the
            correct output.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_5_opt_b">
          <p>truefalsefalsetrue</p>
        </statement>
        <feedback id="mce_5_5_opt_b">
          <p>In C++, boolean values are outputted as 0 or 1.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_5_opt_c">
          <p>1false01</p>
        </statement>
        <feedback id="mce_5_5_opt_c">
          <p>Since the second <c>cout</c> statement doesn't have quotes around the word <q>false</q>,
            the value of 0 is outputted.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_5_opt_d">
          <p>0110</p>
        </statement>
        <feedback id="mce_5_5_opt_d">
          <p>Remember that if a boolean expression is true, it has a value of 1.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_5_6">
    <statement>
      <p>What is the output of the code below?</p>
      <program line-numbers="yes">
        <code><![CDATA[
int main() {
  bool w = !(2 * 3 == 6 || 4 - 3 > 8);
  bool x = true || 4 > 6;
  bool y = 3 != 6 - 3 && 23 >= 23;
  bool z = (4 + 9 < 15 && 3 != 4) || 2 + 5 == 7;
  cout << w << x << y << z;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="mce_5_6_opt_a">
          <p>0101</p>
        </statement>
        <feedback id="mce_5_6_opt_a">
          <p>Since the expressions are false, true, false, and true, the output is 0101.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_6_opt_b">
          <p>1010</p>
        </statement>
        <feedback id="mce_5_6_opt_b">
          <p>Remember that <c>true</c> outputs to 1 and <c>false</c> outputs to 0.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_6_opt_c">
          <p>1101</p>
        </statement>
        <feedback id="mce_5_6_opt_c">
          <p>Remember the NOT operator (!) inverts the value of a boolean.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_6_opt_d">
          <p>0100</p>
        </statement>
        <feedback id="mce_5_6_opt_d">
          <p>Take a closer look at the order of operations.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_6_opt_e">
          <p>0110</p>
        </statement>
        <feedback id="mce_5_6_opt_e">
          <p>Take a closer look at the expressions.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_5_7">
    <statement>
      <p>Are there any issues with the code below?</p>
      <program line-numbers="yes">
        <code>
bool isEven(int num) {
  if (num % 2 == 0) {
    return true;
  }
}
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_5_7_opt_a">
          <p>Yes, we have to return either 0 or 1.</p>
        </statement>
        <feedback id="mce_5_7_opt_a">
          <p>Returning a 0 or 1 would be returning an <c>int</c>, even though booleans evaluate to 0 or
            1.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_7_opt_b">
          <p>Yes, we cannot pass an <c>int</c> into a <c>bool</c> function.</p>
        </statement>
        <feedback id="mce_5_7_opt_b">
          <p>The type of variables in the parameter list do not affect the return type.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_5_7_opt_c">
          <p>Yes, there is no case for odd numbers.</p>
        </statement>
        <feedback id="mce_5_7_opt_c">
          <p>Since we never established an else clause, if the input was an odd number, the function
            would not return anything despite not being a void function.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_7_opt_d">
          <p>There are no issues with the code.</p>
        </statement>
        <feedback id="mce_5_7_opt_d">
          <p>There is an issue with the code. Can you find it?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_5_8">
    <statement>
      <p>Are there any issues with the code below?</p>
      <program line-numbers="yes">
        <code><![CDATA[
double Free_time(int day) {
  if (day == 1 || day == 2 || day == 3 || day == 4) {
    cout << "Better study on weekday!" << endl;
    return day*0.25;
  }
  else{
    cout << "Happy weekend" << endl;
    return day;
  }
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_5_8_opt_a">
          <p>Yes, we might not return anything.</p>
        </statement>
        <feedback id="mce_5_8_opt_a">
          <p>We have an else clause in which we return a value.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_8_opt_b">
          <p>Yes, we cannot return an entire expression like <c>day*0.25</c>.</p>
        </statement>
        <feedback id="mce_5_8_opt_b">
          <p>If the result of the expression is compatible with the return type we can return it.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_8_opt_c">
          <p>Yes, we are returning an <c>int</c> (in the <c>else</c> block) where as the return type is <c>double</c>
            .</p>
        </statement>
        <feedback id="mce_5_8_opt_c">
          <p>Implicit conversion from an int to double is ok in c++!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_5_8_opt_d">
          <p>There are no issues with the code.</p>
        </statement>
        <feedback id="mce_5_8_opt_d">
          <p>Correct! implicit conversion from int to double are ok!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_5_9">
    <statement>
      <p>Are there any issues with the code below?</p>
      <program line-numbers="yes">
        <code><![CDATA[
void moonWeight(double earth) {
  double moon = 0.165 * earth;
  cout << "You would weigh " << moon << " pounds on the moon." << endl;
  return moon;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_5_9_opt_a">
          <p>Yes, we cannot have <c>cout</c> statements in a function.</p>
        </statement>
        <feedback id="mce_5_9_opt_a">
          <p>We are allowed to use <c>cout</c> statements in a function.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_5_9_opt_b">
          <p>Yes, we cannot return anything.</p>
        </statement>
        <feedback id="mce_5_9_opt_b">
          <p><c>void</c> functions do not have return values, so we cannot return <c>moon</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_9_opt_c">
          <p>Yes, we need to return the output statement.</p>
        </statement>
        <feedback id="mce_5_9_opt_c">
          <p><c>void</c> functions do not have return values.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_9_opt_d">
          <p>There are no issues with the code.</p>
        </statement>
        <feedback id="mce_5_9_opt_d">
          <p>There is an issue with the code. Can you find it?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_5_10">
    <statement>
      <p>What is the return type of main?</p>
    </statement>
    <choices>
      <choice>
        <statement id="mce_5_10_opt_a">
          <p>
            <c>void</c>
          </p>
        </statement>
        <feedback id="mce_5_10_opt_a">
          <p>What keyword do we use before <c>main()</c> in every program?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_10_opt_b">
          <p>
            <c>bool</c>
          </p>
        </statement>
        <feedback id="mce_5_10_opt_b">
          <p>What keyword do we use before <c>main()</c> in every program?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_10_opt_c">
          <p>
            <c>double</c>
          </p>
        </statement>
        <feedback id="mce_5_10_opt_c">
          <p>What keyword do we use before <c>main()</c> in every program?</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_5_10_opt_d">
          <p>
            <c>int</c>
          </p>
        </statement>
        <feedback id="mce_5_10_opt_d">
          <p>Yes, <c>main</c> is supposed to return an integer, which is why programmers often return 0
            at the end of <c>main</c>.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_5_11">
    <statement>
      <p>What is the base case of the <c>factorial</c> recursive function?</p>
      <program line-numbers="yes">
        <code>
int factorial(int n) {
  if (n == 0) {
    return 1;
  }
  else {
    int recurse = factorial(n-1);
    int result = n * recurse;
    return result;
  }
}
</code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="mce_5_11_opt_a">
          <p>
            <c>n = 0</c>
          </p>
        </statement>
        <feedback id="mce_5_11_opt_a">
          <p>When <c>n</c> is 0, the function returns the value 1 without making a recursive call.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_11_opt_b">
          <p>
            <c>n = 1</c>
          </p>
        </statement>
        <feedback id="mce_5_11_opt_b">
          <p>When <c>n</c> is 1, the function makes a recursive call in the else statement.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_11_opt_c">
          <p>
            <c>n = -1</c>
          </p>
        </statement>
        <feedback id="mce_5_11_opt_c">
          <p><c>n</c> never becomes -1.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_11_opt_d">
          <p>There is no base case.</p>
        </statement>
        <feedback id="mce_5_11_opt_d">
          <p>If there was no base case, the function would recurse infinitely.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_5_12">
    <statement>
      <p>What is printed?</p>
      <program line-numbers="yes">
        <code><![CDATA[
void print_sequence(int n) {
  if (n == 0) {
     cout << 1;
     return;
     //we can have an empty return to a void function
  }
  else {
    cout << n << " ";
    print_sequence(n - 1);
  }
}

int main() {
    int val=6;
    print_sequence(val);
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_5_12_opt_a">
          <p>6 5 4 3 2 1 0</p>
        </statement>
        <feedback id="mce_5_12_opt_a">
          <p>Check what the base case prints.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_12_opt_b">
          <p>6 6 6 6 6 6 1</p>
        </statement>
        <feedback id="mce_5_12_opt_b">
          <p>What value do we give the recursive call?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_5_12_opt_c">
          <p>6 5 4 3 2 1</p>
        </statement>
        <feedback id="mce_5_12_opt_c">
          <p>The base case prints something!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_5_12_opt_d">
          <p>6 5 4 3 2 1 1</p>
        </statement>
        <feedback id="mce_5_12_opt_d">
          <p>We print a number and decrement it till we reach 0 then we print 1.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</exercises>