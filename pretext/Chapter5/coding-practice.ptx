<?xml version="1.0"?>
<exercises xml:id="chapter5_coding-practice">
  <title>Coding Practice</title>
    <exercise label="cp_5_AC_1">
      <statement>Write a function called <c>calculator</c> which takes two <c>doubles</c>, <c>first</c> and <c>second</c> and a <c>char operation</c>
        as parameters. <c>calculator</c> performs addition, subtraction, multiplication, or division with the
        two <c>doubles</c> depending on what operation is passed in (+, -, \*, /). It then returns the
        result. Run and test your code!</statement>

      <program interactive="activecode">
      <code><![CDATA[
#include <iostream>
using namespace std;

double calculator(double first, double second, char operation) {
    // Write your implementation here.
}
]]>

      </code>
      <tests>
        #define CATCH_CONFIG_MAIN
        #include &lt;catch.hpp&gt;
        
        TEST_CASE("calculator function: addition") {
            REQUIRE(calculator(3, 6, '+') == 9);
            REQUIRE(calculator(-2.6, 4, '+') == 1.4);
        }
        
        TEST_CASE("calculator function: subtraction") {
            REQUIRE(calculator(19, 2, '-') == 17);
            REQUIRE(calculator(-2.3, 2, '-') == -4.3);
        }
        
        TEST_CASE("calculator function: multiplication") {
            REQUIRE(calculator(5, 8, '*') == 40);
            REQUIRE(calculator(0.5, -6, '*') == -3.0);
        }
        
        TEST_CASE("calculator function: division") {
            REQUIRE(calculator(16, 4, '/') == 4);
            REQUIRE(calculator(3, 8, '/') == 0.375);
        }
      </tests>
    </program>

      <solution>

        <p>Below is one way to implement the <c>calculator</c> function. Using conditionals, we return the
          correct result depending on which operation was given.</p>

        <program xml:id="cp_5_AC_1a"
                 line-numbers="yes"><code><![CDATA[
double calculator(double first, double second, char operation) {
    if (operation == '+') {
        return first + second;
    }
    else if (operation == '-') {
        return first - second;
    }
    else if (operation == '*') {
        return first * second;
    }
    else {
        return first / second;
    }
}
        ]]></code></program>


      </solution>
    </exercise>

    <exercise label="cp_5_AC_2q">
      <statement>
        <p>A binary number is one that is expressed in the base-2 numeral system. Write a function <c>convertToBinary</c>
          which takes a <c>decimal</c> as a parameter. <c>convertToBinary</c> takes the number in decimal, converts it
          into a binary number, and returns the binary number. Test your function in <c>main</c>.</p>
      </statement>
      <program xml:id="cp_5_AC_2q_editor"
               interactive="activecode"
               line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int convertToBinary(int decimal) {
// Write your implementation here.
}
    ]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("convertToBinary function") {
REQUIRE(convertToBinary(1) == 1);
REQUIRE(convertToBinary(5) == 101);
REQUIRE(convertToBinary(16) == 10000);
REQUIRE(convertToBinary(31) == 11111);
}
</tests>
    </program>
      <hint>
        <activity label="cp_5_AC_2q_pp"
                  numbered="yes"
                  adaptive="yes"
                  indentation="hide"
                  exercise-interactive="parson">
          <statement>
            <p>A binary number is one that is expressed in the base-2 numeral system. Write a
              function <c>convertToBinary</c> which takes a <c>decimal</c> as a parameter. <c>convertToBinary</c> takes the number in
              decimal, converts it into a binary number, and returns the binary number. Test your
              function in <c>main</c>. Use the lines to construct the code, then go back to complete the
              Activecode.</p>
          </statement>
          <blocks>
            <block order="2">
              <cline>int convertToBinary(int decimal) {</cline>
            </block>
            <block order="5">
              <choice correct="yes">
                <cline>    if (decimal == 0) {</cline>
                <cline>        return 0;</cline>
                <cline>    }</cline>
              </choice>
              <choice>
                <cline>    if (decimal &gt;= 0) { </cline>
                <cline>        return 0;</cline>
                <cline>    }</cline>
              </choice>
            </block>
            <block order="4">
              <cline>    else {</cline>
              <cline>        return (decimal % 2 + 10 * convertToBinary(decimal / 2));</cline>
              <cline>    }</cline>
            </block>
            <block order="1">
              <cline>}</cline>
            </block>
          </blocks>
        </activity>
      </hint>
    </exercise>

    <exercise label="cp_5_AC_3">
      <statement> An interior angle of a polygon is the angle between two adjacent sides of the
        polygon. Each interior angle in an equilateral triangle measures 60 degree, each interior
        angle in a square measures 90 degrees, and in a regular pentagon, each interior angle
        measures 108 degrees. Write the function <c>calculateIntAngle</c>, which takes a <c>numSides</c> as a parameter and
        returns a <c>double</c>. <c>calculateIntAngle</c> finds the interior angle of a regular polygon with <c>numSides</c> sides.
        The formula to find the interior angle of a regular ngon is (n - 2) x 180 / n. Run and test
        your code! </statement>
      <program interactive="activecode">
      <code>
        <![CDATA[
#include <iostream>
using namespace std;

double calculateIntAngle(int numSides) {
    // Write your implementation here.
}
        ]]>
      </code>
    </program>
      <solution>
        <p>Below
          is one way to implement the program. Using the formula given,
          we can find the interior angle and return it. Notice how we use 180.0
          instead of 180 to avoid integer division.</p>
        <program xml:id="cp_5_AC_3a"
                 line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

double calculateIntAngle(int numSides) {
    return (numSides - 2) * 180.0 / numSides;
}
        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("calculateIntAngle function") {
    REQUIRE(calculateIntAngle(3) == 60);
    REQUIRE(calculateIntAngle(4) == 90);
    REQUIRE(calculateIntAngle(5) == 108);
    REQUIRE(calculateIntAngle(8) == 135);
}
</tests></program>


      </solution>
    </exercise>

    <exercise label="cp_5_AC_4q">
      <statement>
        <p>The astronomical start and end dates of the four seasons are based on the position of the
          Earth relative to the Sun. As a result, it changes every year and can be difficult to
          remember. However, the meteorological start and end dates are based on the Gregorian
          calendar and is easier to remember. Spring starts on March 1, summer starts on June 1,
          fall starts on September 1, and winter starts on December 1. Write a function called <c>birthSeason</c>,
          which takes two parameters, <c>month</c> and <c>day</c>. <c>birthSeason</c> calculates which season the
          birthday falls in according to the meteorological start and returns a <c>string</c> with the
          correct season. For example, <c>birthSeason (7, 5)</c> returns <q>summer</q> since July 5 is in the summer.</p>
      </statement>
      <program xml:id="cp_5_AC_4q_editor"
               interactive="activecode"
               line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

string birthSeason(int month, int day) {
  // Write your implementation here.
}
      ]]></code>
        <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("birthSeason function: spring") {
  REQUIRE(birthSeason (5, 3) == "spring");
  REQUIRE(birthSeason (3, 1) == "spring");
  REQUIRE(birthSeason (5, 31) == "spring");
}

TEST_CASE("birthSeason function: summer") {
  REQUIRE(birthSeason (7, 5) == "summer");
  REQUIRE(birthSeason (6, 1) == "summer");
  REQUIRE(birthSeason (8, 31) == "summer");
}

TEST_CASE("birthSeason function: fall") {
  REQUIRE(birthSeason (11, 24) == "fall");
  REQUIRE(birthSeason (9, 1) == "fall");
  REQUIRE(birthSeason (11, 30) == "fall");
}

TEST_CASE("birthSeason function: winter") {
  REQUIRE(birthSeason (2, 20) == "winter");
  REQUIRE(birthSeason (12, 1) == "winter");
  REQUIRE(birthSeason (2, 28) == "winter");
}
</tests>
      </program>
      <hint>
        <activity label="cp_5_AC_4q_pp"
                  numbered="yes"
                  adaptive="yes"
                  indentation="hide"
                  exercise-interactive="parson">
          <statement>
            <p>The astronomical start and end dates of the four seasons are based on the position of
              the Earth relative to the Sun. As a result, it changes every year and can be difficult
              to remember. However, the meteorological start and end dates are based on the
              Gregorian calendar and is easier to remember. Spring starts on March 1, summer starts
              on June 1, fall starts on September 1, and winter starts on December 1. Write a
              function called <c>birthSeason</c>, which takes two parameters, <c>month</c> and <c>day</c>. <c>birthSeason</c>
              calculates which season the birthday falls in according to the meteorological start
              and returns a <c>string</c> with the correct season. For example, <c>birthSeason (7, 5)</c> returns <q>summer</q>
              since July 5 is in the summer. Use the lines to construct the code, then go back to
              complete the Activecode.</p>
          </statement>
          <blocks>
            <block order="5">
              <cline>string birthSeason(int month, int day) {</cline>
            </block>
            <block order="4">
              <cline><![CDATA[    if (month >= 3 && month < 6) {]]></cline>
              <cline>        return "spring";</cline>
              <cline>    }</cline>
            </block>
            <block order="1">
              <cline><![CDATA[    if (month >= 6 && month < 9) {]]></cline>
              <cline>        return "summer";</cline>
              <cline>    }</cline>
            </block>
            <block order="6">
              <cline><![CDATA[    if (month >= 9 && month < 12) {]]></cline>
              <cline>        return "fall";</cline>
              <cline>    }</cline>
            </block>
            <block order="2">
              <cline><![CDATA[    if (month == 12 || month < 3) {]]></cline>
              <cline>        return "winter";</cline>
              <cline>    }</cline>
            </block>
            <block order="3">
              <cline>}</cline>
            </block>
          </blocks>
        </activity>
      </hint>
    </exercise>

    <exercise label="cp_5_AC_5">
      <statement>
        <p>Dog owners will know that figuring out a dog’s age is more complicated than just counting
          age directly. Dogs mature faster than humans do, so to get a more accurate calculation of
          a dog’s age, write the <c>dogToHumanYears</c> function, which takes an <c>dogAge</c> as a parameter. <c>dogToHumanYears</c>
          converts and returns the dog’s age to human years. A one year old dog is 15 years old in
          human years; a two year old dog is 24 years old in human years. Each year after the second
          year counts as 4 additional human years. For example, a dog that is 3 years old is
          actually 28 years old in human years. Run and test your code!</p>
      </statement>
      <program interactive="activecode">          
        <code><![CDATA[
#include <iostream>
using namespace std;

int dogToHumanYears (int dogAge) {
    // Write your implementation here.
}
]]></code>
        <tests><![CDATA[
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("dogToHumanYears function for 1 and under") {
  REQUIRE(dogToHumanYears(1) == 15);
}

TEST_CASE("dogToHumanYears function for > 1") {
  REQUIRE(dogToHumanYears(2) == 24);
  REQUIRE(dogToHumanYears(3) == 28);
  REQUIRE(dogToHumanYears(5) == 36);
}
]]>
        </tests>
      </program>
      <solution>
        <p>Below
          is one way to implement the program. We can use a conditional to
          check to see if the dog is one year old. If it is older than one, then
          we can use the formula to return the correct age in human years.</p>
        <program xml:id="cp_5_AC_5a"
                 line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int dogToHumanYears(int dogAge) {
    if (dogAge == 1) {
        return 15;
    }
    return 24 + (dogAge - 2) * 4;
}
        ]]></code>
      </program>
      </solution>
    </exercise>

    <exercise label="cp_5_AC_6q">
      <statement>
        <p>A number is a common factor of two other numbers if it divides evenly into both of the
          other numbers. For example, 2 is a common factor of 4 and 18, because 2 goes evenly into 4
          and 18. Write the function <c>isCommonFactor</c>, which takes three parameters, <c>num1</c>, <c>num2</c>, and <c>factor</c>
          . <c>isCommonFactor</c> returns <c>true</c> if <c>factor</c> is a factor of both <c>num1</c> and <c>num2</c>, and returns <c>false</c>
          otherwise. Run and test your code!.</p>
      </statement>
      <program xml:id="cp_5_AC_6q_editor"
               interactive="activecode"
               line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

bool isCommonFactor(int num1, int num2, int factor) {
// Write your implementation here.
}
    ]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("isCommonFactor function: true cases") {
REQUIRE(isCommonFactor (24, 8, 4) == 1);
REQUIRE(isCommonFactor (75, 20, 5) == 1);
}

TEST_CASE("isCommonFactor function: false cases") {
REQUIRE(isCommonFactor (132, 42, 11) == 0);
REQUIRE(isCommonFactor (74, 23, 3) == 0);
}
</tests>
    </program>
      <hint>
        <activity label="cp_5_AC_6q_pp"
                  exercise-interactive="parson">
          <statement>
            <p>A number is a common factor of two other numbers if it divides evenly into both of
              the other numbers. For example, 2 is a common factor of 4 and 18, because 2 goes
              evenly into 4 and 18. Write the function <c>isCommonFactor</c>, which takes three parameters, <c>num1</c>
              , <c>num2</c>, and <c>factor</c>. <c>isCommonFactor</c> returns <c>true</c> if <c>factor</c> is a factor of both <c>num1</c>
              and <c>num2</c>, and returns <c>false</c> otherwise. Run and test your code! Use the lines to
              construct the code, then go back to complete the Activecode.</p>
          </statement>
          <blocks>
            <block order="5">
              <cline>bool isCommonFactor(int num1, int num2, int factor) {</cline>
            </block>
            <block order="6">
              <choice correct="yes">
                <cline>    if (num1 % factor == 0 &amp;&amp; num2 % factor == 0) {</cline>
              </choice>
              <choice>
                <cline>    if (num1 % factor == 0 || num2 % factor == 0) { </cline>
              </choice>
            </block>
            <block order="3">
              <cline>        return true;</cline>
            </block>
            <block order="1">
              <cline>    else {</cline>
              <cline>        return false;</cline>
              <cline>    }</cline>
            </block>
            <block order="2">
              <cline>    }</cline>
            </block>
            <block order="7">
              <cline>}</cline>
            </block>
          </blocks>
        </activity>
      </hint>
    </exercise>

    <exercise label="cp_5_AC_7">
      <statement> If a year is divisible by 4, then it is a leap year. However, if it is also
        divisible by 100, then it is not a leap year. However, if it is also divisible by 400, then
        it is a leap year. Thus, 2001 is not a leap year, 2004 is a leap year, 2100 is not a leap
        year, and 2000 is a leap year. Write the <c>boolean</c> function <c>isLeapYear</c>, which takes a year as a
        parameter and returns <c>true</c> if the year is a leap year and <c>false</c> otherwise. Run and test
        your code! </statement>
      <program interactive="activecode">
      <code><![CDATA[ 
#include <iostream>
using namespace std;

bool isLeapYear(int year) {
    // Write your implementation here.
}

]]>
      </code>
      <tests>
        #define CATCH_CONFIG_MAIN
        #include &lt;catch.hpp&gt;
        
        TEST_CASE("isLeapYear not divisible by 4") {
            REQUIRE(isLeapYear(2001) == 0);
            REQUIRE(isLeapYear(2005) == 0);
        }
        
        TEST_CASE("isLeapYear divisible by 4") {
            REQUIRE(isLeapYear(2004) == 1);
            REQUIRE(isLeapYear(2008) == 1);
        }
        
        TEST_CASE("isLeapYear divisible by 100") {
            REQUIRE(isLeapYear(2100) == 0);
            REQUIRE(isLeapYear(1900) == 0);
        }
        
        TEST_CASE("isLeapYear divisible by 400") {
            REQUIRE(isLeapYear(2000) == 1);
            REQUIRE(isLeapYear(2400) == 1);
        }
        </tests>
    </program>
      <solution>
        <p>Below is one way to implement the program. We can use conditionals in this order to
          efficiently determine whether or not a given year is a leap year.</p>

        <program xml:id="cp_5_AC_7a"
                 line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

bool isLeapYear(int year) {
    if (year % 400 == 0) {
        return true;
    }
    else if (year % 100 == 0) {
        return false;
    }
    else if (year % 4 == 0) {
        return true;
    }
    else {
        return false;
    }
}
        ]]></code></program>
      </solution>
    </exercise>


    <exercise label="cp_5_AC_8q">
      <statement>
        <p>In the enchanted Mushroom Forest, there are many different types of mushrooms as far as
          the eye can see. Most of these mushrooms can make delicious stews and dishes, but some of
          them are poisonous. Write the function <c>isPoisonous</c>, which takes an <c>char size</c>, <c>int numSpots</c>, and <c>bool isRed</c>
          as parameters. If a mushroom is large (&#x2018;L') and has fewer than 3 spots, it is
          poisonous. If a mushroom is small (&#x2018;S') and is red, it is poisonous. If a mushroom
          has fewer than 3 spots or is not red, it is poisonous. Otherwise, it is not. <c>isPoisonous</c>
          should return <c>true</c> if the mushroom is poisonous and <c>false</c> otherwise.</p>
      </statement>
      <program xml:id="cp_5_AC_8q_editor"
               interactive="activecode"
               line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

bool isPoisonous(char size, int numSpots, bool isRed) {
    // Write your implementation here.
}
    ]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("isPoisonous function: true cases") {
    REQUIRE(isPoisonous('S', 10, 0) == 1);
    REQUIRE(isPoisonous('S', 10, 0) == 1);
    REQUIRE(isPoisonous('L', 1, 1) == 1);
}

TEST_CASE("isPoisonous function: false cases") {
    REQUIRE(isPoisonous('L', 4, 1) == 0);
    REQUIRE(isPoisonous('L', 9, 1) == 0);
}
</tests>
    </program>
      <hint>
        <activity label="cp_5_AC_8q_pp"
                  numbered="yes"
                  adaptive="yes"
                  indentation="hide"
                  exercise-interactive="parson">
          <statement>
            <p>Use the lines to construct the code, then go back to complete the Activecode.</p>
          </statement>
          <blocks>
            <block order="4">
              <cline>bool isPoisonous(char size, int numSpots, bool isRed) {</cline>
            </block>
            <block order="8">
              <choice correct="yes">
                <cline><![CDATA[    if (size == 'L' && numSpots < 3) {]]></cline>
                <cline>        return true;</cline>
                <cline>    }</cline>
              </choice>
              <choice>
                <cline><![CDATA[    if (size == 'L' || numSpots < 3) { ]]></cline>
                <cline>        return true;</cline>
                <cline>    }</cline>
              </choice>
            </block>
            <block order="7">
              <cline>    if (size == 'S' &amp;&amp; isRed == true) {</cline>
              <cline>        return true;</cline>
              <cline>    }</cline>
            </block>
            <block order="2"
                   correct="no">
              <cline>    if (size == 'S' || isRed == false) { </cline>
              <cline>        return true;</cline>
              <cline>    }</cline>
            </block>
            <block order="6">
              <cline><![CDATA[    if (numSpots < 3 || isRed == false) {]]></cline>
              <cline>        return true;</cline>
              <cline>    }</cline>
            </block>
            <block order="1">
              <cline>    else {</cline>
              <cline>        return false;</cline>
              <cline>    }</cline>
            </block>
            <block order="5">
              <cline>}</cline>
            </block>
          </blocks>
        </activity>
      </hint>
    </exercise>


    <exercise label="ecp_5_AC_9">
      <statement> We know that a factorial is the product of an integer and all the integers below
        it. For example, four factorial (4!) is 24. A triangular number is the same as a factorial,
        except you add all the numbers instead of multiplying. For example, the 1st triangular
        number is 1, the 2nd is 3, the 3rd is 6, the 4th is 10, the 5th is 15, etc. You can imagine
        rows of dots, where each successive row has one more dot, thus forming a triangular shape.
        Write the <c>triangularNum</c> function, which takes an <c>int n</c> as a parameter and returns the nth
        triangular number. Use recursion. Run and test your code! </statement>
      <program interactive="activecode">
      <code><![CDATA[
#include <iostream>
using namespace std;

int triangularNum(int n) {
    // Write your implementation here.
}

]]>
      </code>
      <tests>
        #define CATCH_CONFIG_MAIN
        #include &lt;catch.hpp&gt;
        
        TEST_CASE("triangularNum function") {
            REQUIRE(triangularNum (1) == 1);
            REQUIRE(triangularNum (3) == 6);
            REQUIRE(triangularNum (6) == 21);
            REQUIRE(triangularNum (17) == 153);
        }
        </tests>
    </program>
      <solution>
        <p>Below is one way to implement the program. We can use conditionals to separate the base
          case and recursive cases. Our base case is when <c>n</c> is 1, and in that case we return
          1. Otherwise, we recursively call <c>triangularNum</c> on <c>n-1</c>.</p>
        <program xml:id="cp_5_AC_9a"
                 line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int triangularNum(int n) {
    if (n == 1) {
        return 1;
    }
    else {
        return n + triangularNum(n - 1);
    }
}
        ]]></code>
      </program>
      </solution>
    </exercise>


    <exercise label="cp_5_AC_10q">
      <statement>
        <p>Write the function <c>digitSum</c> which takes an <c>int num</c> as a parameter and returns the sum of
          all its digits. For example, <c>digitSum(1423)</c> would return 10. Use recursion. </p>
      </statement>
      <program xml:id="cp_5_AC_10q_editor"
               interactive="activecode"
               line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

int digitSum(int num) {
    // Write your implementation here.
}
      ]]></code>
        <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("digitSum function") {
    REQUIRE(digitSum(123) == 6);
    REQUIRE(digitSum(8739) == 27);
    REQUIRE(digitSum(440) == 8);
    REQUIRE(digitSum(2) == 2);
}
</tests>
      </program>
      <hint>
        <activity label="cp_5_AC_10q_pp"
                  numbered="yes"
                  adaptive="yes"
                  indentation="hide"
                  exercise-interactive="parson">
          <statement>
            <p>Write the function <c>digitSum</c> which takes an <c>int num</c> as a parameter and returns the sum
              of all its digits. For example, <c>digitSum (1423)</c> would return 10. Use recursion. Use the lines
              to construct the code, then go back to complete the Activecode.</p>
          </statement>
          <blocks>
            <block order="4">
              <cline>int digitSum(int num) {</cline>
            </block>
            <block order="5">
              <choice correct="yes">
                <cline>    if (num == 0) {</cline>
                <cline>        return 0;</cline>
                <cline>    }</cline>
              </choice>
              <choice>
                <cline>    if (num == 0) { </cline>
                <cline>        return num;</cline>
                <cline>    }</cline>
              </choice>
            </block>
            <block order="1">
              <choice correct="yes">
                <cline>    return (num % 10 + digitSum(num / 10));</cline>
              </choice>
              <choice>
                <cline>    return (num % 10 + digitSum(num)); </cline>
              </choice>
            </block>
            <block order="3"
                   correct="no">
              <cline>    return (digitsum(num) % 10); </cline>
            </block>
            <block order="2">
              <cline>}</cline>
            </block>
          </blocks>
        </activity>
      </hint>
    </exercise>
</exercises>