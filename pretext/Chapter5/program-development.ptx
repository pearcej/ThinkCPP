<?xml version="1.0"?>
<section xml:id="chapter5_program-development-distance">
  <title>Program Development</title>
  <p>At this point you should be able to look at complete C++ functions and tell what they do. But
    it may not be clear yet how to go about writing them. I am going to suggest one technique that I
    call <term>incremental
      development</term>.</p>
  <p>As an example, imagine you want to find the distance between two points, given by the
    coordinates <m>(x_1, y_1)</m> and <m>(x_2, y_2)</m>. By the usual definition,</p>
  <me>distance = \sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}</me>
  <p>The first step is to consider what a distance function should look like
    in C++. In other words, what are the inputs (parameters) and what is the
    output (return value).</p>
  <p>In this case, the two points are the parameters, and it is natural to
    represent them using four doubles. The return value is the distance,
    which will have type double.</p>
  <p>Already we can write an outline of the function:</p>
  <program>double distance(double x1, double y1, double x2, double y2) {
  return 0.0;
}</program>
  <p>The return statement is a placekeeper so that the function will compile
    and return something, even though it is not the right answer. At this
    stage the function doesn't do anything useful, but it is worthwhile to
    try compiling it so we can identify any syntax errors before we make it
    more complicated.</p>
  <p>In order to test the new function, we have to call it with sample
    values. Somewhere in main I would add:</p>
  <program>double dist = distance(1.0, 2.0, 4.0, 6.0);
cout &lt;&lt; dist &lt;&lt; endl;</program>
  <p>I chose these values so that the horizontal distance is 3 and the
    vertical distance is 4; that way, the result will be 5 (the hypotenuse
    of a 3-4-5 triangle). When you are testing a function, it is useful to
    know the right answer.</p>
  <p>Once we have checked the syntax of the function definition, we can start
    adding lines of code one at a time. After each incremental change, we
    recompile and run the program. That way, at any point we know exactly
    where the error must be&#x2014;in the last line we added.</p>
  <p>The next step in the computation is to find the differences <m>x_2 - x_1</m> and <m>y_2 - y_1</m>.
    I will store those values in temporary variables named dx and dy.</p>
  <program>double distance(double x1, double y1, double x2, double y2) {
  double dx = x2 - x1;
  double dy = y2 - y1;
  cout &lt;&lt; "dx is " &lt;&lt; dx &lt;&lt; endl;
  cout &lt;&lt; "dy is " &lt;&lt; dy &lt;&lt; endl;
  return 0.0;
}</program>
  <p>I added output statements that will let me check the intermediate values
    before proceeding. As I mentioned, I already know that they should be
    3.0 and 4.0.</p>
  <note>
    <p>If you are ever unsure why a function isn't returning what you expect it to, using <c>cout</c>
      statements at different steps in your function will help you figure it out.</p>
  </note>
  <p>When the function is finished I will remove the output statements. Code like that is called <term>
    scaffolding</term>, because it is helpful for building the program, but it is not part of the
    final product. Sometimes it is a good idea to keep the scaffolding around, but comment it out,
    just in case you need it later.</p>
  <p>The next step in the development is to square dx and dy. We could use
    the pow function, but it is simpler and faster to just multiply each
    term by itself.</p>
  <program>double distance(double x1, double y1, double x2, double y2) {
  double dx = x2 - x1;
  double dy = y2 - y1;
  double dsquared = dx*dx + dy*dy;
  cout &lt;&lt; "dsquared is " &lt;&lt; dsquared;
  return 0.0;
}</program>
  <p>Again, I would compile and run the program at this stage and check the
    intermediate value (which should be 25.0).</p>
  <p>Finally, we can use the sqrt function to compute and return the result.</p>
  <program>double distance(double x1, double y1, double x2, double y2) {
  double dx = x2 - x1;
  double dy = y2 - y1;
  double dsquared = dx*dx + dy*dy;
  double result = sqrt(dsquared);
  return result;
}</program>
  <p>Then in main, we should output and check the value of the result.</p>
  <listing label="program_dvlmt_AC_1">
    <caption>
      This program implements the distance function that we've been
        talking about and outputs the result.
    </caption>
    <program xml:id="program_dvlmt_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;

double distance(double x1, double y1, double x2, double y2) {
    double dx = x2 - x1;
    double dy = y2 - y1;
    double dsquared = dx*dx + dy*dy;
    double result = sqrt(dsquared);
    return result;
}

int main() {
    double dist = distance(1.0, 2.0, 4.0, 6.0);
    cout << dist << endl;
   return 0;
}
        ]]></code>
    </program>
  </listing>
  <p>As you gain more experience programming, you might find yourself writing
    and debugging more than one line at a time. Nevertheless, this
    incremental development process can save you a lot of debugging time.</p>
  <p>The key aspects of the process are:</p>
  <p>
    <ul>
      <li>
        <p>Start with a working program and make small, incremental changes. At
          any point, if there is an error, you will know exactly where it is.</p>
      </li>
      <li>
        <p>Use temporary variables to hold intermediate values so you can output
          and check them.</p>
      </li>
      <li>
        <p>Once the program is working, you might want to remove some of the
          scaffolding or consolidate multiple statements into compound
          expressions, but only if it does not make the program difficult to
          read.</p>
      </li>
    </ul>
  </p>
  <exercise label="program_dvlmt_1">
    <statement>
      <p>When writing the implementation for a function, a good place to
        start is __________.</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>combining the parameters</p>
        </statement>
        <feedback>
          <p>Unless the function requires you to do so, then this is unnecessary.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>printing out the parameters</p>
        </statement>
        <feedback>
          <p>If you don't know the values of the parameters, this could be useful, but there is a
            better answer.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>returning something</p>
        </statement>
        <feedback>
          <p>This is called placekeeping. You don't have to return the correct answer, but you do
            need to return the correct data type.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>debugging</p>
        </statement>
        <feedback>
          <p>You don't need to debug until after you've written the function.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="program_dvlmt_2">
    <statement>
      <p>Which of the following is <term>not</term> a key aspect of the incremental development
        process?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Use temporary variables to hold intermediate values so you can output and check them.</p>
        </statement>
        <feedback>
          <p>Temporary variables are very useful in understanding what is happening at each step.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Start with a working program and make small, incremental changes. That way you know
            exactly where the error is if you have one.</p>
        </statement>
        <feedback>
          <p>This is the definition of incremental development.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Writing a program from start to finish, and then debugging at the end in order to
            understand all of the errors at once.</p>
        </statement>
        <feedback>
          <p>Incremental development uses step by step debugging in order to avoid the difficulty
            this would present.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Once the program is working, you might want to consolidate some statements into
            compound expressions, or remove them entirely.</p>
        </statement>
        <feedback>
          <p>This is good practice, as long as it doesn't make the program difficult to read.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="program_dvlmt_3">
    <statement>
      <p>The print statements in the distance function will be removed after testing. What is this
        called, and what is its purpose?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

double distance(double x1, double y1, double x2, double y2) {
  double dx = x2 - x1;
  double dy = y2 - y1;
  cout &lt;&lt; "dx is " &lt;&lt; dx &lt;&lt; endl;
  cout &lt;&lt; "dy is " &lt;&lt; dy &lt;&lt; endl;
  return 0.0;
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>scaffolding - allows the function to compile and return something</p>
        </statement>
        <feedback>
          <p>This is not the correct definition of scaffolding.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>placekeeping - allows the function to compile and return something</p>
        </statement>
        <feedback>
          <p>This is the correct definition of placekeeping but is not the correct answer.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>scaffolding - used to test values of temporary variables, later removed</p>
        </statement>
        <feedback>
          <p>Printing out the values allows you to observe whether the function is working or not.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>placekeeping - used to test values of temporary variables, later removed</p>
        </statement>
        <feedback>
          <p>This is not the correct definition of placekeeping.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>