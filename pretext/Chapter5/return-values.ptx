<?xml version="1.0"?>
<section xml:id="chapter5_return-values">
  <title>Return Values</title>
  <p>Some of the built-in functions we have used, like the math functions,
    have produced results. That is, the effect of calling the function is to
    generate a new value, which we usually assign to a variable or use as
    part of an expression. For example:</p>
  <program>double e = exp(1.0);
double height = radius * sin(angle);</program>
  <p>But so far all the functions we have written have been <c>void</c> functions; that is, functions
    that return no value. When you call a <c>void</c> function, it is typically on a line by itself,
    with no assignment:</p>
  <program>nLines(3);
countdown(n-1);</program>
  <p>In this chapter, we are going to write functions that return things, which I will refer to as <term>
    fruitful</term> functions, for want of a better name. The first example is area, which takes a
    double as a parameter, and returns the area of a circle with the given radius:</p>
  <program>double area(double radius) {
  double pi = acos(-1.0);
  double area = pi * radius * radius;
  return area;
}</program>
  <p>The first thing you should notice is that the beginning of the function definition is
    different. Instead of <c>void</c>, which indicates a <c>void</c> function, we see <c>double</c>, which
    indicates that the return value from this function will have type <c>double</c>.</p>
  <note>
    <p>Functions can have any return type in C++. The return type is always
      specified before the name of the function.</p>
  </note>
  <p>Also, notice that the last line is an alternate form of the return statement that includes a
    return value. This statement means, <q>return
      immediately from this function and use the following expression as a
      return value.</q> The expression you provide can be arbitrarily complicated, so we could have
    written this function more concisely:</p>
  <program>double area(double radius) {
  return acos(-1.0) * radius * radius;
}</program>
  <p>On the other hand, <term>temporary</term> variables like area often make debugging easier. In
    either case, the type of the expression in the return statement must match the return type of
    the function. In other words, when you declare that the return type is <c>double</c>, you are making a
    promise that this function will eventually produce a <c>double</c>. If you try to return with no
    expression, or an expression with the wrong type, the compiler will take you to task.</p>
  <p>Sometimes it is useful to have multiple return statements, one in each
    branch of a conditional:</p>
  <program>double absoluteValue(double x) {
  if (x &lt; 0) {
    return -x;
  }
  else {
    return x;
  }
}</program>
  <p>Since these returns statements are in an alternative conditional, only
    one will be executed. Although it is legal to have more than one return
    statement in a function, you should keep in mind that as soon as one is
    executed, the function terminates without executing any subsequent
    statements.</p>
  <warning>
    <p>If you put return statements inside of a chain of conditionals, then you have to guarantee
      that <em>every possible path</em> through the program hits a return statement. If you forget,
      your code will have errors.</p>
  </warning>
  <listing label="return_vals_AC_1">
    <caption>
      Notice that there are two return statements in this code.
        What if we pass zero as an argument, and neither conditional
        returns true?
    </caption>
    <program xml:id="return_vals_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

double absoluteValue(double x) {
    if (x < 0) {
        return -x;
    }
    else if (x > 0) {
        return x;
    }                          // WRONG!!
}

int main() {
    cout << absoluteValue(0);
    return 0;
}
        ]]></code>
    </program>
  </listing>
  <p>This program is not correct because if x happens to be 0, then neither condition will be true
    and the function will end without hitting a return statement. Unfortunately, many C++ compilers
    do not catch this error. As a result, the program may compile and run, but the return value when <c>x == 0</c>
    could be anything, and will probably be different in different environments.</p>
  <p>By now you are probably sick of seeing compiler errors, but as you gain more experience, you
    will realize that the only thing worse than getting a compiler error is <em>not</em> getting a
    compiler error when your program is wrong.</p>
  <p>Here's the kind of thing that's likely to happen: you test <c>absoluteValue</c> with several values of x and
    it seems to work correctly. Then you give your program to someone else and they run it in
    another environment. It fails in some mysterious way, and it takes days of debugging to discover
    that the problem is an incorrect implementation of <c>absoluteValue</c>. If only the compiler had warned you!</p>
  <p>From now on, if the compiler points out an error in your program, you should not blame the
    compiler. Rather, you should <em>thank</em> the compiler for finding your error and sparing you
    days of debugging. Some compilers have an option that tells them to be extra strict and report
    all the errors they can find. You should turn this option on all the time. The implementation
    below would fix the error in the code.</p>
  <listing label="return_vals_AC_2">
    <caption>
      This code fixes the error in the previoius implementation of
        absoluteValue. If we pass 0 as an argument, the function will
        return 0. Thus, every route through the conditonal is satisfied.
    </caption>
    <program xml:id="return_vals_AC_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

double absoluteValue(double x) {
    if (x < 0) {
        return -x;
    }
    else if (x > 0) {
        return x;
    }
    return x;                      // WRONG!!
}

int main() {
   cout << absoluteValue(0);
   return 0;
}
        ]]></code>
    </program>
  </listing>
  <p>As an aside, you should know that there is a function in the math
    library called fabs that calculates the absolute value of a
    double&#x2014;correctly.</p>
  <exercise label="return_vals_1">
    <statement>
      <p>What should the return type of the below function be?</p>
      <program>________ weather(int temp) {
 string outside = "";
 if (temp &lt; 50) {
   outside = "cold";
 }
 else {
   outside = "warm"
 }
 return outside;
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>double</p>
        </statement>
        <feedback>
          <p>There are no doubles used in this function.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>int</p>
        </statement>
        <feedback>
          <p>The parameter does not have to be the same type as the return type.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>string</p>
        </statement>
        <feedback>
          <p>The variable "outside" is being returned, which is of string type.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>char</p>
        </statement>
        <feedback>
          <p>The return type is actually a string of chars.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="return_vals_2">
    <statement>
      <p>What will print?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

int timesTwo(int x) {
  int y = x;
  return y;
  y = y * 2;
}

int main() {
  int i = 2;
  cout &lt;&lt; timesTwo(i);
  return 0;
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>The function returns y before reaching the line where y is doubled.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>Because the return statement in the timesTwo function returns prior to the modification
            of y, 2 is returned and then printed.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>16</p>
        </statement>
        <feedback>
          <p>The function returns y before reaching the line where y is doubled.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The function does not return.</p>
        </statement>
        <feedback>
          <p>The function has an integer return type, so it WILL return an int.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="dead_code_printing_1">
    <statement>
      <p>What will print?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

double ticket_price(int age) {
   if(age&lt;5) {
       return 5.50;
       cout&lt;&lt;" You get a child discount yay!"&lt;&lt;endl;
   }

   else{
       return 9.50;
       cout&lt;&lt;" Sorry you have to pay full price."&lt;&lt;endl;
   }
   return 0.0; //to avoid compiler error
}

int main() {
  int years = 5;
  double price = ticket_price(5);
  return 0;
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>You get a child discount yay!</p>
        </statement>
        <feedback>
          <p>The function returns goes to the else block as age is not less than 5.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Sorry you have to pay full price.</p>
        </statement>
        <feedback>
          <p>The function returns 9.50 before reaching the output statment.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>nothing gets printed</p>
        </statement>
        <feedback>
          <p>The return statement is encountered before the cout statement.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>9.50</p>
        </statement>
        <feedback>
          <p>Although 9.50 is returned there is no printing of this value.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="return_vals_3">
    <statement>
      <p>A variable that exists only inside a function, is called a <var/> variable. </p>
    </statement>
    <setup>
      <var case="insensitive">
        <condition string="^\s*temporary\s*$">
          <feedback>
            <p>Temporary variables are useful for calculating and returning values inside functions
              since they are short-lived.</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Try again!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
</section>