<?xml version="1.0"?>
<section xml:id="chapter5_coding-practice-1">
  <title>Coding Practice</title>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter5', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_5_AC_2q">
        <statement>
          <p>A binary number is one that is expressed in the base-2 numeral system.
                    Write a function <c>convertToBinary</c> which takes a <c>decimal</c> as
                    a parameter. <c>convertToBinary</c> takes the number in decimal, converts
                    it into a binary number, and returns the binary number. Test your function
                    in <c>main</c>. Run and test your code! Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_5_AC_2q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int convertToBinary(int decimal) {
    // Write your implementation here.
}
        ]]></code>
          <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("convertToBinary function") {
    REQUIRE(convertToBinary (1) == 1);
    REQUIRE(convertToBinary (5) == 101);
    REQUIRE(convertToBinary (16) == 10000);
    REQUIRE(convertToBinary (31) == 11111);
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter5', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_5_AC_2q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>A binary number is one that is expressed in the base-2 numeral system.
                    Write a function <c>convertToBinary</c> which takes a <c>decimal</c> as
                    a parameter. <c>convertToBinary</c> takes the number in decimal, converts
                    it into a binary number, and returns the binary number. Test your function
                    in <c>main</c>. Use the lines to construct the code, then go back to complete
                    the Activecode.</p>
        </statement>
        <blocks>
          <block order="2">
            <cline>int convertToBinary(int decimal) {</cline>
          </block>
          <block order="5">
            <choice correct="yes">
              <cline>    if (decimal == 0) {</cline>
              <cline>        return 0;</cline>
              <cline>    }</cline>
            </choice>
            <choice>
              <cline>    if (decimal &gt;= 0) { </cline>
              <cline>        return 0;</cline>
              <cline>    }</cline>
            </choice>
          </block>
          <block order="4">
            <cline>    else {</cline>
            <cline>        return (decimal % 2 + 10 * convertToBinary(decimal / 2));</cline>
            <cline>    }</cline>
          </block>
          <block order="1">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter5', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_5_AC_4q">
        <statement>
          <p>The astronomical start and end dates of the four seasons are based on the position of
                    the Earth relative to the Sun. As a result, it changes every year and can be difficult to
                    remember. However, the meteorological start and end dates are based on the Gregorian calendar
                    and is easier to remember. Spring starts on March 1, summer starts on June 1, fall starts on
                    September 1, and winter starts on December 1. Write a function called <c>birthSeason</c>, which takes
                    two parameters, <c>month</c> and <c>day</c>. <c>birthSeason</c> calculates which season
                    the birthday falls in according to the meteorological start and returns a <c>string</c> with the correct season.
                    For example, <c>birthSeason (7, 5)</c> returns <q>summer</q> since July 5 is in the summer. Check the hint below for help with the construction of the code. Run and test your code!</p>
        </statement>
        <program xml:id="cp_5_AC_4q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

string birthSeason(int month, int day) {
    // Write your implementation here.
}
        ]]></code>
          <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("birthSeason function: spring") {
    REQUIRE(birthSeason (5, 3) == "spring");
    REQUIRE(birthSeason (3, 1) == "spring");
    REQUIRE(birthSeason (5, 31) == "spring");
}

TEST_CASE("birthSeason function: summer") {
    REQUIRE(birthSeason (7, 5) == "summer");
    REQUIRE(birthSeason (6, 1) == "summer");
    REQUIRE(birthSeason (8, 31) == "summer");
}

TEST_CASE("birthSeason function: fall") {
    REQUIRE(birthSeason (11, 24) == "fall");
    REQUIRE(birthSeason (9, 1) == "fall");
    REQUIRE(birthSeason (11, 30) == "fall");
}

TEST_CASE("birthSeason function: winter") {
    REQUIRE(birthSeason (2, 20) == "winter");
    REQUIRE(birthSeason (12, 1) == "winter");
    REQUIRE(birthSeason (2, 28) == "winter");
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter5', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_5_AC_4q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>The astronomical start and end dates of the four seasons are based on the position of
                    the Earth relative to the Sun. As a result, it changes every year and can be difficult to
                    remember. However, the meteorological start and end dates are based on the Gregorian calendar
                    and is easier to remember. Spring starts on March 1, summer starts on June 1, fall starts on
                    September 1, and winter starts on December 1. Write a function called <c>birthSeason</c>, which takes
                    two parameters, <c>month</c> and <c>day</c>. <c>birthSeason</c> calculates which season
                    the birthday falls in according to the meteorological start and returns a <c>string</c> with the correct season.
                    For example, <c>birthSeason (7, 5)</c> returns <q>summer</q> since July 5 is in the summer. Use the lines to construct
                    the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="5">
            <cline>string birthSeason(int month, int day) {</cline>
          </block>
          <block order="4">
            <cline><![CDATA[    if (month >= 3 && month < 6) {]]></cline>
            <cline>        return "spring";</cline>
            <cline>    }</cline>
          </block>
          <block order="1">
            <cline><![CDATA[    if (month >= 6 && month < 9) {]]></cline>
            <cline>        return "summer";</cline>
            <cline>    }</cline>
          </block>
          <block order="6">
            <cline><![CDATA[    if (month >= 9 && month < 12) {]]></cline>
            <cline>        return "fall";</cline>
            <cline>    }</cline>
          </block>
          <block order="2">
            <cline><![CDATA[    if (month == 12 || month < 3) {]]></cline>
            <cline>        return "winter";</cline>
            <cline>    }</cline>
          </block>
          <block order="3">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter5', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_5_AC_6q">
        <statement>
          <p>A number is a common factor of two other numbers if it divides evenly into both of the
                    other numbers. For example, 2 is a common factor of 4 and 18, because 2 goes evenly into
                    4 and 18. Write the function <c>isCommonFactor</c>, which takes three parameters,
                    <c>num1</c>, <c>num2</c>, and <c>factor</c>. <c>isCommonFactor</c> returns <c>true</c> if <c>factor</c> is a
                    factor of both <c>num1</c> and <c>num2</c>, and returns <c>false</c> otherwise. Run and test your code!
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_5_AC_6q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

bool isCommonFactor(int num1, int num2, int factor) {
    // Write your implementation here.
}
        ]]></code>
          <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("isCommonFactor function: true cases") {
    REQUIRE(isCommonFactor (24, 8, 4) == 1);
    REQUIRE(isCommonFactor (75, 20, 5) == 1);
}

TEST_CASE("isCommonFactor function: false cases") {
    REQUIRE(isCommonFactor (132, 42, 11) == 0);
    REQUIRE(isCommonFactor (74, 23, 3) == 0);
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter5', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_5_AC_6q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>A number is a common factor of two other numbers if it divides evenly into both of the
                    other numbers. For example, 2 is a common factor of 4 and 18, because 2 goes evenly into
                    4 and 18. Write the function <c>isCommonFactor</c>, which takes three parameters,
                    <c>num1</c>, <c>num2</c>, and <c>factor</c>. <c>isCommonFactor</c> returns <c>true</c> if <c>factor</c> is a
                    factor of both <c>num1</c> and <c>num2</c>, and returns <c>false</c> otherwise. Run and test your code!
                    Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="5">
            <cline>bool isCommonFactor(int num1, int num2, int factor) {</cline>
          </block>
          <block order="6">
            <choice correct="yes">
              <cline>    if (num1 % factor == 0 &amp;&amp; num2 % factor == 0) {</cline>
            </choice>
            <choice>
              <cline>    if (num1 % factor == 0 || num2 % factor == 0) { </cline>
            </choice>
          </block>
          <block order="3">
            <cline>        return true;</cline>
          </block>
          <block order="1">
            <cline>    else {</cline>
            <cline>        return false;</cline>
            <cline>    }</cline>
          </block>
          <block order="2">
            <cline>    }</cline>
          </block>
          <block order="7">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter5', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_5_AC_8q">
        <statement>
          <p>In the enchanted Mushroom Forest, there are many different types of
                    mushrooms as far as the eye can see. Most of these mushrooms
                    can make delicious stews and dishes, but some of them are poisonous.
                    Write the function <c>isPoisonous</c>, which takes an <c>char size</c>,
                    <c>int numSpots</c>, and <c>bool isRed</c> as parameters. If a mushroom is large
                    (&#x2018;L') and has fewer than 3 spots, it is poisonous. If a mushroom is small (&#x2018;S')
                    and is red, it is poisonous. If a mushroom has fewer than 3 spots or is not red,
                    it is poisonous. Otherwise, it is not. <c>isPoisonous</c> should return <c>true</c> if
                    the mushroom is poisonous and <c>false</c> otherwise. Run and test your code!
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_5_AC_8q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

bool isPoisonous(char size, int numSpots, bool isRed) {
    // Write your implementation here.
}
        ]]></code>
          <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("isPoisonous function: true cases") {
    REQUIRE(isPoisonous ('S', 10, 0) == 1);
    REQUIRE(isPoisonous ('S', 10, 0) == 1);
    REQUIRE(isPoisonous ('L', 1, 1) == 1);
}

TEST_CASE("isPoisonous function: false cases") {
    REQUIRE(isPoisonous ('L', 4, 1) == 0);
    REQUIRE(isPoisonous ('L', 9, 1) == 0);
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter5', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_5_AC_8q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>In the enchanted Mushroom Forest, there are many different types of
                    mushrooms as far as the eye can see. Most of these mushrooms
                    can make delicious stews and dishes, but some of them are poisonous.
                    Write the function <c>isPoisonous</c>, which takes an <c>char size</c>,
                    <c>int numSpots</c>, and <c>bool isRed</c> as parameters. If a mushroom is large
                    (&#x2018;L') and has fewer than 3 spots, it is poisonous. If a mushroom is small (&#x2018;S')
                    and is red, it is poisonous. If a mushroom has fewer than 3 spots or is not red,
                    it is poisonous. Otherwise, it is not. <c>isPoisonous</c> should return <c>true</c> if
                    the mushroom is poisonous and <c>false</c> otherwise. Use the lines to construct the
                    code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="4">
            <cline>bool isPoisonous(char size, int numSpots, bool isRed) {</cline>
          </block>
          <block order="8">
            <choice correct="yes">
              <cline><![CDATA[    if (size == 'L' && numSpots < 3) {]]></cline>
              <cline>        return true;</cline>
              <cline>    }</cline>
            </choice>
            <choice>
              <cline><![CDATA[    if (size == 'L' || numSpots < 3) { ]]></cline>
              <cline>        return true;</cline>
              <cline>    }</cline>
            </choice>
          </block>
          <block order="7">
            <cline>    if (size == 'S' &amp;&amp; isRed == true) {</cline>
            <cline>        return true;</cline>
            <cline>    }</cline>
          </block>
          <block order="2" correct="no">
            <cline>    if (size == 'S' || isRed == false) { </cline>
            <cline>        return true;</cline>
            <cline>    }</cline>
          </block>
          <block order="6">
            <cline><![CDATA[    if (numSpots < 3 || isRed == false) {]]></cline>
            <cline>        return true;</cline>
            <cline>    }</cline>
          </block>
          <block order="1">
            <cline>    else {</cline>
            <cline>        return false;</cline>
            <cline>    }</cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter5', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_5_AC_10q">
        <statement>
          <p>Write the function <c>digitSum</c> which takes an <c>int num</c> as a parameter
                    and returns the sum of all its digits. For example, <c>digitSum (1423)</c>
                    would return 10. Use recursion. Run and test your code! Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_5_AC_10q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

int digitSum(int num) {
    // Write your implementation here.
}
        ]]></code>
          <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("digitSum function") {
    REQUIRE(digitSum (123) == 6);
    REQUIRE(digitSum (8739) == 27);
    REQUIRE(digitSum (440) == 8);
    REQUIRE(digitSum (2) == 2);
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter5', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_5_AC_10q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Write the function <c>digitSum</c> which takes an <c>int num</c> as a parameter
                    and returns the sum of all its digits. For example, <c>digitSum (1423)</c>
                    would return 10. Use recursion. Use the lines to construct the code, then
                    go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="4">
            <cline>int digitSum(int num) {</cline>
          </block>
          <block order="5">
            <choice correct="yes">
              <cline>    if (num == 0) {</cline>
              <cline>        return 0;</cline>
              <cline>    }</cline>
            </choice>
            <choice>
              <cline>    if (num == 0) { </cline>
              <cline>        return num;</cline>
              <cline>    }</cline>
            </choice>
          </block>
          <block order="1">
            <choice correct="yes">
              <cline>    return (num % 10 + digitSum(num / 10));</cline>
            </choice>
            <choice>
              <cline>    return (num % 10 + digitSum(num)); </cline>
            </choice>
          </block>
          <block order="3" correct="no">
            <cline>    return (digitsum(num) % 10); </cline>
          </block>
          <block order="2">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
</section>
