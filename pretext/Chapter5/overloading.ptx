<?xml version="1.0"?>
<section xml:id="chapter5_overloading">
  <title>Overloading</title>
  <p>In the previous section you might have noticed that <c>fred</c> and <c>area</c> perform similar
    functions&#x2014;finding the area of a circle&#x2014;but take different parameters. For <c>area</c>,
    we have to provide the radius; for <c>fred</c>, we provide two points.</p>
  <p>If two functions do the same thing, it is natural to give them the same name. In other words,
    it would make more sense if <c>fred</c> were called <c>area</c>.</p>
  <p>Having more than one function with the same name, which is called <term>overloading</term>, is
    legal in C++ <em>as long as each version takes
      different parameters</em>. So we can go ahead and rename <c>fred</c>:</p>
  <program>double area(double xc, double yc, double xp, double yp) {
  return area(distance(xc, yc, xp, yp));
}</program>
  <p>This looks like a recursive function, but it is not. Actually, this version of <c>area</c> is
    calling the other version. When you call an overloaded function, C++ knows which version you
    want by looking at the arguments that you provide. If you write:</p>
  <program>
double x = area(3.0);
</program>
  <p>C++ goes looking for a function named <c>area</c> that takes a double as an argument, and so it
    uses the first version. If you write</p>
  <program>
double x = area(1.0, 2.0, 4.0, 6.0);
</program>
  <p>C++ uses the second version of <c>area</c>.</p>
  <p>Many of the built-in C++ commands are overloaded, meaning that there are
    different versions that accept different numbers or types of parameters.</p>
  <warning>
    <p>Although overloading is a useful feature, it should be used with
      caution. You might get yourself nicely confused if you are trying to
      debug one version of a function while accidentally calling a different
      one.</p>
  </warning>
  <p>Actually, that reminds me of one of the cardinal rules of debugging: <term>make sure that the
    version of the program you are looking at is the
      version of the program that is running!</term> Some time you may find yourself making one
    change after another in your program, and seeing the same thing every time you run it. This is a
    warning sign that for one reason or another you are not running the version of the program you
    think you are. To check, stick in an output statement (it doesn't matter what it says) and make
    sure the behavior of the program changes accordingly.</p>
  <exercise label="overloading_1">
    <statement>
      <p>Which of the following function declarations would be legal if it was added to the program
        below?</p>
      <program>double price(int x, int y);
double price(double a, int b, string c);</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>double price(int a, int b);</p>
        </statement>
        <feedback>
          <p>This function has the same parameters as the first function below.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>double price(int a, string b, string c);</p>
        </statement>
        <feedback>
          <p>While this function has the same number of parameters as the second function, it takes
            different types of parameters.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>double price(double x, int y, string z);</p>
        </statement>
        <feedback>
          <p>This function has the same parameters as the second function below.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>all of the above</p>
        </statement>
        <feedback>
          <p>Take another look at the numbers and types of parameters.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="overloading_2">
    <statement>
      <p>What are the following functions an example of?</p>
      <program>double price(int x, int y);
double price(double a, int b, string c);</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>recursion</p>
        </statement>
        <feedback>
          <p>Recursion is when a function calls itself.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>debugging</p>
        </statement>
        <feedback>
          <p>Debugging is what we do after implementing a function.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>overloading</p>
        </statement>
        <feedback>
          <p>Overloading is when we have two functions with the same name that take different
            parameters.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>overriding</p>
        </statement>
        <feedback>
          <p>Overriding is when an inherited class uses a different method than the base class...
            more on this later!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="overloading_3">
    <statement>
      <p>Suppose you have written the following functions for baking cake. Is there anything wrong
        with how <c>bakeCake</c> was overloaded?</p>
      <program>bool bakeCake(string cakeMix, int eggs, double milk, bool birthday);
bool bakeCake(string cakeMix, int eggs, double water, bool holiday);</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Yes. Some of the parameters have the same names, so overloading is NOT legal.</p>
        </statement>
        <feedback>
          <p>Variable names don't matter in overloading.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Yes. The parameters are the same types in the same order, so overloading is NOT legal.</p>
        </statement>
        <feedback>
          <p>If the parameters are the same types in the same order, overloading is NOT legal.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>No. Some of the parameters have different names, so overloading is legal.</p>
        </statement>
        <feedback>
          <p>Variable names don't matter in overloading.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>No. The parameters are the same types in the same order, so overloading is legal.</p>
        </statement>
        <feedback>
          <p>If the parameters are the same types in the same order, overloading is NOT legal.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="overloading_4">
    <statement>
      <p>Would adding both of the following function declarations to a program lead to an error?</p>
      <program>int stockPrice(string currency, int previous_price, double interest_rate );
double stockPrice(string currency, int older_price, double interest_rate );</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Yes. Two functions with the same name have different return types which is not
            permitted.</p>
        </statement>
        <feedback>
          <p>Return types are not considered in overloads. Any return type is permitted in all
            circumstances.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Yes. The parameters are the same types in the same order, so overloading is NOT legal.</p>
        </statement>
        <feedback>
          <p>If the parameters are the same types in the same order, overloading is NOT legal.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>No. One of the parameters has a different name, so overloading is legal.</p>
        </statement>
        <feedback>
          <p>Variable names don't matter in overloading.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>No. One function returns an integer while the other returns a double, so overloading is
            legal.</p>
        </statement>
        <feedback>
          <p>Return type is not considered in resolving function overloads.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>