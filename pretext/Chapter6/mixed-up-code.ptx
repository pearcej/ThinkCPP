<?xml version="1.0"?>
<exercises xml:id="chapter6_mixed-up-code-exercises">
  <title>Mixed-Up Code Exercises</title>
  <p>Answer the following <term>Mixed-Up Code</term> or <term>Activecode</term> questions to assess
    what you have learned in this chapter.</p>
  <exercise label="mucp_6_1"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>The program below should print out the even numbers between 20 and 40, inclusive,
        but the code is mixed up and contains extra blocks. Put the necessary blocks
        in the correct order.</p>
    </statement>
    <blocks>
      <block order="2">
        <choice correct="yes">
          <cline>int main() {</cline>
        </choice>
        <choice>
          <cline>main(int) {                         </cline>
        </choice>
      </block>
      <block order="8">
        <cline>   int n = 20;</cline>
      </block>
      <block order="7"
             correct="no">
        <cline>   int n = 0; </cline>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline><![CDATA[   while (n <= 40) {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[   while (n < 40) {                        ]]></cline>
        </choice>
      </block>
      <block order="12">
        <cline><![CDATA[      cout << n << endl;]]></cline>
      </block>
      <block order="3">
        <cline>      n = n + 2;</cline>
      </block>
      <block order="4"
             correct="no">
        <cline>      n++;                 </cline>
      </block>
      <block order="11"
             correct="no">
        <cline>      n = n * 2;                 </cline>
      </block>
      <block order="1">
        <cline>   }</cline>
      </block>
      <block order="5">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_6_2"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>The program below should count down from 100 to 0 in decrements of
        10 but the code is mixed up and contains extra blocks. Put the necessary blocks
        in the correct order.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>int main() {</cline>
      </block>
      <block order="2">
        <cline>   int n = 100;</cline>
      </block>
      <block order="3"
             correct="no">
        <cline>   int n = 10; </cline>
      </block>
      <block order="1">
        <cline>   while (n &gt;= 0) {</cline>
      </block>
      <block order="7"
             correct="no">
        <cline>   while (n &lt; 0) { </cline>
      </block>
      <block order="11"
             correct="no">
        <cline>   while (n &gt; 0) { </cline>
      </block>
      <block order="10">
        <cline><![CDATA[      cout << n << endl;]]></cline>
      </block>
      <block order="5">
        <cline>      n -= 10;</cline>
      </block>
      <block order="8"
             correct="no">
        <cline>      n += 10;                 </cline>
      </block>
      <block order="9">
        <cline>   }</cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_6_3"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>The program below should find the sum of the first 10 natural numbers,
        but the code is mixed up and contains extra blocks. Put the necessary blocks
        in the correct order.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>int main() {</cline>
      </block>
      <block order="9">
        <cline>   int n = 1;</cline>
      </block>
      <block order="10"
             correct="no">
        <cline>   int n = 10; </cline>
      </block>
      <block order="8">
        <cline>   int sum = 0;</cline>
      </block>
      <block order="2"
             correct="no">
        <cline>   int sum = n;  </cline>
      </block>
      <block order="11">
        <cline><![CDATA[   while (n <= 10) {]]></cline>
      </block>
      <block order="5"
             correct="no">
        <cline><![CDATA[   while (n < 100) {  ]]></cline>
      </block>
      <block order="3"
             correct="no">
        <cline><![CDATA[   while (n <= 9) {  ]]></cline>
      </block>
      <block order="6"
             correct="no">
        <cline><![CDATA[      cout << n << endl;  ]]></cline>
      </block>
      <block order="1">
        <cline>      sum = sum + n;</cline>
      </block>
      <block order="13">
        <cline>      n++;</cline>
      </block>
      <block order="4">
        <cline>   }</cline>
      </block>
      <block order="12">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_6_4"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's write the code for the <c>repeatHello</c> function. <c>repeatHello</c> should be a <c>void</c> function that
        takes no arguments and uses a <c>while</c> loop to print out <q>hello</q> three times.</p>
    </statement>
    <blocks>
      <block order="4">
        <choice correct="yes">
          <cline>void repeatHello() {</cline>
        </choice>
        <choice>
          <cline>repeatHello() {                          </cline>
        </choice>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline>   int n = 0;</cline>
        </choice>
        <choice>
          <cline>   int n = 0                              </cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>   while (n &lt; 3) {</cline>
        </choice>
        <choice>
          <cline>   while (n &gt; 3) {                        </cline>
        </choice>
      </block>
      <block order="7">
        <cline><![CDATA[      cout << "hello" << endl;]]></cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>      n++;</cline>
          <cline>   }</cline>
        </choice>
        <choice>
          <cline>      --n;                                </cline>
          <cline>   }</cline>
        </choice>
      </block>
      <block order="6">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_6_5"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Now let's generalize the <c>repeatHello</c> function so that it repeats a given string three times.
        Let's write the code for the <c>repeatString</c> function, which takes input as a parameter and uses a <c>while</c>
        loop to print out the string three times.</p>
    </statement>
    <blocks>
      <block order="6">
        <choice correct="yes">
          <cline>void repeatString(string input) {</cline>
        </choice>
        <choice>
          <cline>void repeatString() {                         </cline>
        </choice>
      </block>
      <block order="9">
        <cline>   int n = 0;</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>   while (n &lt; 3) {</cline>
        </choice>
        <choice>
          <cline>   while (3 &gt; n) {                             </cline>
        </choice>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline><![CDATA[      cout << input << endl;]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[      cout << string << endl;                  ]]></cline>
        </choice>
      </block>
      <block order="3">
        <cline>      n++;</cline>
        <cline>   }</cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_6_6"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>We can further generalize <c>repeatString</c> so that it repeats a given string a given number of
        times. Let's write the code for the new <c>repeatString</c> function, which takes <c>input</c> and <c>x</c> as
        parameters and uses a <c>while</c> loop to print out the string <c>x</c> number of times.</p>
    </statement>
    <blocks>
      <block order="7">
        <choice correct="yes">
          <cline>void repeatString(string input, int x) {</cline>
        </choice>
        <choice>
          <cline>void repeatString(string input, string x) {                         </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>   int n = 0;</cline>
        </choice>
        <choice>
          <cline>   int n = x;                       </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>   while (n &lt; x) {</cline>
        </choice>
        <choice>
          <cline><![CDATA[   while (x < n) {                  ]]></cline>
        </choice>
      </block>
      <block order="9">
        <cline><![CDATA[      cout << input << endl;]]></cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>      n = n + 1;</cline>
          <cline>   }</cline>
        </choice>
        <choice>
          <cline>      x++;                          </cline>
          <cline>   }</cline>
        </choice>
      </block>
      <block order="8">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_6_7"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>On the last day of every year, we count down the seconds before the new year arrives. Write
        the function <c>newYearCountdown</c>, which prints out a countdown from 10 and then prints out <q>Happy
          New Year!</q>.</p>
    </statement>
    <blocks>
      <block order="10">
        <choice correct="yes">
          <cline>void newYearCountdown() {</cline>
        </choice>
        <choice>
          <cline>void newYearCountdown(string input) {                         </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>   int n = 10;</cline>
        </choice>
        <choice>
          <cline>   int n = 0;                       </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>   while (n &gt; 0) {</cline>
        </choice>
        <choice>
          <cline>   while (n != 10) {                        </cline>
        </choice>
      </block>
      <block order="4">
        <cline><![CDATA[      cout << n << " ";]]></cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>      n--;</cline>
          <cline>   }</cline>
        </choice>
        <choice>
          <cline>      n++;                          </cline>
          <cline>   }</cline>
        </choice>
      </block>
      <block order="5">
        <cline><![CDATA[   cout << "Happy New Year!" << endl;]]></cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_6_8"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Help Goku reach power levels of over 9000! Write the function powerUp which takes
        powerLevel as a parameter. powerUp checks to see if powerLevel is over 9000. If it isn't, it
        repeatedly prints <q>More power!</q> and increments powerLevel by 1000 until powerLevel is
        over 9000. Then powerUp prints <q>It's over 9000!</q>. Put the necessary blocks in the
        correct order.</p>
    </statement>
    <blocks>
      <block order="11">
        <choice correct="yes">
          <cline>void powerUp(int powerLevel) {</cline>
        </choice>
        <choice>
          <cline>void powerUp() {                         </cline>
        </choice>
      </block>
      <block order="6"
             correct="no">
        <cline>   int n = 0;  </cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline><![CDATA[   while (powerLevel < 9000) {]]></cline>
        </choice>
        <choice>
          <cline>   while (powerLevel &gt; 9000) {  </cline>
        </choice>
      </block>
      <block order="5">
        <cline><![CDATA[      cout << "More power!" << endl;]]></cline>
      </block>
      <block order="12">
        <choice correct="yes">
          <cline>      powerLevel = powerLevel + 1000;</cline>
        </choice>
        <choice>
          <cline>      powerLevel++;  </cline>
        </choice>
      </block>
      <block order="4"
             correct="no">
        <cline>      n++;  </cline>
      </block>
      <block order="8">
        <cline>   }</cline>
      </block>
      <block order="3"
             correct="no">
        <cline><![CDATA[   if (powerLevel < 9000) {  ]]></cline>
      </block>
      <block order="1">
        <cline><![CDATA[   cout << "It's over 9000!" << endl;]]></cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_6_9"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Write the function summation which takes two
        parameters, start and end. summation adds
        all the integers from start to end, inclusive, together and returns
        the sum. Put the necessary blocks in the correct order.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>int summation(int start, int end) {</cline>
      </block>
      <block order="8"
             correct="no">
        <cline>void summation(int start, int end) {  </cline>
      </block>
      <block order="3"
             correct="no">
        <cline>int summation() {  </cline>
      </block>
      <block order="6">
        <cline>   int n = start;</cline>
      </block>
      <block order="4">
        <cline>   int sum = 0;</cline>
      </block>
      <block order="12"
             correct="no">
        <cline>   int sum = start;  </cline>
      </block>
      <block order="11">
        <choice correct="yes">
          <cline><![CDATA[   while (n <= end) {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[   while (n < end) {  ]]></cline>
        </choice>
      </block>
      <block order="10">
        <cline>      sum = sum + n;</cline>
      </block>
      <block order="14">
        <cline>      n++;</cline>
      </block>
      <block order="1">
        <cline>   }</cline>
      </block>
      <block order="7">
        <cline>   return sum;</cline>
      </block>
      <block order="13"
             correct="no">
        <cline>   return n;  </cline>
      </block>
      <block order="9">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_6_10"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Write the function reverseNumber which takes num
        as a parameter and returns num but with its digits reversed.
        For example, reverseNumber (1324) returns 4231.
        Put the necessary blocks in the correct order, with reverse
        declared first, then temp, and lastly remainder.</p>
    </statement>
    <blocks>
      <block order="9">
        <cline>int reverseNumber(int num) {</cline>
      </block>
      <block order="8"
             correct="no">
        <cline>void reverseNumber(int num) {  </cline>
      </block>
      <block order="10">
        <cline>   int reverse = 0;</cline>
      </block>
      <block order="13"
             correct="no">
        <cline>   int reverse = 0  </cline>
      </block>
      <block order="4">
        <cline>   int temp = num;</cline>
      </block>
      <block order="7">
        <cline>   int remainder = 0;</cline>
      </block>
      <block order="15"
             correct="no">
        <cline>   int remainder;  </cline>
      </block>
      <block order="5">
        <cline>   while (temp &gt; 0) {</cline>
      </block>
      <block order="11">
        <cline>      remainder = temp % 10;</cline>
      </block>
      <block order="2">
        <cline>      reverse = reverse * 10 + remainder;</cline>
      </block>
      <block order="3">
        <cline>      temp = temp / 10;</cline>
      </block>
      <block order="1">
        <cline>   }</cline>
      </block>
      <block order="12">
        <cline>   return reverse;</cline>
      </block>
      <block order="6"
             correct="no">
        <cline>   return temp;  </cline>
      </block>
      <block order="14">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</exercises>