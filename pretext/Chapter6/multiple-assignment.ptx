<?xml version="1.0"?>
<section xml:id="chapter6_multiple-assignment">
  <title>Multiple assignment</title>
  <p>I haven't said much about it, but it is legal in C++ to make more than
    one assignment to the same variable. The effect of the second assignment
    is to replace the old value of the variable with a new value.</p>
  <listing label="multiple_assignment_AC_1">
    <caption>
      This active code reassigns <c>fred</c> from 5 to 7 and prints both values out.
    </caption>
    <program xml:id="multiple_assignment_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int fred = 5;
    cout << fred;
    fred = 7;
    cout << fred;
    return 0;
}
        ]]></code>
    </program>
  </listing>
  <p>The output of this program is <c>57</c>, because the first time we print <c>fred</c> his value is 5,
    and the second time his value is 7.</p>
  <listing label="multiple_assignment_AC_2">
    <caption>
      This active code reassigns <c>fred</c> from 5 to 7 without printing out the initial value.
    </caption>
    <program xml:id="multiple_assignment_AC_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int fred = 5;
    fred = 7;
    cout << fred;
    return 0;
}
        ]]></code>
    </program>
  </listing>
  <p>However, if we do not print <c>fred</c> the first time, the output is only 7 because the value of <c>fred</c>
    is just 7 when it is printed.</p>
  <p>This kind of <term>multiple assignment</term> is the reason I described variables as a <em>
    container</em> for values. When you assign a value to a variable, you change the contents of the
    container, as shown in the figure:</p>
  <figure align="center">
    <image source="Chapter6/Images/6.1image.png"
           width="50%"
           alt="An assignment of 'fred = 7' changing the existing value of 'fred'."/>
  </figure>
  <p>When there are multiple assignments to a variable, it is especially important to distinguish
    between an assignment statement and a statement of equality. Because C++ uses the <c>=</c> symbol
    for assignment, it is tempting to interpret a statement like <c>a = b</c> as a statement of equality.
    It is not!</p>
  <warning>
    <p>An assignment statement uses a single <c>=</c> symbol. For example, <c>x = 3</c> assigns the value
      of 3 to the variable <c>x</c>. On the other hand, an equality statement uses two <c>=</c>
      symbols. For example, <c>x == 3</c> is a boolean that evaluates to true if <c>x</c> is equal to 3 and
      evaluates to false otherwise.</p>
  </warning>
  <p>First of all, equality is commutative, and assignment is not. For example, in mathematics if <m>a
    = 7</m> then <m>7 = a</m>. But in C++ the statement <c>a = 7;</c> is legal, and <c>7 = a;</c> is not.</p>
  <p>Furthermore, in mathematics, a statement of equality is true for all time. If <m>a = b</m> now,
    then <m>a</m> will always equal <m>b</m>. In C++, an assignment statement can make two variables
    equal, but they don't have to stay that way!</p>
  <program>int a = 5;
int b = a;     // a and b are now equal
a = 3;         // a and b are no longer equal</program>
  <p>The third line changes the value of <c>a</c> but it does not change the value of <c>b</c>, and so
    they are no longer equal. In many programming languages an alternate symbol is used for
    assignment, such as <c>&lt;-</c> or <c>:=</c>, in order to avoid confusion.</p>
  <p>Although multiple assignment is frequently useful, you should use it
    with caution. If the values of variables are changing constantly in
    different parts of the program, it can make the code difficult to read
    and debug.</p>
  <exercise label="multiple_assignment_1">
    <statement>
      <p>Match the expression to the statement that best describes it.</p>
    </statement>
    <feedback>
      <p>Try again!</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>4=a</premise>
        <response>Illegal</response>
      </match>
      <match order="2">
        <premise>a==b</premise>
        <response>Checking if a is equal to b</response>
      </match>
      <match order="3">
        <premise>a=b</premise>
        <response>Assigning a to the value of b</response>
      </match>
      <match order="4">
        <premise>a=4</premise>
        <response>Setting the value of a to 4</response>
      </match>
    </matches>
  </exercise>
  <exercise label="multiple_assignment_2">
    <statement>
      <p>What will print?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
  int x = 10;
  cout << x << "!";
  x = 1;
  cout << x << "!";
  return 0;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>10!1!</p>
        </statement>
        <feedback>
          <p>There are no spaces between the numbers.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>10 ! 1 !</p>
        </statement>
        <feedback>
          <p>Remember, in C++ spaces must be printed.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>10 ! 10 !</p>
        </statement>
        <feedback>
          <p>Carefully look at the values being assigned.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>1!1!</p>
        </statement>
        <feedback>
          <p>Carefully look at the values being assigned.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="multiple_assignment_3">
    <statement>
      <p>What is the correct output?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
  int x = 0;
  x = 5;
  int y = x;
  y = 5;
  bool z = x == y;
  cout << z;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>True</p>
        </statement>
        <feedback>
          <p>Remember that printing a boolean results in either 0 or 1.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>False</p>
        </statement>
        <feedback>
          <p>Remember that printing a boolean results in either 0 or 1.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          <p>Is x equal to y?</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>x is equal to y, so the output is 1.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>