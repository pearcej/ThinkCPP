<?xml version="1.0"?>
<exercises xml:id="chapter6_coding-practice">
  <title>Coding Practice</title>
  <exercise label="cp_6_AC_1">
    <statement>
      <p>Write a program that prints out a 5x5 triangle using asterisks.
        An example is shown below. Your code should use while loops.</p>
      <console>
        <output>
*
**
***
****
*****
</output>
      </console>
    </statement>
    <program interactive="activecode"><code><![CDATA[
           #include <iostream>
           using namespace std;

           int main() {
               // Write your implementation here.
           }]]></code></program>
    <solution>
      <p>Below is one way to implement the program. We use nested loops similar to the last
        version
        of the printMultTable function to print out the triangular shape.</p>
      <program xml:id="cp_6_AC_1a"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int row = 0;
    while (row < 5) {
        int col = 0;
        while (col <= row) {
            cout << "*";
            col++;
        }
        cout << endl;
        row++;
    }
}
        ]]></code></program>
    </solution>
  </exercise>


  <exercise label="cp_6_AC_2">
    <statement>
      <p>Encapsulate the triangle printing program into a function called <c>printTriangle</c>. Generalize it so
        that it takes a parameter <c>int n</c> to generate a nxn triangle. Check the hint below for help with the construction of the code. Call your function in main with an input of 4, which
        should result in the following output:</p>
      <console>
        <output>*
**
***
****</output>
      </console>
    </statement>
    <program xml:id="cp_6_AC_2q_editor"
             interactive="activecode"
             line-numbers="yes">
              <code><![CDATA[
    #include <iostream>
    using namespace std;
    
    void printTriangle(int n) {
        // Write your implementation here.
    }
    
    int main() {
        // Write your implementation here.
    }
            ]]></code>
            </program>
    <hint>
      <activity label="cp_6_AC_2q_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide"
                exercise-interactive="parson">
        <statement>
          <p>Encapsulate the triangle printing program into a function called <c>printTriangle</c>. Generalize it
            so that it takes a parameter <c>int n</c> to generate a nxn triangle. Use the lines to
            construct the code, then go back to complete the Activecode. Call your function in
            main with an input of 4, which should result in the following output:</p>
          <console>
            <output>*
**
***
****</output>
          </console>
        </statement>
        <blocks>
          <block order="7">
            <cline>// Create function</cline>
            <cline>void printTriangle(int n) {</cline>
          </block>
          <block order="17">
            <choice correct="yes">
              <cline> int row = 0;</cline>
            </choice>
            <choice>
              <cline>  int row = 4; </cline>
            </choice>
          </block>
          <block order="9">
            <cline><![CDATA[ while (row < n) {]]></cline>
          </block>
          <block order="12">
            <choice correct="yes">
              <cline>  int col = 0;</cline>
            </choice>
            <choice>
              <cline>  int col = 4; </cline>
            </choice>
          </block>
          <block order="10">
            <choice correct="yes">
              <cline><![CDATA[  while (col <= row) {]]></cline>
            </choice>
            <choice>
              <cline><![CDATA[  while (col <= n) {]]></cline>
            </choice>
          </block>
          <block order="3">
            <cline><![CDATA[   cout << "*";]]></cline>
            <cline>   col++;</cline>
          </block>
          <block order="2">
            <cline>  }</cline>
          </block>
          <block order="1">
            <cline><![CDATA[  cout << endl;]]></cline>
            <cline>  row++;</cline>
          </block>
          <block order="8">
            <cline> }</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_6_AC_3">
    <statement>
      <p>Write a function called <c>printPyramid</c> that prints out an <c>n</c> by <c>n</c> pyramid using
        asterisks. An example is shown below with <c>n</c> equal to 5. Your code should use while
        loops.</p>
      <console>
        <output>
*
**
***
****
*****
</output>
      </console>
    </statement>
    <program interactive="activecode"><code><![CDATA[
           #include <iostream>
           using namespace std;

           void printPyramid (int n) {
               // Write your implementation here.
           }

           int main() {
               printPyramid (5);
           }
               ]]></code></program>
    <solution>
      <p>Below is one way to implement the program. We use multiple <c>while</c> loops to print out
        spaces and asterisks. The outer loop creates the number of rows, and within the outer loop,
        the two inner loops print out the correct number of spaces and asterisks.</p>
      <program xml:id="cp_6_AC_3a"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void printPyramid(int n) {
    int space, numAsterisks;
    int count = 1;
    while (count <= n) {
        space = n - count;
        while (space > 0) {
            cout << " ";
            space--;
        }
        numAsterisks = 2 * count - 1;
        while (numAsterisks > 0) {
            cout << "*";
            numAsterisks--;
        }
        cout << endl;
        count++;
    }
}

int main() {
    printPyramid (5);
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cp_6_AC_4">
    <statement>
      <p>Write a function called <c>printNumPyramid</c> that prints out an <c>n</c> x <c>n</c> number pyramid. An
        example is shown below with <c>n</c> equal to 5. Your code should use while loops. Check the hint below for help with the construction of the code. (Hint: similar to the previous
        question, if you want the output to look nice, using conditionals that print different
        amounts of spaces.)</p>
      <console>
        <output>
    1
   222
  33333
 4444444
555555555</output>
      </console>
    </statement>
    <program xml:id="cp_6_AC_4q_editor"
             interactive="activecode"
             line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

void printNumPyramid(int n) {
    // Write your implementation here.
}

int main() {
    printNumPyramid (5);
}
        ]]></code>
        </program>
    <hint>
      <activity label="cp_6_AC_4q_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide"
                exercise-interactive="parson">
        <statement>
          <p>Write a function called <c>printNumPyramid</c> that prints out an <c>n</c> x <c>n</c> number pyramid. An
            example is shown below with <c>n</c> equal to 5. Your code should use while loops. Use
            the lines to construct the code, then go back to complete the Activecode. (Hint:
            similar to the previous question, if you want the output to look nice, using
            conditionals that print different amounts of spaces.)</p>
          <console>
            <output>
              1
             222
            33333
           4444444
          555555555</output>
          </console>
        </statement>
        <blocks>
          <block order="6">
            <cline>void printNumPyramid(int n) {</cline>
          </block>
          <block order="5">
            <choice correct="yes">
              <cline> int space;</cline>
              <cline> int numPrinted;</cline>
              <cline> int count = 1;</cline>
              <cline> int sub = 4;</cline>
            </choice>
            <choice>
              <cline> int space; </cline>
              <cline> int numPrinted = 5;</cline>
              <cline> int count = 1;</cline>
              <cline> int sub = 1;</cline>
            </choice>
          </block>
          <block order="8">
            <cline><![CDATA[ while (count <= n) {]]></cline>
            <cline>  space = n - count;</cline>
          </block>
          <block order="7">
            <cline>  while (space &gt; 0) {</cline>
            <cline><![CDATA[   cout << " ";]]></cline>
            <cline>   space --</cline>
            <cline>  }</cline>
          </block>
          <block order="2">
            <cline>  numprinted = 2 * count - 1;</cline>
          </block>
          <block order="10">
            <cline>  while (numPrinted &gt; 0) {</cline>
            <cline><![CDATA[   cout << n - sub;]]></cline>
            <cline>   numPrinted--;</cline>
            <cline>  }</cline>
          </block>
          <block order="1">
            <choice correct="yes">
              <cline><![CDATA[  cout << endl;]]></cline>
              <cline>  count ++;</cline>
              <cline>  sub--;</cline>
            </choice>
            <choice>
              <cline><![CDATA[  cout << endl; ;]]></cline>
              <cline>  count++;</cline>
              <cline>  sub++;</cline>
            </choice>
          </block>
          <block order="3">
            <cline> }</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_6_AC_5">
    <statement>
      <p> A common coding interview question that's also a popular children's game used to
        teach division is
        FizzBuzz.</p>
      <p> Write a program that uses a while loop and prints the numbers 1 through 100, but
        every
        multiple of 3 is replaced with the word "Fizz" every multiple of 5 is replaced with
        the word "Buzz"
        and every multiple of both 3 and 5 is replaced with "FizzBuzz." Your output should
        be the following:</p>
      <console>
        <output>
1
2
Fizz
4
Buzz
...
14
FizzBuzz
16
...
98
Fizz
Buzz
</output>
      </console>
    </statement>
    <program interactive="activecode"><code><![CDATA[
           #include <iostream>
           using namespace std;

           void printPyramid (int n) {
               // Write your implementation here.
           }

           int main() {
               printPyramid (5);
           }
               ]]></code></program>
    <solution>
      <p>Below is one way to implement the <q>FizzBuzz</q> program. We use conditionals with modulus
        operators in a while loop to categorize every number and print the correct output. Feel free
        to search up on the FizzBuzz coding interview problem if you are interested in other ways to
        code this program!</p>
      <program xml:id="cp_6_AC_5a"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int n = 1;
    while (n <= 100) {
        if (n % 3 == 0 && n % 5 == 0) {
            cout << "FizzBuzz" << endl;
        }
        else if (n % 3 == 0) {
            cout << "Fizz" << endl;
        }
        else if (n % 5 == 0) {
            cout << "Buzz" << endl;
        }
        else {
            cout << n << endl;
        }
        n++;
    }
}
        ]]></code></program>

    </solution>
  </exercise>

  <exercise label="cp_6_AC_6">
    <statement>
      <p>Write the function <c>printAddTable</c> which takes an <c>int n</c> as a parameter and prints out a nxn
        addition table. Call your function in <c>main</c> with <q>10</q> as the argument. Check the hint below for help with the construction of the code. Your output should look like
        this:</p>
      <console>
        <output>
0       1       2       3       4       5       6       7       8       9       10
1       2       3       4       5       6       7       8       9       10      11
2       3       4       5       6       7       8       9       10      11      12
3       4       5       6       7       8       9       10      11      12      13
4       5       6       7       8       9       10      11      12      13      14
5       6       7       8       9       10      11      12      13      14      15
6       7       8       9       10      11      12      13      14      15      16
7       8       9       10      11      12      13      14      15      16      17
8       9       10      11      12      13      14      15      16      17      18
9       10      11      12      13      14      15      16      17      18      19
10      11      12      13      14      15      16      17      18      19      20</output>
      </console>
    </statement>
    <program xml:id="cp_6_AC_6q_editor"
             interactive="activecode"
             line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

void printAddTable(int n) {
    // Write your implementation here.
}

int main() {
    // Call your function here.
}
        ]]></code>
        </program>
    <hint>
      <activity label="cp_6_AC_6q_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide">
        <statement>
          <p>Write the function <c>printAddTable</c> which takes an <c>int n</c> as a parameter and prints out a nxn
            addition table. Call your function in <c>main</c> with <q>10</q> as the argument. Use the
            lines to construct the code, then go back to complete the Activecode. Your output
            should look like this:</p>
          <console>
            <output>
0       1       2       3       4       5       6       7       8       9       10
1       2       3       4       5       6       7       8       9       10      11
2       3       4       5       6       7       8       9       10      11      12
3       4       5       6       7       8       9       10      11      12      13
4       5       6       7       8       9       10      11      12      13      14
5       6       7       8       9       10      11      12      13      14      15
6       7       8       9       10      11      12      13      14      15      16
7       8       9       10      11      12      13      14      15      16      17
8       9       10      11      12      13      14      15      16      17      18
9       10      11      12      13      14      15      16      17      18      19
10      11      12      13      14      15      16      17      18      19      20</output>
          </console>
        </statement>
        <blocks>
          <block order="1">
            <cline>void printAddTable(int n) {</cline>
          </block>
          <block order="3">
            <choice correct="yes">
              <cline><![CDATA[    for (int i = 0; i <= n; i++) {]]></cline>
            </choice>
            <choice>
              <cline><![CDATA[    for (int i = 0; i < n; i++) { ]]></cline>
            </choice>
          </block>
          <block order="7">
            <cline><![CDATA[        for (int j = 0; j <= n; j++) {]]></cline>
          </block>
          <block order="5"
                 correct="no">
            <cline><![CDATA[        for (int j = 0; j < n; j++) { ]]></cline>
          </block>
          <block order="6">
            <cline><![CDATA[            cout << i + j << '\t';]]></cline>
          </block>
          <block order="2">
            <cline>        }</cline>
          </block>
          <block order="4">
            <cline><![CDATA[        cout << '\n';]]></cline>
          </block>
          <block order="8">
            <cline>    }</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_6_AC_7">
    <statement>
      <p>A number is a <term>prime number</term> if its only factors are 1 and itself.</p>
      <p> Write the function <c>isPrime</c>, which takes an <c>int num</c> as a parameters. <c>isPrime</c> is a boolean
        function that returns <c>true</c> if <c>num</c> is a prime number and returns <c>false</c> otherwise.
        Run and test your code!</p>
    </statement>
    <program interactive="activecode">
            <code><![CDATA[
#include <iostream>
using namespace std;

bool isPrime (int num) {
    // Write your implementation here.
}
           ]]></code>
            <tests><![CDATA[
            #define CATCH_CONFIG_MAIN
            #include <catch.hpp>
 
            TEST_CASE("isPrime function") {
                REQUIRE(isPrime (1) == 0);
                REQUIRE(isPrime (13) == 1);
                REQUIRE(isPrime (24) == 0);
            }
 
            TEST_CASE("isPrime for 0") {
                REQUIRE(isPrime (0) == 0);
            }
]]></tests>
    </program>
    <solution>

      <p>Below is one way to implement the <c>isPrime</c> function. First, we check to see if <c>num</c> is
        less than or equal to 1, and return <c>false</c> if that is the case. Next, we use a <c>while</c> loop
        to continuously check if a factor <c>n</c> divides <c>num</c> evenly. If it does, we return <c>false</c>.
        If no value of <c>n</c> divides <c>num</c> evenly, then we return <c>true</c>. Notice the <c>while</c>
        loop only goes up to <c>num / 2</c> because if 2 doesn't divide evenly, then there isn't a smaller
        factor.</p>
      <program xml:id="cp_6_AC_7a"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

bool isPrime(int num) {
    if (num <= 1) {
        return false;
    }
    int n = 2;
    while (n < num / 2) {
        if (num % n == 0) {
            return false;
        }
        n++;
    }
    return true;
}
        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("isPrime function") {
    REQUIRE(isPrime (1) == 0);
    REQUIRE(isPrime (13) == 1);
    REQUIRE(isPrime (24) == 0);
}

TEST_CASE("isPrime for 0") {
    REQUIRE(isPrime (0) == 0);
}
</tests></program>


    </solution>
  </exercise>

  <exercise label="cp_6_AC_8">
    <statement>
      <p>Write a program that uses a <c>while</c> loop to print out the alphabet from <c>a</c> to <c>z</c>.
        Check the hint below for help with the construction of the code.</p>
    </statement>
    <program xml:id="cp_6_AC_8q_editor"
             interactive="activecode"
             line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    // Write your implementation here.
}
        ]]></code>
        </program>
    <hint>
      <activity label="cp_6_AC_8q_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide">
        <statement>
          <p>Write a program that uses a <c>while</c> loop to print out the alphabet from &#x2018;a' to
            &#x2018;z'. Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="5">
            <cline>int main() {</cline>
          </block>
          <block order="1">
            <cline>    char letter = 'a';</cline>
          </block>
          <block order="8">
            <choice correct="yes">
              <cline><![CDATA[    while (letter <= 'z') {]]></cline>
            </choice>
            <choice>
              <cline>    while (letter != 'z') { </cline>
            </choice>
          </block>
          <block order="2">
            <cline><![CDATA[        cout << letter << endl;]]></cline>
          </block>
          <block order="4">
            <cline>        letter++;</cline>
          </block>
          <block order="6">
            <cline>    }</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_6_AC_9">
    <statement>
      <p>The <term>Fibonacci sequence</term> is a sequence of numbers such that each successive
        number is the sum of the two previous numbers. This sequence is as follows: 0, 1, 1, 2, 3,
        5, 8, 13, 21, 34, and so on.</p>
      <p>Write a program that prints the first 20 Fibonacci
        numbers.</p>
    </statement>
    <program interactive="activecode">
            <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    // Write your implementation here.
}
           ]]></code>
            <tests><![CDATA[
            #define CATCH_CONFIG_MAIN
            #include <catch.hpp>
 
            TEST_CASE("isPrime function") {
                REQUIRE(isPrime (1) == 0);
                REQUIRE(isPrime (13) == 1);
                REQUIRE(isPrime (24) == 0);
            }
 
            TEST_CASE("isPrime for 0") {
                REQUIRE(isPrime (0) == 0);
            }
]]></tests></program>
    <solution>
      <p>Below is one way to implement the program. First, we check to see if <c>num</c> is less than
        or equal to 1, and return <c>false</c> if that is the case. Next, we use a <c>while</c> loop to
        continuously check if a factor <c>n</c> divides <c>num</c> evenly. If it does, we return <c>false</c>.
        If no value of <c>n</c> divides <c>num</c> evenly, then we return <c>true</c>. Notice the <c>while</c>
        loop only goes up to <c>num / 2</c> because if 2 doesn't divide evenly, then there isn't a smaller
        factor.</p>
      <program xml:id="cp_6_AC_9a"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int first = 0;
    int second = 1;
    int third;
    int n = 2;
    cout << first << " " << second << " ";
    while (n < 20) {
        third = first + second;
        cout << third << " ";
        first = second;
        second = third;
        n++;
    }
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cp_6_AC_10">
    <statement>
      <p>Write a function called <c>factorial</c> which takes an <c>int n</c> as a parameter and returns <c>n</c>
        factorial. Remembers that a factorial(denoted by !) is the product of all positive integers
        less than or equal to <c>n</c>, so 4! is 24. Use a <c>while</c> loop. Run and test your code!
        Check the hint below for help with the construction of the code.</p>
    </statement>
    <program xml:id="cp_6_AC_10q_editor"
             interactive="activecode"
             line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

int factorial(int n) {
    // Write your implementation here.
}
        ]]></code>
          <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("factorial function") {
    REQUIRE(factorial(4) == 24);
    REQUIRE(factorial(6) == 720);
    REQUIRE(factorial(9) == 362880);
}
</tests>
        </program>
    <hint>
      <activity label="cp_6_AC_10q_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide"
                exercise-interactive="parson">
        <statement>
          <p>Write a function called <c>factorial</c> which takes an <c>int n</c> as a parameter and returns <c>n</c>
            factorial. Remembers that a factorial(denoted by !) is the product of all positive
            integers less than or equal to <c>n</c>, so 4! is 24. Use a <c>while</c> loop. Run and test
            your code! Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="10">
            <cline>int factorial(int n) {</cline>
          </block>
          <block order="7">
            <choice correct="yes">
              <cline> int fact = 1;</cline>
            </choice>
            <choice>
              <cline> int fact = 0;</cline>
            </choice>
          </block>
          <block order="6">
            <cline> int i = n;</cline>
            <cline> while (n / i != n) {</cline>
          </block>
          <block order="5">
            <choice correct="yes">
              <cline>  fact *= i;</cline>
            </choice>
            <choice>
              <cline>  fact = n * (n - 1); </cline>
            </choice>
          </block>
          <block order="4">
            <cline>  i--;</cline>
            <cline> }</cline>
          </block>
          <block order="11">
            <cline> return fact;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>
</exercises>