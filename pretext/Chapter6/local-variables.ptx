<?xml version="1.0"?>
<section xml:id="chapter6_local-variables">
  <title>Local variables</title>
  <p>About this time, you might be wondering how we can use the same variable <c>i</c> in both <c>printMultiples</c>
    and <c>printMultTable</c>. Didn't I say that you can only declare a variable once? And doesn't it cause
    problems when one of the functions changes the value of the variable?</p>
  <p>The answer to both questions is <q>no,</q> because the <c>i</c> in <c>printMultiples</c> and the <c>i</c> in <c>printMultTable</c>
    are <em>not the same
      variable</em>. They have the same name, but they do not refer to the same storage location,
    and changing the value of one of them has no effect on the other.</p>
  <note>
    <p>Remember that variables that are declared inside a function definition are local. You cannot
      access a local variable from outside its <q>home</q> function, and you are free to have
      multiple variables with the same name, as long as they are not in the same function scope.</p>
  </note>
  <p>The stack diagram for this program shows clearly that the two variables named <c>i</c> are not
    in the same storage location. They can have different values, and changing one does not affect
    the other.</p>
  <figure align="center">
    <image source="Chapter6/Images/6.9stackdiagram.png"
           width="50%"
           alt="A stack of three boxes. The top one is 'main' and is empty. The next is 'printMultTable' and contains 'i = 1'. The next is 'printMultiples' and contains n=1, i = 3'."/>
  </figure>
  <p>Notice that the value of the parameter <c>n</c> in <c>printMultiples</c> has to be the same as the value of <c>i</c>
    in <c>printMultTable</c>. On the other hand, the value of <c>i</c> in <c>printMultiples</c> goes from 1 up to <c>n</c>. In the
    diagram, it happens to be 3. The next time through the loop it will be 4.</p>
  <p>It is often a good idea to use different variable names in different functions, to avoid
    confusion, but there are good reasons to reuse names. For example, it is common to use the names <c>i</c>
    , <c>j</c> and <c>k</c> as loop variables. If you avoid using them in one function just because
    you used them somewhere else, you will probably make the program harder to read.</p>
  <exercise label="local_variables_1">
    <statement>
      <p>Are there any issues with the code below?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
  cout << "Let's print the multiples of 2." << endl;
  int i = 1;
  while (i < 10) {
    int j = i * 2;
    cout << i << ": " << j << endl;
    i++;
  }
  i = 10;
  j = 20;
  cout << i << ": " << j << "!";
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>Yes, we cannot output the value of j outside of the loop.</p>
        </statement>
        <feedback>
          <p>The scope of i is restricted to the loop, so we cannot change the value of i outside of
            the loop.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Yes, we cannot output anything before the loop.</p>
        </statement>
        <feedback>
          <p>This is allowed.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Yes, we cannot reassign j to 20 outside of the loop.</p>
        </statement>
        <feedback>
          <p>The scope of i is restricted to the loop, so we cannot output the value of i outside of
            the loop.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Yes, we cannot let i start at 1 in the loop.</p>
        </statement>
        <feedback>
          <p>We are allowed to initialize i to any value.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>No, there are no issues with the code below.</p>
        </statement>
        <feedback>
          <p>There are issues with the code. Can you find them?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="local_variables_2">
    <statement>
      <p>Take a look at the code below. Is the <c>i</c> in <c>printMultiples</c> the same variable as the <c>i</c>
        in <c>printMultTable</c>?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

void printMultiples(int n) {
  int i = 1;
  while (i <= 6) {
    cout << n * i << '\t';
    i = i + 1;
  }
  cout << endl;
}

void printMultTable() {
  int i = 1;
  while (i <= 6) {
    printMultiples(i);
    i = i + 1;
  }
}

int main() {
  printMultTable();
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Yes</p>
        </statement>
        <feedback>
          <p>They are two different variables in two different scopes, but they do have the same
            name.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>No</p>
        </statement>
        <feedback>
          <p>Correct! They are not the same variable.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="local_variables_3">
    <statement>
      <p>Take a look at the code below. Is the variable <c>j</c> accessible in the function <c>printMultiples</c>?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

void printMultiples(int n) {
  int i = 1;
  while (i <= 6) {
    cout << n * i << '\t';
    i = i + 1;
  }
  cout << endl;
}

void printMultTable() {
  int j = 1;
  while (j <= 6) {
    printMultiples(j);
    j = j + 1;
  }
}

int main() {
  printMultTable();
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="local_variables_3_opt_a">
          <p>Yes</p>
        </statement>
        <feedback id="local_variables_3_opt_a">
          <p>The scope of <c>j</c> does not include <c>printMultiples</c> function.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="local_variables_3_opt_b">
          <p>No</p>
        </statement>
        <feedback id="local_variables_3_opt_b">
          <p>Correct! <c>j</c> is not accessable as the value is merely passes from one function to
            another. We cannot have a statement such as j++; in <c>printMultiples</c> as it is out of the scope of <c>printMultTable</c></p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>