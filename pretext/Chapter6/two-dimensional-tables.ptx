<?xml version="1.0"?>
<section xml:id="chapter6_two-dimensional-tables">
  <title>Two-dimensional tables</title>
  <p>A two-dimensional table is a table where you choose a row and a column
    and read the value at the intersection. A multiplication table is a good
    example. Let's say you wanted to print a multiplication table for the
    values from 1 to 6.</p>
  <p>A good way to start is to write a simple loop that prints the multiples
    of 2, all on one line.</p>
  <listing label="TwoD_tables_AC_1">
    <caption>
      Run this active code, which uses a simple loop that prints the multiples
        of 2, all on one line.
    </caption>
    <program xml:id="TwoD_tables_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int i = 1;
    while (i <= 6) {
        cout << 2 * i << "   ";
        i = i + 1;
    }
    cout << endl;
    return 0;
}
        ]]></code>
    </program>
  </listing>
  <p>The first line initializes a variable named <c>i</c>, which is going to act as a counter, or <term>loop
    variable</term>. As the loop executes, the value of <c>i</c> increases from 1 to 6, and then when <c>i</c>
    is 7, the loop terminates. Each time through the loop, we print the value <c>2*i</c> followed by
    three spaces. By omitting the <c>endl</c> from the first output statement, we get all the output on
    a single line.</p>
  <p>The output of this program is:</p>
  <console><output>2   4   6   8   10   12</output></console>
  <p>So far, so good. The next step is to <term>encapsulate</term> and <term>generalize</term>.</p>
  <exercise label="2D_tables_1">
    <statement>
      <p>What is a good name for the variable x, found in the code block below?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
  int x = 1;
  while (x <= 6) {
    cout << 3 * x << "   ";
    x = x + 1;
  }
  cout << endl;
  return 0;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>counter</p>
        </statement>
        <feedback>
          <p>Try again!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>loop variable</p>
        </statement>
        <feedback>
          <p>Try again!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Both a and b</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>None of the above</p>
        </statement>
        <feedback>
          <p>Try again!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="2D_tables_2">
    <statement>
      <p>Currently, the code below prints all of the multiples of three on one line. How can you
        change the output so that each multiple prints on its own line?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
  int x = 1;
  while (x <= 6) {
    cout << 3 * x << "  ";
    x = x + 1;
  }
  cout << endl;
  return 0;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p><![CDATA[Change the first output statement to say cout << 3 * x << endl;]]></p>
        </statement>
        <feedback>
          <p>The addition of the endl will print the multiples of three on separate lines.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><![CDATA[Change the first output statement to say cout << 3 * x << \n;]]></p>
        </statement>
        <feedback>
          <p>A newline character must be used in conjunction with a string. In this case, we are
            outputting an integer. To use a newline character in this scenario you must use quotes
            around it. (ex. "\n")</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><![CDATA[Change the second output statement to say cout << endl << endl;]]></p>
        </statement>
        <feedback>
          <p>This would simply print out two new lines after all of the multiples have already
            printed on one line.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>This code already prints each multiple on its own line.</p>
        </statement>
        <feedback>
          <p>This code prints all multiples out on one line.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>