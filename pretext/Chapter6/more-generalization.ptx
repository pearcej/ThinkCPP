<?xml version="1.0"?>
<section xml:id="chapter6_more-generalization">
  <title>More generalization</title>
  <p>As another example of generalization, imagine you wanted a program that would print a
    multiplication table of any size, not just the 6x6 table. You could add a parameter to <c>printMultTable</c>:</p>
  <program>void printMultTable(int high) {
  int i = 1;
  while (i &lt;= high) {
    printMultiples(i);
    i = i + 1;
  }
}</program>
  <p>I replaced the value 6 with the parameter <c>high</c>. If I call <c>printMultTable</c> with the argument 7, I get</p>
  <console><output>1   2   3   4   5   6
2   4   6   8   10   12
3   6   9   12   15   18
4   8   12   16   20   24
5   10   15   20   25   30
6   12   18   24   30   36
7   14   21   28   35   42</output></console>
  <p>which is fine, except that I probably want the table to be square (same number of rows and
    columns), which means I have to add another parameter to <c>printMultiples</c>, to specify how many columns
    the table should have.</p>
  <p>Just to be annoying, I will also call this parameter <c>high</c>, demonstrating that different
    functions can have parameters with the same name (just like local variables):</p>
  <program>void printMultiples(int n, int high) {
  int i = 1;
  while (i &lt;= high) {
    cout &lt;&lt; n * i &lt;&lt; "   ";
    i = i + 1;
  }
  cout &lt;&lt; endl;
}

void printMultTable(int high) {
  int i = 1;
  while (i &lt;= high) {
    printMultiples(i, high);
    i = i + 1;
  }
}</program>
  <p>Notice that when I added a new parameter, I had to change the first line of the function (the
    interface or prototype), and I also had to change the place where the function is called in <c>printMultTable</c>.
    As expected, this program generates a square 7x7 table:</p>
  <console><output>1   2   3   4   5   6   7
2   4   6   8   10   12   14
3   6   9   12   15   18   21
4   8   12   16   20   24   28
5   10   15   20   25   30   35
6   12   18   24   30   36   42
7   14   21   28   35   42   49</output></console>
  <listing label="more_generalization_AC_1">
    <caption>
      This active code uses the updated <c>printMultTable</c> function. Notice that with generalization,
        we can create multiplication tables of multiple sizes by simply changing the parameter
        passed into <c>printMultTable</c>. Run the active code to see what happens!
    </caption>
    <program xml:id="more_generalization_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

void printMultiples(int n, int high) {
    int i = 1;
    while (i <= high) {
        cout << n * i << "\t";
        i = i + 1;
    }
    cout << endl;
}

void printMultTable(int high) {
    int i = 1;
    while (i <= high) {
        printMultiples(i, high);
        i = i + 1;
    }
}

int main() {
    printMultTable(7);
}
        ]]></code>
    </program>
  </listing>
  <p>When you generalize a function appropriately, you often find that the resulting program has
    capabilities you did not intend. For example, you might notice that the multiplication table is
    symmetric, because <m>ab = ba</m>, so all the entries in the table appear twice. You could save
    ink by printing only half the table. To do that, you only have to change one line of <c>printMultTable</c>.
    Change</p>
  <program>
printMultiples(i, high);
</program>
  <p>to</p>
  <program>
printMultiples(i, i);
</program>
  <p>and you get</p>
  <console><output>1
2   4
3   6   9
4   8   12   16
5   10   15   20   25
6   12   18   24   30   36
7   14   21   28   35   42   49</output></console>
  <p>I'll leave it up to you to figure out how it works.</p>
  <listing label="more_generalization_AC_2">
    <caption>
      This active code prints half the multiplication table. We can achieve this by
        replacing the <c>printMultiples(i, high)</c> in <c>printMultTable</c> with <c>printMultiples(i, i)</c>. Run the active code to see what happens!
    </caption>
    <program xml:id="more_generalization_AC_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

void printMultiples(int n, int high) {
    int i = 1;
    while (i <= high) {
        cout << n * i << "\t";
        i = i + 1;
    }
    cout << endl;
}

void printMultTable(int high) {
    int i = 1;
    while (i <= high) {
        printMultiples(i, i);
        i = i + 1;
    }
}

int main() {
    printMultTable(7);
}
        ]]></code>
    </program>
  </listing>
</section>