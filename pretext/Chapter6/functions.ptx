<?xml version="1.0"?>
<section xml:id="chapter6_functions">
  <title>Functions</title>
  <p>In the last section I mentioned <q>all the things functions are good for.</q> About this time,
    you might be wondering what exactly those things are. Here are some of the reasons functions are
    useful:</p>
    <p>7</p>
  <p>
    <ul>
      <li>
        <p>By giving a name to a sequence of statements, you make your program
          easier to read and debug.</p>
      </li>
      <li>
        <p>Dividing a long program into functions allows you to separate parts
          of the program, debug them in isolation, and then compose them into a
          whole.</p>
      </li>
      <li>
        <p>Functions facilitate both recursion and iteration.</p>
      </li>
      <li>
        <p>Well-designed functions are often useful for many programs. Once you
          write and debug one, you can reuse it.</p>
      </li>
    </ul>
  </p>
  <p>For example, instead of writing the 53 lines of code below&#x2026;</p>
  <program xml:id="functions_AC_1"
           line-numbers="yes">
    <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int x = 4;
    x = x * 2;
    x = x / 2;
    x = x + 2;
    x = x - 2;
    cout << x << endl;
    x = 13;
    x = x * 2;
    x = x / 2;
    x = x + 2;
    x = x - 2;
    cout << x << endl;
    x = 100;
    x = x * 2;
    x = x / 2;
    x = x + 2;
    x = x - 2;
    cout << x << endl;
    x = 22;
    x = x * 2;
    x = x / 2;
    x = x + 2;
    x = x - 2;
    cout << x << endl;
    x = 220;
    x = x * 2;
    x = x / 2;
    x = x + 2;
    x = x - 2;
    cout << x << endl;
    x = 0;
    x = x * 2;
    x = x / 2;
    x = x + 2;
    x = x - 2;
    cout << x << endl;
    x = 1000;
    x = x * 2;
    x = x / 2;
    x = x + 2;
    x = x - 2;
    cout << x << endl;
    x = 254;
    x = x * 2;
    x = x / 2;
    x = x + 2;
    x = x - 2;
    cout << x << endl;
}
        ]]></code>
  </program>
  <p>..you would reduce it to the 21 lines of code below, making it easier to read, debug, and use
    the function many times with rewriting it each time.</p>
  <program xml:id="functions_AC_2"
           line-numbers="yes">
    <code><![CDATA[
#include <iostream>
using namespace std;

void all_operators(int x) {
    x = x * 2;
    x = x / 2;
    x = x + 2;
    x = x - 2;
    cout << x << endl;
}

int main() {
    all_operators(4);
    all_operators(13);
    all_operators(100);
    all_operators(22);
    all_operators(220);
    all_operators(0);
    all_operators(1000);
    all_operators(254);
}
        ]]></code>
  </program>
  <exercise label="functions_1">
    <statement>
      <p>What is a function in C++?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>A named sequence/group of statements that perform a particular task.</p>
        </statement>
        <feedback>
          <p>Yes, a function is a named sequence of statements.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Any sequence of statements.</p>
        </statement>
        <feedback>
          <p>While functions contain sequences of statements, not all sequences of statements are
            considered functions.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>A mathematical expression that calculates a value.</p>
        </statement>
        <feedback>
          <p>While some functions do calculate values, the python idea of a function is slightly
            different from the mathematical idea of a function in that not all functions calculate
            values. Consider, for example, the turtle functions in this section. They made the
            turtle draw a specific shape, rather than calculating a value.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>A statement of the form x = 5 + 4.</p>
        </statement>
        <feedback>
          <p>This statement is called an assignment statement. It assigns the value on the right
            (9), to the name on the left (x).</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_2"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Create a function called <c>absoluteValue</c>, which returns the absolute value of a parameter <c>num</c>.
        Assume you do not have access to <c>#include &lt;cmath&gt;</c>.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>int absoluteValue(int num) {</cline>
      </block>
      <block order="6"
             correct="no">
        <cline>void absoluteValue(int num) { </cline>
      </block>
      <block order="2"
             correct="no">
        <cline>int absoluteValue(int num) </cline>
      </block>
      <block order="3"
             correct="no">
        <cline>void absoluteValue(int num) </cline>
      </block>
      <block order="5">
        <cline>  if (num &gt; 0) {</cline>
      </block>
      <block order="7">
        <cline>    return num;</cline>
        <cline>  }</cline>
      </block>
      <block order="9">
        <cline>  else {</cline>
      </block>
      <block order="1">
        <cline>    int absNum = -(num);</cline>
      </block>
      <block order="8">
        <cline>    return absNum;</cline>
        <cline>  }</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="functions_3">
    <statement>
      <p>What is of these is NOT a reason that functions are useful?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Once you write and debug a function, you can reuse it.</p>
        </statement>
        <feedback>
          <p>The reusability of functions is very useful.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Makes your program easier to read and debug.</p>
        </statement>
        <feedback>
          <p>By abstracting blocks of code, functions make your code easier to read and understand.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Functions facilitate both recursion and iteration.</p>
        </statement>
        <feedback>
          <p>Recursive functions and iterative functions are useful.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>None of the above.</p>
        </statement>
        <feedback>
          <p>All of the choices above are reasons for why functions are useful.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>