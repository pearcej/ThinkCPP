<?xml version="1.0"?>
<exercises xml:id="chapter6_multiple-choice-exercises">
  <title>Multiple Choice Exercises</title>
  <exercise label="mce_6_1">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  int x = 0;
  int i = 1;
  while (i < 10) {
    x = i;
    i++;
  }
  cout << x;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_6_1_opt_a">
          <p>0</p>
        </statement>
        <feedback id="mce_6_1_opt_a">
          <p><c>x</c> is initialized to 0, but it's value is reassigned in the while loop. Can you
            figure out what the final value assigned to <c>x</c> is?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_1_opt_b">
          <p>1</p>
        </statement>
        <feedback id="mce_6_1_opt_b">
          <p>When <c>i</c> is 1, <c>x</c> is assigned the value of <c>i</c>, so <c>x</c> is 1. However,
            the while loop continuously increments i, so the final value of <c>x</c> is not 1.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_6_1_opt_c">
          <p>9</p>
        </statement>
        <feedback id="mce_6_1_opt_c">
          <p><c>x</c> is assigned the value of 9 during the last iteration of the while loop, and
            thus 9 is the output of the program.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_1_opt_d">
          <p>10</p>
        </statement>
        <feedback id="mce_6_1_opt_d">
          <p><c>i</c> is incremented to a value of 10, but since <c>i &lt; 10</c> is false, the contents of
            the while loop is not executed, so <c>x</c> is never assigned the value of 10.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_6_2">
    <statement>
      <p>What is the final value of <c>i</c> when the code finished running?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  int x = 0;
  int i = 1;
  while (i < 10) {
    x = i;
    i++;
  }
  cout << x;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_6_2_opt_a">
          <p>0</p>
        </statement>
        <feedback id="mce_6_2_opt_a">
          <p><c>i</c> is initialized with a value of 1 and is incremented, so it will never have a
            value of 0.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_2_opt_b">
          <p>1</p>
        </statement>
        <feedback id="mce_6_2_opt_b">
          <p><c>i</c> is initialized with a value of 1 but it is incremented during the while loop.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_2_opt_c">
          <p>9</p>
        </statement>
        <feedback id="mce_6_2_opt_c">
          <p>This is the final value of <c>x</c> when the code is finished running.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_6_2_opt_d">
          <p>10</p>
        </statement>
        <feedback id="mce_6_2_opt_d">
          <p>In order for the while loop to terminate, the condition <c>i &lt; 10</c> must be false, and this
            is achieved when <c>i</c> is incremented to 10.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_6_3">
    <statement>
      <p>How many times does the following while loop run?</p>
      <program language="cpp"
               line-numbers="yes">
        <code>
int main() {
  int i = 6;
  while (i &gt; 2) {
    i = i + 4;
    if (i &gt; 8) {
      i = i - 5;
  }
}
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_6_3_opt_a">
          <p>1</p>
        </statement>
        <feedback id="mce_6_3_opt_a">
          <p>Take a closer look at the while loop and conditional.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_3_opt_b">
          <p>3</p>
        </statement>
        <feedback id="mce_6_3_opt_b">
          <p>Take a closer look at the while loop and conditional.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_3_opt_c">
          <p>5</p>
        </statement>
        <feedback id="mce_6_3_opt_c">
          <p>Take a closer look at the while loop and conditional.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_6_3_opt_d">
          <p>The loop will run infinitely.</p>
        </statement>
        <feedback id="mce_6_3_opt_d">
          <p>The value of <c>i</c> will always be greater than 2, resulting in an infinite loop.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_6_4">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  int j = 6;
  int i = j + 4;
  cout << "People ";
  i = i % 2;
  i = i - 1;
  while (i < 3) {
    cout << "really ";
    if (i > 0) {
      cout << "really ";
    }
    i += 2;
  }
  cout << "like Joe's Pizza." << endl;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_6_4_opt_a">
          <p>People really like Joe's Pizza.</p>
        </statement>
        <feedback id="mce_6_4_opt_a">
          <p>Take a closer look at the while loop condition.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_6_4_opt_b">
          <p>People really really really like Joe's Pizza.</p>
        </statement>
        <feedback id="mce_6_4_opt_b">
          <p>The code will print out three <q>really</q>s, two from evaluating the while loop
            condition and one from evaluating the if condition before printing out <q>like Joe's
            Pizza</q></p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_4_opt_c">
          <p>People really really really really really like Joe's Pizza.</p>
        </statement>
        <feedback id="mce_6_4_opt_c">
          <p>Take a closer look at the while loop condition.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_4_opt_d">
          <p>The loop will run infinetly.</p>
        </statement>
        <feedback id="mce_6_4_opt_d">
          <p>Take a closer look at the while loop condition and reassignment of <c>i</c></p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_6_5">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  int n = 10;
  // cout << "Da ";
  cout << "na ";
  while (n != 3) {
    cout << "na ";
    n--;
  }
  cout << "Batman!";
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="mce_6_5_opt_a">
          <p>na na na na na na na na Batman!</p>
        </statement>
        <feedback id="mce_6_5_opt_a">
          <p>The code prints out eight <q>na</q>s before printing out <q>Batman!</q></p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_5_opt_b">
          <p>na na na na na na na Batman!</p>
        </statement>
        <feedback id="mce_6_5_opt_b">
          <p>Look over the code carefully. There are output statements before the while loop.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_5_opt_c">
          <p>Da na na na na na na na na Batman!</p>
        </statement>
        <feedback id="mce_6_5_opt_c">
          <p>Will <q>Da</q> ever be printed?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_5_opt_d">
          <p>It will result in an infinite loop.</p>
        </statement>
        <feedback id="mce_6_5_opt_d">
          <p>Since we repeatedly decrement <c>n</c> inside the while loop, it will eventually be
            equal to 3 and the while loop will terminate.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_6_6">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  int n = 10;
  cout << "Da ";
  cout << "na ";
  while (n != 3) {
    cout << "na ";
  }
  cout << "Batman!";
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_6_6_opt_a">
          <p>Batman!</p>
        </statement>
        <feedback id="mce_6_6_opt_a">
          <p>Take a closer look at the while loop.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_6_opt_b">
          <p>Da Batman!</p>
        </statement>
        <feedback id="mce_6_6_opt_b">
          <p>Take a closer look at the while loop.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_6_opt_c">
          <p>Da na na na na na na na na Batman!</p>
        </statement>
        <feedback id="mce_6_6_opt_c">
          <p>Take a closer look at the while loop.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_6_6_opt_d">
          <p>It will result in an infinite loop.</p>
        </statement>
        <feedback id="mce_6_6_opt_d">
          <p>Since we never change the value of <c>n</c>, 10 will never equal 3 so the code will run
            forever.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_6_7">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  int x = 1;
  while (x < 6) {
    cout << x << "\t" << pow (x, 5) / pow (x, 3) << endl;
    x++;
  }
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_6_7_opt_a">
          <p>The first six perfect fifths.</p>
        </statement>
        <feedback id="mce_6_7_opt_a">
          <p>Take a closer look at the while loop and what <c>x</c> was initialized to.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_7_opt_b">
          <p>The first six perfect squares.</p>
        </statement>
        <feedback id="mce_6_7_opt_b">
          <p>Take a closer look at the while loop and what <c>x</c> was initialized to.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_6_7_opt_c">
          <p>The first five perfect squares.</p>
        </statement>
        <feedback id="mce_6_7_opt_c">
          <p>Dividing <c>x</c> to the power of 5 by <c>x</c> to the power of 3 effectively results in
            perfect squares.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_7_opt_d">
          <p>The first five perfect cubes.</p>
        </statement>
        <feedback id="mce_6_7_opt_d">
          <p>Take a closer look at the mathematical expression inside the while loop.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_6_8">
    <statement>
      <p>Why are we allowed to use the variable <c>x</c> in both <c>main</c> and in the function
        definition of <c>superSecretFunction</c>?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int superSecretFunction(int n) {
  int x = 0;
  return (2 + (n * n) - 5 * n / 7) * x;
}

int main() {
  int x = 1;
  cout << "After using the super secret function, we get " << superSecretFunction (x);
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_6_8_opt_a">
          <p>We're using the same variable, but just reassigning the value from 0 to 1.</p>
        </statement>
        <feedback id="mce_6_8_opt_a">
          <p>We are actually using two different variables that happen to have the same name.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_6_8_opt_b">
          <p>Although the name of both variables is <c>x</c>, they represent different locations in
            memory, and thus are different variables.</p>
        </statement>
        <feedback id="mce_6_8_opt_b">
          <p>One <c>x</c> is a local variable of <c>superSecretFunction</c> while the other is a local variable of <c>main</c>
            .</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_8_opt_c">
          <p>We can assign them different values but not the same value. Thus, if both were
            initialized to 0, then we'd get an error.</p>
        </statement>
        <feedback id="mce_6_8_opt_c">
          <p>Since they are not in the same storage location, they can store any value, including
            the same value.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_8_opt_d">
          <p>We're not allowed to do this. The code will result in an error.</p>
        </statement>
        <feedback id="mce_6_8_opt_d">
          <p>The code does not produce an error.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_6_9">
    <statement>
      <p>What is the output of the code below?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int loopFive(int n) {
  while (n % 5 != 0) {
    n = n + 3;
  }
  return n;
}

int main() {
  cout << loopFive (2);
  cout << loopFive (3);
  cout << loopFive (4);
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="mce_6_9_opt_a">
          <p>51510</p>
        </statement>
        <feedback id="mce_6_9_opt_a">
          <p><c>n</c> is repeatedly incremented by 3 until it is divisible by 5, and this happens
            when <c>n</c> is 5, 15, and 10 for the inputs of 2, 3, and 4 respectively.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_9_opt_b">
          <p>234</p>
        </statement>
        <feedback id="mce_6_9_opt_b">
          <p>Although the function returns <c>n</c>, <c>n</c> might not be its original value.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_9_opt_c">
          <p>5 15 10</p>
        </statement>
        <feedback id="mce_6_9_opt_c">
          <p>Take a closer look at the output statements.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_9_opt_d">
          <p>567</p>
        </statement>
        <feedback id="mce_6_9_opt_d">
          <p>Take a closer look at the <c>while</c> loop in the function.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_6_10">
    <statement>
      <p>The super evil villian RePete wants to annoy the city by
        hacking into the city's helper robots and making them repeat
        everything they say 5 times. However, there's an error in his
        code and now the robots won't stop repeating! Can you find the
        error?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
void repeatBot(string input) {
  int n = 0;
  while (n < 5) {
    cout << input << " ";
    n--;
  }
}

int main() {
  repeatBot ("Hello, how may I help you?");
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_6_10_opt_a">
          <p><c>repeatBot</c> can only take one word as an argument.</p>
        </statement>
        <feedback id="mce_6_10_opt_a">
          <p>A <c>string</c> is any number of characters or words surrounded by double quotes, not just
            one word.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_10_opt_b">
          <p><c>n</c> is declared to be 0 and 0 is always less than 5.</p>
        </statement>
        <feedback id="mce_6_10_opt_b">
          <p>The code doesn't loop infinitely because of the value <c>n</c> was declared to be.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_10_opt_c">
          <p>Every time the <c>while</c> loop runs, <c>n</c> is reset to 0, so it will always be less than
            5.</p>
        </statement>
        <feedback id="mce_6_10_opt_c">
          <p>The initialization of <c>n</c> occurs outside the <c>while</c> loop, so the value of <c>n</c>
            does not get reset to 0.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_6_10_opt_d">
          <p><c>n</c> is declared to be 0 and we continuously decrement <c>n</c> so it will always be
            less than 5.</p>
        </statement>
        <feedback id="mce_6_10_opt_d">
          <p>Since <c>n</c> starts at 0 and gets smaller, the conditional for the <c>while</c> loop will
            always be true, and thus the code runs forever.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_6_11">
    <statement>
      <p>After making some changes to his code, RePete tries again.
        This time, however, the robots don't repeat anything!
        Can you find the new error?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
void repeatBot(string input) {
  int n = 0;
  while (n > 5) {
    cout << input << " ";
    n++;
  }
}

int main() {
  repeatBot ("Hello, how may I help you?");
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_6_11_opt_a">
          <p><c>n &gt; 5</c> is not a valid conditional, so the <c>while</c> loop doesn't execute.</p>
        </statement>
        <feedback id="mce_6_11_opt_a">
          <p><c>n &gt; 5</c> is a boolean statement and thus is a valid conditional.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_11_opt_b">
          <p>The value of <c>n</c> never gets modified in the <c>while</c> loop.</p>
        </statement>
        <feedback id="mce_6_11_opt_b">
          <p><c>n</c> is incremented in the <c>while</c> loop after the <c>cout</c> statement.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_6_11_opt_c">
          <p>In the <c>cout</c> statement, only spaces are printed.</p>
        </statement>
        <feedback id="mce_6_11_opt_c">
          <p><c>input</c> is also printed.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_6_11_opt_d">
          <p>The conditional for the <c>while</c> loop is not met.</p>
        </statement>
        <feedback id="mce_6_11_opt_d">
          <p>Since <c>n</c> is declared to be 0, 0 is not greater than 5, so the <c>while</c> loop does
            not execute.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</exercises>