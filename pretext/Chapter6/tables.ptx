<?xml version="1.0"?>
<section xml:id="chapter6_tables">
  <title>Tables</title>
  <p>One of the things loops are good for is generating tabular data. For
    example, before computers were readily available, people had to
    calculate logarithms, sines and cosines, and other common mathematical
    functions by hand. To make that easier, there were books containing long
    tables where you could find the values of various functions. Creating
    these tables was slow and boring, and the result tended to be full of
    errors.</p>
  <p>When computers appeared on the scene, one of the initial reactions was, <q>This is great! We
      can use the computers to generate the tables, so
      there will be no errors.</q> That turned out to be true (mostly), but shortsighted. Soon
    thereafter computers and calculators were so pervasive that the tables became obsolete.</p>
  <p>Well, almost. It turns out that for some operations, computers use
    tables of values to get an approximate answer, and then perform
    computations to improve the approximation. In some cases, there have
    been errors in the underlying tables, most famously in the table the
    original Intel Pentium used to perform floating-point division.</p>
  <p>Although a <q>log table</q> is not as useful as it once was, it still makes a good example of
    iteration.</p>
  <listing label="tables_AC_1">
    <caption>
      This active code outputs a sequence of values in the left column
        and their logarithms in the right column.
    </caption>
    <program xml:id="tables_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    double x = 1.0;
    while (x < 10.0) {
        cout << x << "\t" << log(x) << "\n";
        x = x + 1.0;
    }
    return 0;
}
        ]]></code>
    </program>
  </listing>
  <p>The sequence <c>\t</c> represents a <term>tab</term> character. The sequence <c>\n</c> represents a
    newline character. These sequences can be included anywhere in a string, although in these
    examples the sequence is the whole string.</p>
  <p>A tab character causes the cursor to shift to the right until it reaches one of the <term>tab
    stops</term>, which are normally every eight characters. As we will see in a minute, tabs are
    useful for making columns of text line up.</p>
  <p>A newline character has exactly the same effect as <c>endl</c>; it causes the cursor to move on to
    the next line. Usually if a newline character appears by itself, I use <c>endl</c>, but if it
    appears as part of a string, I use <c>\n</c>.</p>
  <p>The output of this program is</p>
  <console>
    <output>1      0
2      0.693147
3      1.09861
4      1.38629
5      1.60944
6      1.79176
7      1.94591
8      2.07944
9      2.19722</output>
  </console>
  <p>If these values seem odd, remember that the <c>log</c> function uses base <m>e</m>. Since powers
    of two are so important in computer science, we often want to find logarithms with respect to
    base 2. To do that, we can use the following formula:</p>
  <m>\log_2 x = \frac {log_e x}{log_e 2}</m>
  <p>Changing the output statement to</p>
  <program>
cout &lt;&lt; x &lt;&lt; "\t" &lt;&lt; log(x) / log(2.0) &lt;&lt; endl;
</program>
  <p>yields</p>
  <console>
    <output>1      0
2      1
3      1.58496
4      2
5      2.32193
6      2.58496
7      2.80735
8      3
9      3.16993</output>
  </console>
  <p>We can see that 1, 2, 4 and 8 are powers of two, because their
    logarithms base 2 are round numbers. If we wanted to find the logarithms
    of other powers of two, we could modify the program like this:</p>
  <listing label="tables_AC_2">
    <caption>
      If we wanted to find the logarithms of other powers of two,
        we could modify the program like this. Run this active code.
    </caption>
    <program xml:id="tables_AC_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    double x = 1.0;
    while (x < 100.0) {
        cout << x << "\t" << log(x) / log(2.0) << endl;
        x = x * 2.0;
    }
}
        ]]></code>
    </program>
  </listing>
  <p>Now instead of adding something to <c>x</c> each time through the loop, which yields an
    arithmetic sequence, we multiply <c>x</c> by something, yielding a <term>geometric</term>
    sequence. The result is:</p>
  <console>
    <output>1      0
2      1
4      2
8      3
16     4
32     5
64     6</output>
  </console>
  <p>Because we are using tab characters between the columns, the position of
    the second column does not depend on the number of digits in the first
    column.</p>
  <p>Log tables may not be useful any more, but for computer scientists, knowing the powers of two
    is! As an exercise, modify this program so that it outputs the powers of two up to 65536 (that's <m>
    2^{16}</m>). Print it out and memorize it.</p>
  <exercise label="tables_AC_3">
    <statement>
      <p>Modify this active code so that it outputs the power of two up to 65536, which is <m>
        2^{16}</m>. If you get stuck, you can reveal the hint below the problem for help.</p>
    </statement>
    <program xml:id="tables_AC_3_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    double x = 1.0;
    while (x < 100.0) {
        cout << x << "\t" << log(x) / log(2.0) << endl;
        x = x * 2.0;
    }
}
        ]]></code>
    </program>
    <hint>
      <activity label="tables_1"
                numbered="yes"
                adaptive="yes"
                indentation="hide">
      <statement>
        <p>Let's write the code that prints out the powers of two.</p>
      </statement>
      <blocks>
        <block order="3">
          <cline>int main() {</cline>
        </block>
        <block order="4">
          <cline>   int x = 1;</cline>
        </block>
        <block order="2">
          <choice correct="yes">
            <cline>   while (x &lt; 17) {</cline>
          </choice>
          <choice>
            <cline><![CDATA[   while (x < 16) {                        ]]></cline>
          </choice>
        </block>
        <block order="6">
          <choice correct="yes">
            <cline><![CDATA[      cout << x << "\t" << pow(2, x) << endl;]]></cline>
          </choice>
          <choice>
            <cline><![CDATA[      cout << x << "\t" << pow(x, 2) << endl;                        ]]></cline>
          </choice>
        </block>
        <block order="1">
          <cline>      x++;</cline>
          <cline>   }</cline>
          <cline>}</cline>
        </block>
      </blocks>
    </activity>
    </hint>
  </exercise>
  <exercise label="tables_2">
    <statement>
      <p>What is the equivalent of endl, and typically used at the end of a string? <var/>
      </p>
    </statement>
    <setup>
      <var case="insensitive">
        <condition string="^\s*(?:(?:\\n)|(?:(?:n|N)ewline\s(?:c|C)haracter))\s*$">
          <feedback>
            <p>Is the correct answer!</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Try again!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="tables_3">
    <statement>
      <p>How would you write a tab character? <var/>
      </p>
    </statement>
    <setup>
      <var case="insensitive">
        <condition string="^\s*(?:\\t)\s*$">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Try again!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="tables_4">
    <statement>
      <p>How can we modify the code below to print out a table of the first five odd numbers and
        their perfect cubes?</p>
      <program line-numbers="yes">
        <code><![CDATA[
int main() {
  int x = 1;
  while (x < 11) {
    cout << x << "\t" << pow(x, 2) << endl;
    x = x + 1;
  }
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="tables_4_opt_a">
          <p>Change <c>pow(x,2)</c> to <c>pow(3,x)</c> and change <c>x = x + 1</c> to <c>x = x + 2</c>.</p>
        </statement>
        <feedback id="tables_4_opt_a">
          <field_list>
            <field>
              <field_name>feedback_a</field_name>
              <field_body>
                <p>Check the order of the <c>pow</c> function!</p>
              </field_body>
            </field>
          </field_list>
        </feedback>
      </choice>
      <choice>
        <statement id="tables_4_opt_b">
          <p>Change <c>pow(x,2)</c> to <c>pow(x,3)</c>.</p>
        </statement>
        <feedback id="tables_4_opt_b">
          <p>This will print out the first ten perfect cubes.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="tables_4_opt_c">
          <p>Change <c>pow(x,2)</c> to <c>pow(x,3)</c> and change <c>x = x + 1</c> to <c>x = x + 2</c>.</p>
        </statement>
        <feedback id="tables_4_opt_c">
          <p>Changing both the <c>pow</c> function and the increment in this way gives us the right
            answer.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="tables_4_opt_d">
          <p>Change <c>x &lt; 11</c> to <c>x &lt; 6</c> and change <c>pow(x,2)</c> to <c>pow(x,3)</c>.</p>
        </statement>
        <feedback id="tables_4_opt_d">
          <p>This will print out the first five perfect cubes, but not the first five odd perfect
            cubes.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>