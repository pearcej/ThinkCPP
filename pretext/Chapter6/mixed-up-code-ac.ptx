<?xml version="1.0"?>
<section xml:id="chapter6_activecode-exercises">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to
            assess what you have learned in this chapter.</p>
  <exercise label="XXX">
    <statement>
      <p>Write a program that prints out the even numbers between 20 and 40, inclusive.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_6_1_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the program

    
    <program xml:id="mucp_6_1_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
   int n = 20;
   while (n <= 40) {
      cout << n << endl;
      n = n + 2;
   }
}
        ]]></code></program>

            

<exercise label="mucp_6_1_ac_a"><statement><p>Below is one way to write the program</p></statement><program xml:id="mucp_6_1_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
   int n = 20;
   while (n <= 40) {
      cout << n << endl;
      n = n + 2;
   }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write a program that counts down from 100 to 0 in decrements of 10.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_6_2_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the program

    
    <program xml:id="mucp_6_2_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
   int n = 100;
   while (n >= 0) {
      cout << n << endl;
      n -= 10;
   }
}
        ]]></code></program>

            

<exercise label="mucp_6_2_ac_a"><statement><p>Below is one way to write the program</p></statement><program xml:id="mucp_6_2_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
   int n = 100;
   while (n >= 0) {
      cout << n << endl;
      n -= 10;
   }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write a program that finds the sum of the first 10 natural numbers.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_6_3_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the program.

    
    <program xml:id="mucp_6_3_aq_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
   int n = 1;
   int sum = 0;
   while (n <= 10) {
      sum = sum + n;
      n++;
   }
}
        ]]></code></program>

            

<exercise label="mucp_6_3_aq_a"><statement><p>Below is one way to write the program.</p></statement><program xml:id="mucp_6_3_aq_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
   int n = 1;
   int sum = 0;
   while (n <= 10) {
      sum = sum + n;
      n++;
   }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write a function, <c>repreatHello</c>, that is a void function that takes no arguments and uses a while loop to print out <q>hello</q> three times.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_6_4_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
   repeatHello();
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the function

    
    <program xml:id="mucp_6_4_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void repeatHello() {
   int n = 0;
   while (n < 3) {
      cout << "hello" << endl;
      n++;
   }
}

int main() {
   repeatHello();
}
        ]]></code></program>

            

<exercise label="mucp_6_4_ac_a"><statement><p>Below is one way to write the function</p></statement><program xml:id="mucp_6_4_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void repeatHello() {
   int n = 0;
   while (n < 3) {
      cout << "hello" << endl;
      n++;
   }
}

int main() {
   repeatHello();
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Now let's generalize the repeatHello function so that it repeats a given string three times.
                    Let's write the code for the <c>repeatString</c> function, which takes
                    input as a parameter and uses a while loop to print out the string three times.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_6_5_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
   repeatString("Hello world");
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the function.

    
    <program xml:id="mucp_6_5_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void repeatString(string input) {
   int n = 0;
   while (n < 3) {
      cout << input << endl;
      n++;
   }
}

int main() {
   repeatString("Hello world");
}
        ]]></code></program>

            

<exercise label="mucp_6_5_ac_a"><statement><p>Below is one way to write the function.</p></statement><program xml:id="mucp_6_5_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void repeatString(string input) {
   int n = 0;
   while (n < 3) {
      cout << input << endl;
      n++;
   }
}

int main() {
   repeatString("Hello world");
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>We can further generalize repeatString so that it repeats a given string a given number of times.
                    Let's write the code for the new <c>repeatString</c> function, which takes
                    input and x as parameters and uses a while loop to print out the string x number of times.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_6_6_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
   repeatString("Hello world!", 5);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the function

    
    <program xml:id="mucp_6_6_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void repeatString(string input, int x) {
   int n = 0;
   while (n < x) {
      cout << input << endl;
      n = n + 1;
   }
}

int main() {
   repeatString("Hello world!", 5);
}
        ]]></code></program>

            

<exercise label="mucp_6_6_ac_a"><statement><p>Below is one way to write the function</p></statement><program xml:id="mucp_6_6_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void repeatString(string input, int x) {
   int n = 0;
   while (n < x) {
      cout << input << endl;
      n = n + 1;
   }
}

int main() {
   repeatString("Hello world!", 5);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>On the last day of every year, we count down the seconds before the new year arrives.
                    Write the function <c>newYearCountdown</c>, which prints out a countdown from 10 and then
                    prints out <q>Happy New Year!</q>.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_6_7_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
   newYearCountdown();
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the function.

    
    <program xml:id="mucp_6_7_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void newYearCountdown() {
   int n = 10;
   while (n > 0) {
      cout << n << " ";
      n--;
   }
   cout << "Happy New Year!" << endl;
}

int main() {
   newYearCountdown();
}
        ]]></code></program>

            

<exercise label="mucp_6_7_ac_a"><statement><p>Below is one way to write the function.</p></statement><program xml:id="mucp_6_7_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void newYearCountdown() {
   int n = 10;
   while (n > 0) {
      cout << n << " ";
      n--;
   }
   cout << "Happy New Year!" << endl;
}

int main() {
   newYearCountdown();
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Help Goku reach power levels of over 9000! Write the function
                    <c>powerUp</c> which takes powerLevel as a parameter.
                    powerUp checks to see if powerLevel is over 9000. If it
                    isn't, it repeatedly prints <q>More power!</q> and increments powerLevel by
                    1000 until powerLevel is over 9000. Then powerUp prints <q>It's over 9000!</q>.
                    Write the necessary code for the powerUp function.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_6_8_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
   powerUp(5000);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the function

    
    <program xml:id="mucp_6_8_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void powerUp(int powerLevel) {
   while (powerLevel < 9000) {
      cout << "More power!" << endl;
      powerLevel = powerLevel + 1000;
   }
   cout << "It's over 9000!" << endl;
}

int main() {
   powerUp(5000);
}
        ]]></code></program>

            

<exercise label="mucp_6_8_ac_a"><statement><p>Below is one way to write the function</p></statement><program xml:id="mucp_6_8_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void powerUp(int powerLevel) {
   while (powerLevel < 9000) {
      cout << "More power!" << endl;
      powerLevel = powerLevel + 1000;
   }
   cout << "It's over 9000!" << endl;
}

int main() {
   powerUp(5000);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write the function <c>summation</c> which takes two
                    parameters, start and end. summation adds
                    all the integers from start to end, inclusive, together and returns
                    the sum. Write the necessary code for the summation function.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_6_9_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


        ]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("summation function") {
   REQUIRE(summation(1,5) == 15);
   REQUIRE(summation(1,9) == 45);
   REQUIRE(summation(1,20) == 210);
}
</tests>
    </program>
    <solution>


    
                Below is one way to write the function

    
    <program xml:id="mucp_6_9_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int summation(int start, int end) {
   int n = start;
   int sum = 0;
   while (n <= end) {
      sum = sum + n;
      n++;
   }
   return sum;
}

int main() {
   summation(1,10);
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("summation function") {
   REQUIRE(summation(1,5) == 15);
   REQUIRE(summation(1,9) == 45);
   REQUIRE(summation(1,20) == 210);
}
</tests></program>

            

<exercise label="mucp_6_9_ac_a"><statement><p>Below is one way to write the function</p></statement><program xml:id="mucp_6_9_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int summation(int start, int end) {
   int n = start;
   int sum = 0;
   while (n <= end) {
      sum = sum + n;
      n++;
   }
   return sum;
}

int main() {
   summation(1,10);
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("summation function") {
   REQUIRE(summation(1,5) == 15);
   REQUIRE(summation(1,9) == 45);
   REQUIRE(summation(1,20) == 210);
}
</tests></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write the function <c>reverseNumber</c> which takes num
                    as a parameter and returns num but with its digits reversed.
                    For example, reverseNumber (1324) returns 4231.
                    Write the necessary code, with reverse
                    declared first, then temp, and lastly remainder.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_6_10_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


        ]]></code>
      <tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("reverseNumber function") {
   REQUIRE(reverseNumber(1324) == 4231);
   REQUIRE(reverseNumber(4231) == 1324);
   REQUIRE(reverseNumber(1) == 1);
}
</tests>
    </program>
    <solution>


    
                Below is one way to write the function

    
    <program xml:id="mucp_6_10_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int reverseNumber(int num) {
   int reverse = 0;
   int temp = num;
   int remainder = 0;
   while (temp > 0) {
      remainder = temp % 10;
      reverse = reverse * 10 + remainder;
      temp = temp / 10;
   }
   return reverse;
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("reverseNumber function") {
   REQUIRE(reverseNumber(1324) == 4231);
   REQUIRE(reverseNumber(4231) == 1324);
   REQUIRE(reverseNumber(1) == 1);
}
</tests></program>

            

<exercise label="mucp_6_10_ac_a"><statement><p>Below is one way to write the function</p></statement><program xml:id="mucp_6_10_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int reverseNumber(int num) {
   int reverse = 0;
   int temp = num;
   int remainder = 0;
   while (temp > 0) {
      remainder = temp % 10;
      reverse = reverse * 10 + remainder;
      temp = temp / 10;
   }
   return reverse;
}

        ]]></code><tests>
#define CATCH_CONFIG_MAIN
#include &lt;catch.hpp&gt;

TEST_CASE("reverseNumber function") {
   REQUIRE(reverseNumber(1324) == 4231);
   REQUIRE(reverseNumber(4231) == 1324);
   REQUIRE(reverseNumber(1) == 1);
}
</tests></program></exercise>
            </solution>
  </exercise>
</section>
