<?xml version="1.0"?>
<section xml:id="chapter15_parsing-numbers">
  <title>Parsing numbers</title>
  <p>The next task is to convert the numbers in the file from strings to integers. When people write
    large numbers, they often use commas to group the digits, as in 1,750. Most of the time when
    computers write large numbers, they don't include commas, and the built-in functions for reading
    numbers usually can't handle them. That makes the conversion a little more difficult, but it
    also provides an opportunity to write a comma-stripping function, so that's ok. Once we get rid
    of the commas, we can use the library function <c>atoi</c> to convert to integer. <c>atoi</c> is defined
    in the header file <c>cstdlib</c>.</p>
  <p>To get rid of the commas, one option is to traverse the string and check
    whether each character is a digit. If so, we add it to the result
    string. At the end of the loop, the result string contains all the
    digits from the original string, in order.</p>
  <program> #include &lt;iostream&gt;
 using namespace std;

int convertToInt(const string&amp; s)
{
  string digitString = "";

  for (size_t i = 0; i &lt; s.length(); i++) {
    if (isdigit (s[i])) {
      digitString += s[i];
    }
  }
  return atoi(digitString);
}</program>
  <p>The variable <c>digitString</c> is an example of an <term>accumulator</term>. It is similar to the counter
    we saw in <xref ref="chapter7_looping-and-counting-loopcount"/>, except that
    instead of getting incremented, it gets accumulates one new character at a time, using string
    concatentation.</p>
  <p>The expression</p>
  <program>
digitString += s[i];
</program>
  <p>is equivalent to</p>
  <program>
digitString = digitString + s[i];
</program>
  <p>Both statements add a single character onto the end of the existing
    string.</p>
  <p>Try the function out for yourself! As you can see, this function can also be used
    to parse phone numbers!</p>
  <program xml:id="c15_6"
           interactive="activecode"
           line-numbers="yes">
    <code><![CDATA[
#include <iostream>
#include <string>
#include <vector>
using namespace std;

int convertToInt(const string& s) {
   string digitString = "";

   for (size_t i = 0; i < s.length(); i++) {
      if (isdigit (s[i])) {
         digitString += s[i];
      }
   }
   return atoi(digitString);
}

int main() {
   int num = convertToInt("867-5309");
   cout << num << endl;
}
        ]]></code>
  </program>
  <exercise label="question15_6_1">
    <statement>
      <p>What does the <c>atoi()</c> function do?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>takes the absolute value of a number</p>
        </statement>
        <feedback>
          <p>Incorrect! Go back and read for the answer.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>converts a double to an int</p>
        </statement>
        <feedback>
          <p>Incorrect! Go back and read for the answer.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>converts a string to an int</p>
        </statement>
        <feedback>
          <p>Correct! This is very helpful when we read numbers from a file (where they are
            strings).</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>converts an int to a string</p>
        </statement>
        <feedback>
          <p>Incorrect! Go back and read for the answer.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question15_6_2">
    <statement>
      <p>Which of the following strings will return <q>2020</q> when passed into <c>convertToInt()</c>?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>2020</p>
        </statement>
        <feedback>
          <p>Correct! This one is quite simple.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>ab,jkl2!!moo0?huh2mth0haha.</p>
        </statement>
        <feedback>
          <p>Correct! This long, confusing string will clean up nicely!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2,00!!!!!!!!2</p>
        </statement>
        <feedback>
          <p>Incorrect!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2OOO020OOOOO</p>
        </statement>
        <feedback>
          <p>Correct! You have to look closely to see that some of these are 0's!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>we2love0parsing2numbersO!</p>
        </statement>
        <feedback>
          <p>Incorrect! Although we do love parsing numbers, this is incorrect.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question15_6_3"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Create the replace_with() function that takes a string <q>str</q>, a character to get rid
        of <q>olc_char</q>, and a character to replace it with <q>new_char</q>. It should return a
        new string that has replaces any occurances of old_char with new_char.</p>
    </statement>
    <blocks>
      <block order="10">
        <choice correct="yes">
          <cline>string replace_with(string str, char old_char, char new_char) {</cline>
        </choice>
        <choice>
          <cline>string replace_with() {                              </cline>
        </choice>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline><![CDATA[ for (size_t i = 0; i < str.length(); i++) {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[ for (int i = 0; i < str.length(); i++) {                              ]]></cline>
        </choice>
      </block>
      <block order="9">
        <cline><![CDATA[ for (size_t i = 0; i < str.size(); i++) {                              ]]></cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>  if (str[i] == old_char) {</cline>
        </choice>
        <choice>
          <cline>  if (i == old_char) {                              </cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>   str[i] = new_char;</cline>
          <cline>  }</cline>
        </choice>
        <choice>
          <cline>   new_char = str[i];                              </cline>
          <cline>  }</cline>
        </choice>
      </block>
      <block order="2">
        <cline>   i = new_char;                              </cline>
        <cline>  }</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline> }</cline>
          <cline> return str;</cline>
          <cline>}</cline>
        </choice>
        <choice>
          <cline> }                              </cline>
          <cline> return new_char;</cline>
          <cline>}</cline>
        </choice>
      </block>
    </blocks>
  </exercise>
</section>