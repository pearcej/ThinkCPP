<exercises xml:id="chapter15_coding-practice">
  <title>Coding Practice</title>
  <exercise label="cp_15_1">
    <statement>
      <p>Write a program that takes in an input file called <c>poem.txt</c> <fn>
          <datafile label="poem.txt"
                    filename="poem.txt"
                    cols="10"
                    rows="5">
            <pre>Two roads diverged in a yellow wood,
And sorry I could not travel both
And be one traveler, long I stood
And looked down one as far as I could
To where it bent in the undergrowth;
Then took the other, as just as fair,
And having perhaps the better claim
Because it was grassy and wanted wear,
Though as for that the passing there
Had worn them really about the same,
And both that morning equally lay
In leaves no step had trodden black.
Oh, I kept the first for another day!
Yet knowing how way leads on to way
I doubted if I should ever come back.
I shall be telling this with a sigh
Somewhere ages and ages hence:
Two roads diverged in a wood, and I,
I took the one less traveled by,
And that has made all the difference.</pre>
          </datafile>
        </fn> and prints the first 5 lines to the
  terminal. Include proper file error checking.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_15_AC_1q">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

// Write your code here.
        </code>
    </program>
    <solution>
      <p>Below is one way to implement this program. We create an <c>ifstream</c> object to open our file.
  We check to make sure the file is opened correctly before we use <c>getline</c> in a <c>for</c> loop to
  retrieve and print the first 5 lines of the poem.</p>
      <program xml:id="cp_15_AC_1a">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

int main() {
    ifstream infile("poem.txt");
    string input;
    if (!infile.good()) {
        cout &lt;&lt; "Error. Unable to open file." &lt;&lt; endl;
        exit(1);
    }
    for (int i = 0; i &lt; 5; ++i) {
        getline(infile, input);
        cout &lt;&lt; input &lt;&lt; endl;
    }
}
        </code>
    </program>
    </solution>
  </exercise>
  <exercise label="cp_15_2_q">
    <statement>
      <p>Write a program that prompts a user for the name of an input file and for an integer <c>n</c>.
  Then open the file and output the first <c>n</c> lines of the file with each line reversed. For
  example, if you read in the line &#8220;hello world&#8221; you should print out &#8220;dlrow
  olleh&#8221; to the terminal. Include proper file error checking. Check the hint below for help with the construction of the code.</p>
      <!-- 
      No need for a particular file given the ask of this program...
      <datafile label="moon-speech.txt" filename="moon-speech.txt">
        <pre>We choose to go to the Moon. We choose to go to the Moon...
We choose to go to the Moon in this decade and do the other things,
not because they are easy, but because they are hard; because that goal
will serve to organize and measure the best of our energies and skills,
because that challenge is one that we are willing to accept, one we are
unwilling to postpone, and one we intend to win, and the others, too.</pre>
      </datafile> -->
    </statement>
    <program interactive="activecode"
             xml:id="cp_15_AC_2q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

// Write your code here.
        </code>
    </program>
    <hint>
      <activity label="cp_15_AC_2q_pp">
        <statement>
          <p>Write a program that prompts a user for the name of an input file and for an integer <c>n</c>.
  Then open the file and output the first <c>n</c> lines of the file with each line reversed. For
  example, if you read in the line &#8220;hello world&#8221; you should print out &#8220;dlrow
  olleh&#8221; to the terminal. Include proper file error checking. Use the lines to construct the
  code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="13">
            <cline>int main () {</cline>
          </block>
          <block order="6">
            <cline>   string fileIn;</cline>
          </block>
          <block order="12">
            <cline>   int n;</cline>
          </block>
          <block order="9">
            <cline>   string line;</cline>
          </block>
          <block order="8">
            <cline>   cout &lt;&lt; "Enter the name of the file: ";</cline>
            <cline>   cin &gt;&gt; fileIn;</cline>
            <cline>   cout &lt;&lt; fileIn &lt;&lt; endl;</cline>
          </block>
          <block order="11">
            <cline>   cout &lt;&lt; "Enter an integer: ";</cline>
            <cline>   cin &gt;&gt; n;</cline>
            <cline>   cout &lt;&lt; n &lt;&lt; endl;</cline>
          </block>
          <block order="3">
            <cline>   ifstream inFile(fileIn.c_str());</cline>
          </block>
          <block order="1">
            <cline>   if (inFile.good() == false) {</cline>
            <cline>      cout &lt;&lt; "Unable to open the file named " &lt;&lt; fileIn &lt;&lt; " and output " &lt;&lt; n &lt;&lt; " lines." &lt;&lt; endl;</cline>
            <cline>      exit(1);</cline>
            <cline>   }</cline>
          </block>
          <block order="5">
            <cline>   for (int i = 0; i &lt; n; i++) {</cline>
          </block>
          <block order="10">
            <cline>      getline(inFile, line);</cline>
          </block>
          <block order="4">
            <cline>      cout &lt;&lt; line &lt;&lt; endl;</cline>
          </block>
          <block order="2">
            <cline>   }</cline>
          </block>
          <block order="7">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>



  <exercise label="cp_15_3">
    <statement>
      <p>Write a program that takes in an input file called <c>heights.txt</c><fn>
          <datafile label="heights.txt"
                    filename="heights.txt">
            <pre>62  67      75      68      65
67  70      72      74      66
72  66      66      73      69
61  60      73      72      60</pre>
          </datafile>
        </fn>, finds the median of the data, and prints
  &#8220;The median height is: <c>height</c> inches&#8221; to the terminal. Include proper file error
  checking.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_15_AC_3q">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
using namespace std;

// Write your code here.
        </code>
    </program>
    <solution>
      <p>Below is one way to implement this program. We create an <c>ifstream</c> object to open our file.
  We check to make sure the file is opened correctly before we read the data values into a vector.
  After sorting the vector, we find the median depending on whether the number of data values was
  even or odd. Finally, we output our result to the terminal.</p>
      <program xml:id="cp_15_AC_3a">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
using namespace std;

int main() {
    ifstream infile("heights.txt");
    vector&lt;int&gt; data;
    double median;
    int height;
    if (!infile.good()) {
        cout &lt;&lt; "Error. Unable to open file." &lt;&lt; endl;
        exit(1);
    }
    while (infile &gt;&gt; height) {
        data.push_back(height);
    }
    sort(data.begin(), data.end());
    if (data.size() % 2 == 0) {
        median = (data[data.size() / 2 - 1] + data[data.size() / 2]) / 2.0;
    }
    else {
        median = data[data.size() / 2];
    }
    cout &lt;&lt; "The median height is: " &lt;&lt; median &lt;&lt; " inches" &lt;&lt; endl;
}
        </code>
    </program>
    </solution>
  </exercise>

  <exercise label="cp_15_4_q">
    <statement>
      <p>Write a program that prompts a user for an integer <c>n</c> and print the first <c>n</c>
  powers of 2 to an output file called <c>powers.txt</c>. Include proper file error checking. To simulate what
  your output file would look like, the contents of your output file will be displayed on the
  terminal. Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_15_AC_4q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cmath&gt;
using namespace std;

int main() {
   // Write your code here.





   // Do not modify the code below
   ifstream student_output("powers.txt");
   if (!student_output.good()) {
         cout &lt;&lt; "Error opening student's output." &lt;&lt; endl;
   }
   string answer;
   while (getline(student_output, answer)) {
         cout &lt;&lt; answer &lt;&lt; endl;
   }
}
        </code>
    </program>
    <hint>
      <activity label="cp_15_AC_4q_pp">
        <statement>
          <p>Write a program that prompts a user for an integer <c>n</c> and print the first <c>n</c>
  powers of 2 to an output file called <c>powers.txt</c>. Include proper file error checking. To simulate what
  your output file would look like, the contents of your output file will be displayed on the
  terminal. Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="3">
            <cline>int main() {</cline>
          </block>
          <block order="7">
            <cline>   int n;</cline>
          </block>
          <block order="14">
            <cline>   cout &lt;&lt; "Enter an integer: ";</cline>
          </block>
          <block order="9">
            <cline>   cin &gt;&gt; n;</cline>
          </block>
          <block order="6">
            <cline>   cout &lt;&lt; n &lt;&lt; endl;</cline>
          </block>
          <block order="4">
            <cline>   ofstream outfile ("powers.txt");</cline>
          </block>
          <block order="12">
            <cline>   if (outfile.good() == false) {</cline>
            <cline>      cout &lt;&lt; "Unable to open output file." &lt;&lt; endl;</cline>
            <cline>      exit (1);</cline>
            <cline>   }</cline>
          </block>
          <block order="5">
            <cline>   while (true) {</cline>
          </block>
          <block order="10">
            <cline>      for (int i = 0; i &lt; n; i++) {</cline>
          </block>
          <block order="15">
            <cline>            outfile &lt;&lt; pow(2,i) &lt;&lt; endl;</cline>
          </block>
          <block order="8">
            <cline>      }</cline>
          </block>
          <block order="11">
            <cline>   }</cline>
          </block>
          <block order="17">
            <cline>   ifstream student_output("powers.txt");</cline>
          </block>
          <block order="13">
            <cline>   if (!student_output.good()) {</cline>
            <cline>      cout &lt;&lt; "Error opening student's output." &lt;&lt; endl;</cline>
            <cline>   }</cline>
          </block>
          <block order="2">
            <cline>   string answer;</cline>
          </block>
          <block order="1">
            <cline>   while (getline(student_output, answer)) {</cline>
            <cline>      cout &lt;&lt; answer &lt;&lt; endl;</cline>
            <cline>   }</cline>
          </block>
          <block order="16">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>


  <exercise label="cp_15_5">
    <statement>
      <p>ROT13 is a simple Caesar cipher that replaces each letter in a string with the 13th letter
  after it in the alphabet. For example, using ROT13 on the letter &#8220;a&#8221; would turn it
  into &#8220;n&#8221;. Notice how since 13 is exactly half the number of characters in the
  alphabet, using ROT13 on the letter &#8220;n&#8221; would turn it into &#8220;a&#8221;. Thus,
  ROT13 can be used to encrypt and decrypt messages. Write a program that takes in an input file
  called <c>message.txt</c><fn>
          <datafile label="message.txt"
                    filename="message.txt">
            <pre>Pbatenghyngvbaf! Lbh'ir qrpelcgrq guvf zrffntr.</pre>
          </datafile>
        </fn>applies ROT13, and outputs the result to
  the terminal. Include proper file error checking.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_15_AC_5q">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cctype&gt;
using namespace std;

int main() {
    // Write your code here.
}
        </code>
    </program>
    <solution>
      <p>Below is one way to implement this program. We create an <c>ifstream</c> object to open our file.
  We check to make sure the file is opened correctly before we read the data values into a string.
  We call our <c>ROT13</c> function and output the result to the output file.</p>
      <program xml:id="cp_15_AC_5a">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cctype&gt;
using namespace std;

string ROT13 (string message) {
    for (size_t i = 0; i &lt; message.size(); ++i) {
        if (isalpha(message[i])) {
            if (message[i] &gt;= 'A' &amp;&amp; message[i] &lt;= 'Z') {
                if (message[i] &lt;= 'M') {
                    message[i] = message[i] + 13;
                }
                else {
                    message[i] = message[i] - 13;
                }
            }
            else {
                 if (message[i] &lt;= 'm') {
                    message[i] = message[i] + 13;
                }
                else {
                    message[i] = message[i] - 13;
                }
            }
        }
    }
    return message;
}

int main() {
    ifstream infile("message.txt");
    string message;
    if (!infile.good()) {
        cout &lt;&lt; "Error. Unable to open file." &lt;&lt; endl;
        exit(1);
    }
    while (getline(infile, message)) {
        cout &lt;&lt; ROT13(message) &lt;&lt; endl;
    }
}
        </code>
    </program>
    </solution>
  </exercise>
  <exercise label="cp_15_7">
    <statement>
      <p>Write a program that reads in data about a class from the file <c>class_data.txt</c><fn>
          <datafile label="class_data.txt"
                    filename="class_data.txt">
            <p>Below are the contents of the input file.</p>
            <pre>First    Last       Grade    GPA    Age
Alex     Jones      9        3.4    14
Beth     Hamilton   12       3.7    18
Charles  White      11       3.5    16
Daniel   Kim        10       3.8    16
Ethan    Brooks     11       3.9    17
Faith    Flemmings  10       3.0    15
Gina     Zhou       9        3.2    14</pre>
          </datafile></fn> and outputs the rows
  of data where a student has a GPA of at least 3.5. Include proper file error checking.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_15_AC_7q">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

int main() {
    // Write your code here.
}
        </code>
    </program>
    <solution><p>Below is one way to implement this program. We create an <c>ifstream</c> object to open our
  file. We check to make sure the file is opened correctly before we read the data values into
  corresponding variables. We check if the GPA is at least 3.5, and print the data values to the
  terminal if so.</p> Below is one way to implement this program. We create an ifstream object to
  open our file. We check to make sure the file is opened correctly before we read the data values
  into corresponding variables. We check if the GPA is at least 3.5, and print the data values to
  the terminal if so. <program xml:id="cp_15_AC_7a">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

int main() {
    ifstream infile("class_data.txt");
    string fname, lname;
    int grade, age;
    double gpa;
    if (!infile.good()) {
        cout &lt;&lt; "Error. Unable to open file." &lt;&lt; endl;
        exit(1);
    }
    getline(infile, fname);
    while (infile &gt;&gt; fname &gt;&gt; lname &gt;&gt; grade &gt;&gt; gpa &gt;&gt; age) {
        if (gpa &gt;= 3.5) {
            cout &lt;&lt; fname &lt;&lt; '\t' &lt;&lt; lname &lt;&lt; '\t' &lt;&lt; grade
                 &lt;&lt; '\t' &lt;&lt; gpa &lt;&lt; '\t' &lt;&lt; age &lt;&lt; endl;
        }
    }
}
        </code>
    </program>
    </solution>
  </exercise>

  <exercise label="cp_15_8_q">
    <statement>
      <p>Write a program that takes an input file called <c>shrimp.txt</c> and outputs
        the contents of the file where "shrimp" is replaced by a word that the user inputs to the terminal.
  Include proper file error checking.
        Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_15_AC_8q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

// Write your code here.
        </code>
    </program>
    <hint>
      <activity label="cp_15_AC_8q_pp">
        <statement>
          <p>Write a program that takes an input file called &#8220;shrimp.txt&#8221; and outputs
            the quote with &#8220;shrimp&#8221; replaced by a word that the user inputs to the
  terminal.
            Include proper file error checking.
            Use the lines to construct the code, then go back to complete the Activecode.</p>

          <datafile label="shrimp.txt"
                    filename="shrimp.txt">
            <pre>There's pineapple shrimp, lemon shrimp, coconut shrimp,
pepper shrimp, shrimp soup, shrimp stew, shrimp salad,
shrimp and potatoes, shrimp burger, shrimp sandwich.
That- that's about it.</pre>
          </datafile>
        </statement>
        <blocks>
          <block order="5">
            <cline>int main() {</cline>
          </block>
          <block order="14">
            <cline>   string word;</cline>
          </block>
          <block order="7">
            <cline>   cout &lt;&lt; "Enter word to replace 'shrimp': ";</cline>
          </block>
          <block order="15">
            <cline>   cin &gt;&gt; word;</cline>
          </block>
          <block order="10">
            <cline>   cout &lt;&lt; word &lt;&lt; endl;</cline>
          </block>
          <block order="2">
            <cline>   string replace = "shrimp";</cline>
          </block>
          <block order="17">
            <cline>   ifstream inFile("shrimp.txt");</cline>
          </block>
          <block order="9">
            <cline>   string line;</cline>
          </block>
          <block order="13">
            <cline>   for (int i = 0; i &lt; 4; i++) {</cline>
          </block>
          <block order="1">
            <cline>      getline(inFile,line);</cline>
          </block>
          <block order="3">
            <cline>      for (int unsigned j = 0; j &lt; line.size(); j++) {</cline>
          </block>
          <block order="4">
            <cline>         size_t pos = line.find(replace);</cline>
          </block>
          <block order="8">
            <cline>         if (pos != std::string::npos) {</cline>
          </block>
          <block order="18">
            <cline>            line.replace(pos,replace.length(),word);</cline>
          </block>
          <block order="6">
            <cline>         }</cline>
          </block>
          <block order="12">
            <cline>      }</cline>
          </block>
          <block order="19">
            <cline>      cout &lt;&lt; line&lt;&lt; endl;</cline>
          </block>
          <block order="11">
            <cline>   }</cline>
          </block>
          <block order="16">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_15_9">
    <statement>
      <p>Write a program that creates a multiplication table for the first 10 numbers using a matrix
  and outputting the table to an output file called <c>mult_table.txt</c>. Include proper file error checking.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_15_AC_9q">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
using namespace std;

int main() {
    // Write your code here.
}
        </code>
    </program>
    <solution><p>Below is one way to implement this program. We create a 10x10 matrix
        and fill in the products. Then we traverse through the matrix and output
        the values into the output file.</p> Below is one way to implement this program. We create a
  10x10 matrix and fill in the products. Then we traverse through the matrix and output the values
  into the output file. <program xml:id="cp_15_AC_9a">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
using namespace std;

int main() {
    ofstream outfile("mult_table.txt");
    if (!outfile.good()) {
        cout &lt;&lt; "Error. Unable to open file." &lt;&lt; endl;
        exit(1);
    }
    vector&lt;int&gt; rows(10);
    vector&lt;vector&lt;int&gt; &gt; mat;
    for (int i = 0; i &lt; 10; ++i) {
        mat.push_back(rows);
    }
    for (int i = 0; i &lt; 10; ++i) {
        for (int j = 0; i &lt; 10; ++j) {
            matrix[i][j] = (i + 1) * (j + 1);
        }
    }
    for (int i = 0; i &lt; 10; ++i) {
        for (int j = 0; i &lt; 10; ++j) {
            outfile &lt;&lt; matrix[i][j] &lt;&lt; '\t';
        }
        cout &lt;&lt; endl;
    }
}
        </code>
    </program>
    </solution>
  </exercise>


  <exercise label="cp_15_10_q">
    <statement>
      <p>Write a program that computes the product of two matrices.
        Take a look at the example below. Two find the product of two
        matrices, take the ith row from the first matrix and the jth column
        from the second matrix, find the summation of the product of each component,
        and that&#8217;s the value that goes into the (i, j) location of the new matrix.
        The product of an mxn and an nxp matrix is an mxp matrix.
        Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_15_AC_10q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

int main() {
   /*
      2x3 matrix A  X 3x2 matrix B                2x2 matrix C
   [ a    b    c ]    [ g    h ]       [ ag + bi + cl    ah + bj + cm ]
   [ d    e    f ]    [ i    j ]   =   [ dg + ei + fl    dh + ej + fm ]
                      [ l    m ]
   */

   // Write your code here.
}
        </code>
    </program>
    <hint>
      <activity label="cp_15_AC_10q_pp">
        <statement>
          <p>Write a program that computes the product of two matrices.
            Take a look at the example below. To find the product of two
            matrices, take the ith row from the first matrix and the jth column
            from the second matrix, find the summation of the product of each component,
            and that&#8217;s the value that goes into the (i, j) location of the new matrix.
            The product of an mxn and an nxp matrix is an mxp matrix.
            Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="7">
            <cline>int main() {</cline>
          </block>
          <block order="2">
            <cline>matrix&lt;int&gt; A(2,3);</cline>
          </block>
          <block order="5">
            <cline>matrix&lt;int&gt; B(3,2);</cline>
          </block>
          <block order="3">
            <cline>matrix&lt;int&gt; C(2,2);</cline>
          </block>
          <block order="9">
            <cline>C[0,0] = (A[0,0] * B[0,0]) + (A[0,1] * B[1,0]) + (A[0,2] * B[2,0]);</cline>
          </block>
          <block order="8">
            <cline>C[0,1] = (A[0,0] * B[0,1]) + (A[0,1] * B[1,1]) + (A[0,2] * B[2,1]);</cline>
          </block>
          <block order="6">
            <cline>C[1,0] = (A[1,0] * B[0,0]) + (A[1,1] * B[1,0]) + (A[1,2] * B[2,0]);</cline>
          </block>
          <block order="4">
            <cline>C[1,1] = (A[1,0] * B[0,1]) + (A[1,1] * B[1,1]) + (A[1,2] * B[2,1]);</cline>
          </block>
          <block order="1">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise> 

</exercises>