<?xml version="1.0"?>
<exercises xml:id="chapter15_multiple-choice-exercises">
  <title>Multiple Choice Exercises</title>
  <exercise label="mce_15_1">
    <statement>
      <p>We want to open a file and parse its data into our program. What library
            do we need to include?</p>
    </statement>
    <choices>
      <choice>
        <statement id="mce_15_1_opt_a">
          <p>
            <c>iostream</c>
          </p>
        </statement>
        <feedback id="mce_15_1_opt_a">
          <p>This library deals with communication through the standard input and output.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_1_opt_b">
          <p>
            <c>sstream</c>
          </p>
        </statement>
        <feedback id="mce_15_1_opt_b">
          <p>This library is used to manipulate string objects as if they were streams.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_1_opt_c">
          <p>
            <c>fstream</c>
          </p>
        </statement>
        <feedback id="mce_15_1_opt_c">
          <p>This library is used to manipulate files using streams.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_1_opt_d">
          <p>
            <c>iomanip</c>
          </p>
        </statement>
        <feedback id="mce_15_1_opt_d">
          <p>This library is used to modify internal flags and formatting options.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_15_2">
    <statement>
      <p>The code below reads data from a file called <c>input.txt</c>. What is wrong with the following code?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
#include <fstream>
using namespace std;

int main() {
  string input;
  string filename = "input.txt";
  ifstream infile(filename);
  getline(filename, input);
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_15_2_opt_a">
          <p>We should use <c>ofstream</c> instead of <c>ifstream</c>.</p>
        </statement>
        <feedback id="mce_15_2_opt_a">
          <p>Since we are dealing with an input file, we should use <c>ifstream</c>.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_2_opt_b">
          <p>The arguments in <c>getline</c> are incorrect.</p>
        </statement>
        <feedback id="mce_15_2_opt_b">
          <p>We are supposed to read input through the <c>ifstream</c> object. This line should be <c>getline(infile, input)</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_2_opt_c">
          <p>We cannot use a variable to store the filename.</p>
        </statement>
        <feedback id="mce_15_2_opt_c">
          <p>Since the name of the file is just a string, we can store it in a variable.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_2_opt_d">
          <p>There are no errors with this code.</p>
        </statement>
        <feedback id="mce_15_2_opt_d">
          <p>Take another look at the code. Are we reading the input correctly into <c>input</c>?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_15_3">
    <statement>
      <p>We want to make sure the file we wanted to open was opened successfully. Which of the
            following checks this and prints the proper output?</p>
    </statement>
    <choices>
      <choice>
        <statement id="mce_15_3_opt_a">
          <p>
            <c><![CDATA[if (infile.good()) { 
  cout << "File opened unsuccessfully" << endl; 
}]]></c>
          </p>
        </statement>
        <feedback id="mce_15_3_opt_a">
          <p>If the <c>if</c> statement evaluates to true, then the file was opened successfully.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_3_opt_b">
          <p>
            <c><![CDATA[if (!infile.is_open()) {
  cout << "File opened unsuccessfully" << endl;
}]]></c>
          </p>
        </statement>
        <feedback id="mce_15_3_opt_b">
          <p><c>is_open()</c> is another function that returns <c>true</c> if a file is opened successfully.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_3_opt_c">
          <p>
            <c><![CDATA[if (infile.good() == false) {
  cout << "File opened unsuccessfully" << endl;
}]]></c>
          </p>
        </statement>
        <feedback id="mce_15_3_opt_c">
          <p>If the file isn't opened successfully, an error message is printed.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_3_opt_d">
          <p>
            <c><![CDATA[if (!infile.open()) {
  cout << "File opened unsuccessfully" << endl;
}]]></c>
          </p>
        </statement>
        <feedback id="mce_15_3_opt_d">
          <p>The <c>open()</c> function is different from <c>is_open()</c> and does not return a <c>bool</c>.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_15_4">
    <statement>
      <p>Which of the following statements are true?</p>
    </statement>
    <choices>
      <choice>
        <statement id="mce_15_4_opt_b">
          <p>We can assume the program opens all files successfully.</p>
        </statement>
        <feedback id="mce_15_4_opt_b">
          <p>There are times when a file can't be properly opened because they may have not been properly closed the last time they were used or the file is currently used by another program. As a result, it is good practice to include a check in your program.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_4_opt_c">
          <p>A stream is an abstract object that represents the flow of data from a source.</p>
        </statement>
        <feedback id="mce_15_4_opt_c">
          <p>We've used two streams before: the standard input stream and standard output stream (<c>cin</c> and <c>cout</c>).</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_4_opt_d">
          <p>We cannot use the operators <c>&lt;&lt;</c> and <c>&gt;&gt;</c>, as they are for <c>iostream</c> objects only.</p>
        </statement>
        <feedback id="mce_15_4_opt_d">
          <p>We are also able to use the operators for <c>fstream</c> objects.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_15_5">
    <statement>
      <p>What are the contents of the output file <c>output.txt</c> after running the code below?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
#include <fstream>
using namespace std;

int main() {
  ofstream outfile("output.txt");

  if (!outfile.good()) {
    cout << "Unable to open file" << endl;
  }

  cout << "Powers of 2: ";
  outfile << "2 4 8 16 32 64" << endl;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="mce_15_5_opt_a">
          <p>2 4 8 16 32 64</p>
        </statement>
        <feedback id="mce_15_5_opt_a">
          <p>This is the only thing we write to the output file.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_5_opt_b">
          <p>Powers of 2: 2 4 8 16 31 64</p>
        </statement>
        <feedback id="mce_15_5_opt_b">
          <p>Take another look at the stream objects used in the code.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_5_opt_c">
          <p>Powers of 2:</p>
        </statement>
        <feedback id="mce_15_5_opt_c">
          <p>This is printed to standard output, not the output file.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_5_opt_d">
          <p>Unable to open file</p>
        </statement>
        <feedback id="mce_15_5_opt_d">
          <p>Although this may be printed, this is not the contents of the output file.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_15_6">
    <statement>
      <p>The file <c>scores.txt</c> contains data about the roster number and test scores of students in a class.
            The output file <c>averages.txt</c> should store each student's roster number and average test score.
            What should replace the question marks?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
#include <fstream>
using namespace std;

int main() {
  string junk;
  int studentNum;
  double mid1, mid2, final;
  ifstream infile("scores.txt");
  ofstream outfile("averages.txt");

  if (!infile.good() || !outfile.good()) {
    cout << "Unable to open a file" << endl;
  }

  getline(infile, junk);
  outfile << "Student#\tAverage" << endl;

  while (infile >> studentNum >> mid1 >> mid2 >> final) {
    double avg = (mid1 + mid2 + final) / 3;
    ???
  }
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_15_6_opt_a">
          <p>
            <c>cout &lt;&lt; avg &lt;&lt; endl</c>
          </p>
        </statement>
        <feedback id="mce_15_6_opt_a">
          <p>This will output the average to standard output.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_6_opt_b">
          <p>
            <c><![CDATA[outfile << avg << endl]]></c>
          </p>
        </statement>
        <feedback id="mce_15_6_opt_b">
          <p>Take another look at the code. Is there a clue as to what data should be in the output file?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_6_opt_c">
          <p>
            <c><![CDATA[infile << studentNum << "\t" << avg << endl]]></c>
          </p>
        </statement>
        <feedback id="mce_15_6_opt_c">
          <p>The data should be written to the output file.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_6_opt_d">
          <p>
            <c><![CDATA[outfile << studentNum << "\t" << avg << endl]]></c>
          </p>
        </statement>
        <feedback id="mce_15_6_opt_d">
          <p>This properly outputs the student number and the student's average to the output file.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_15_7">
    <statement>
      <p>What does the following code do?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
  string original = "430-0444";
  string digitString = "";

  for (size_t i = 0; i < original.length(); i++) {
    if (isdigit(original[original.length() - 1 - i])) {
      digitString += original[original.length() - 1 - i];
    }
  }
  cout << atoi(digitString) << endl;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_15_7_opt_a">
          <p>The code converts the original string to an integer and outputs the integer.</p>
        </statement>
        <feedback id="mce_15_7_opt_a">
          <p>Take a closer look at the contents of the <c>for</c> loop.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_7_opt_b">
          <p>The code converts an integer to a string and outputs the string.</p>
        </statement>
        <feedback id="mce_15_7_opt_b">
          <p>What does the <c>atoi</c> function do?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_7_opt_c">
          <p>The code outputs the sum of all the original string's digits.</p>
        </statement>
        <feedback id="mce_15_7_opt_c">
          <p>The <c>digitString</c> variable is a <c>string</c>, not an <c>int</c>.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_7_opt_d">
          <p>The code converts the original string to an integer in reverse and outputs the integer in reverse.</p>
        </statement>
        <feedback id="mce_15_7_opt_d">
          <p>The code in the <c>for</c> loop parses the string in reverse.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_15_8">
    <statement>
      <p>Which of the following statements are false about the <c>Set</c> data structure?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="mce_15_8_opt_a">
          <p>A set can contain multiple elements with the same value.</p>
        </statement>
        <feedback id="mce_15_8_opt_a">
          <p>All elements in a set are unique.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_8_opt_b">
          <p>We can identify elements of a set by each element's index.</p>
        </statement>
        <feedback id="mce_15_8_opt_b">
          <p>Each element has an index associated with it.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_8_opt_c">
          <p>The elements of a <c>Set</c> are always sorted.</p>
        </statement>
        <feedback id="mce_15_8_opt_c">
          <p>Although a set is ordered, it is not necessarily sorted.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_8_opt_d">
          <p>The size of a <c>Set</c> object is fixed.</p>
        </statement>
        <feedback id="mce_15_8_opt_d">
          <p>The <c>Set</c> data structure can expand to make room for new elements.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_15_9">
    <statement>
      <p>There are many ways to construct a <c>matrix</c>. Which of the following are valid constructors of a <c>matrix</c>?</p>
    </statement>
    <choices>
      <choice>
        <statement id="mce_15_9_opt_a">
          <p>
            <c><![CDATA[matrix<string> m1(2);]]></c>
          </p>
        </statement>
        <feedback id="mce_15_9_opt_a">
          <p>A <c>matrix</c> has two dimensions and this constructor only has one dimension.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_9_opt_b">
          <p>
            <c><![CDATA[matrix<int> m2(2, 6, 0);]]></c>
          </p>
        </statement>
        <feedback id="mce_15_9_opt_b">
          <p>This creates a <c>matrix</c> with 2 rows and 6 columns with all of its elements equal to 0.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_9_opt_c">
          <p>
            <c><![CDATA[matrix<char> m3(m2);]]></c>
          </p>
        </statement>
        <feedback id="mce_15_9_opt_c">
          <p>This creates <c>m3</c> to be a copy of <c>m2</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_9_opt_d">
          <p>
            <c><![CDATA[matrix<int> m2(2.4, 2);]]></c>
          </p>
        </statement>
        <feedback id="mce_15_9_opt_d">
          <p>There must be a whole number of rows and columns.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mce_15_10">
    <statement>
      <p>What is the output of the following code?</p>
      <program line-numbers="yes">
        <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

bool secret_function(int num) {
  if (num % 2 == 0) {
    return true;
  }
  return false;
}

int main() {
  matrix<int> mat(4, 2);
  for (size_t i = 0 i < mat.size(); ++i) {
    for (size_t j = 0; j < mat[i].size(); ++j) {
      if (!secret_function(i + j) {
        mat[i][j] = 0;
      }
      else {
        mat[i][j] = i + j;
      }
    }
  }
  int n;
  for (size_t i = 0 i < mat.size(); ++i) {
    for (size_t j = 0; j < mat[i].size(); ++j) {
      n += mat[i][j];
    }
  }
  cout << n << endl;
}
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement id="mce_15_10_opt_a">
          <p>8</p>
        </statement>
        <feedback id="mce_15_10_opt_a">
          <p>The matrix only contains even sums of the row and column indices and 0 otherwise. Thus, the sum of all elements is 8.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_10_opt_b">
          <p>16</p>
        </statement>
        <feedback id="mce_15_10_opt_b">
          <p>What does the secret function do?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="mce_15_10_opt_c">
          <p>0</p>
        </statement>
        <feedback id="mce_15_10_opt_c">
          <p>What are the contents of the matrix?</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="mce_15_10_opt_d">
          <p>9</p>
        </statement>
        <feedback id="mce_15_10_opt_d">
          <p>What are the contents of the matrix?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</exercises>
