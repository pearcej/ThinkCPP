<?xml version="1.0"?>
<section xml:id="chapter15_matrix">
  <title>
    <c>matrix</c>
  </title>
  <p>A <c>matrix</c> is similar to a <c>vector</c> except it is two-dimensional. Instead of a length, it has two
    dimensions, called <c>numrows</c> and <c>numcols</c>, for <q>number of rows</q> and <q>number of
      columns.</q></p>
  <p>Each element in the matrix is indentified by two indices; one specifies
    the row number, the other the column number.</p>
  <p>To create a matrix, there are four constructors:</p>
  <program>matrix&lt;char&gt; m1;
matrix&lt;int&gt; m2(3, 4);
matrix&lt;double&gt; m3(rows, cols, 0.0);
matrix&lt;double&gt; m4(m3);</program>
  <p>The first is a do-nothing constructor that makes a matrix with both dimensions 0. The second
    takes two integers, which are the initial number of rows and columns, in that order. The third
    is the same as the second, except that it takes an additional parameter that is used to
    initialized the elements of the matrix. The fourth is a copy constructor that takes another <c>matrix</c>
    as a parameter.</p>
  <p>Just as with <c>vectors</c>, we can make <c>matrix</c>es with any type of elements (including <c>vector</c>s, and
    even <c>matrix</c>es).</p>
  <p>To access the elements of a matrix, we use the <c>[]</c> operator to specify the row and column:</p>
  <program>m2[0][0] = 1;
m3[1][2] = 10.0 * m2[0][0];</program>
  <p>If we try to access an element that is out of range, the program prints
    an error message and quits.</p>
  <p>The <c>numrows</c> and <c>numcols</c> functions get the number of rows and columns. Remember that the row
    indices run from 0 to <c>numrows() -1</c> and the column indices run from 0 to <c>numcols() -1</c>.</p>
  <p>The usual way to traverse a matrix is with a nested loop. This loop sets
    each element of the matrix to the sum of its two indices:</p>
  <program>for (int row=0; row &lt; m2.numrows(); row++) {
  for (int col=0; col &lt; m2.numcols(); col++) {
    m2[row][col] = row + col;
  }
}</program>
  <p>This loop prints each row of the matrix with tabs between the elements
    and newlines between the rows:</p>
  <program>for (int row=0; row &lt; m2.numrows(); row++) {
  for (int col=0; col &lt; m2.numcols(); col++) {
    cout &lt;&lt; m2[row][col] &lt;&lt; "\t";
  }
  cout &lt;&lt; endl;
}</program>
  <exercise label="question15_8_1">
    <statement>
      <p>Which of the following data types are supported by matrix?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>int</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>string</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>vector&lt;int&gt;</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>vector&lt;vector&lt;int&gt;&gt;</p>
        </statement>
        <feedback>
          <p>Correct! This is a technically type of matrix!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>matrix</p>
        </statement>
        <feedback>
          <p>Correct! Matrices can be made of matrices.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question15_8_2">
    <statement>
      <p>Suppose we have matrix <c>mat</c>. Then <c>mat[9][17]</c> would be accessing column <var/> and row <var/>
        of our matrix.
      </p>
    </statement>
    <setup>
      <var>
        <condition number="18">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*x\s*$">
          <feedback>
            <p>Incorrect! Remember to use zero indexing!</p>
          </feedback>
        </condition>
      </var>
      <var>
        <condition number="10">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Incorrect! Remember to use zero indexing!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
</section>