<?xml version="1.0"?>
<exercises xml:id="chapter4_mixed-up-code-exercises">
  <title>Mixed-Up Code Exercises</title>
  <p>Answer the following <term>Mixed-Up Code</term> questions to
            assess what you have learned in this chapter.</p>
  <exercise label="cond_recc_p1" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a block of code that prints the remainder of 18 when
            divided by 13.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>int main() {</cline>
      </block>
      <block order="6">
        <cline> int x = 18;</cline>
        <cline> int y = 13;</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline> cout &lt;&lt; x % y;</cline>
        </choice>
        <choice>
          <cline> cout &lt;&lt; y % x; </cline>
        </choice>
      </block>
      <block order="5">
        <cline> cout &lt;&lt; y / x; </cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="cond_recc_p2" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a function that prints whether a number
            is true.</p>
    </statement>
    <blocks>
      <block order="1">
        <choice correct="yes">
          <cline>void is_true(int number) {</cline>
        </choice>
        <choice>
          <cline>bool is_true(int number) { </cline>
        </choice>
      </block>
      <block order="4">
        <cline> if (number % 2 == 0) {</cline>
      </block>
      <block order="7">
        <cline>  cout &lt;&lt; true;</cline>
        <cline> }</cline>
      </block>
      <block order="3">
        <cline> else {</cline>
      </block>
      <block order="2">
        <cline>  cout &lt;&lt; false;</cline>
        <cline> }</cline>
      </block>
      <block order="5">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="cond_recc_p3" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a function that prints the difference of a and b if the result
            would result in a positive number.  Otherwise, prints -1.</p>
    </statement>
    <blocks>
      <block order="3">
        <choice correct="yes">
          <cline>void difference(int a, int b) {</cline>
        </choice>
        <choice>
          <cline>int difference(int a, int b) { </cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline> if (a - b &gt; 0) {</cline>
        </choice>
        <choice>
          <cline> if (a - b &lt; 0) { </cline>
        </choice>
      </block>
      <block order="1">
        <cline>  cout &lt;&lt; a - b;</cline>
        <cline> }</cline>
      </block>
      <block order="4">
        <cline> else {</cline>
      </block>
      <block order="6">
        <cline>  cout &lt;&lt; -1;</cline>
        <cline> }</cline>
      </block>
      <block order="2">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="cond_recc_p4" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a function, <c>matic</c>, that takes as inputs 2 integers, x and y, and prints <q>automatic</q> if x is
            an odd number, <q>systematic</q> if x is greater than y, AND
            <q>hydromatic</q> if y is not equal to x.  Check all 3 conditions.</p>
    </statement>
    <blocks>
      <block order="10">
        <choice correct="yes">
          <cline>void matic(int x, int y) {</cline>
        </choice>
        <choice>
          <cline>int matic(int x, int y) {    </cline>
        </choice>
      </block>
      <block order="11">
        <choice correct="yes">
          <cline> if (x % 2 &gt; 0) {</cline>
        </choice>
        <choice>
          <cline> if (x % 2 == 0) { </cline>
        </choice>
      </block>
      <block order="5">
        <cline><![CDATA[  cout << "automatic";]]></cline>
        <cline> }</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline> if (x &gt; y) {</cline>
        </choice>
        <choice>
          <cline> else if (x &gt; y) { </cline>
        </choice>
      </block>
      <block order="8">
        <cline><![CDATA[  cout << "systematic";]]></cline>
        <cline> }</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline> if (y != x) {</cline>
        </choice>
        <choice>
          <cline> else { </cline>
        </choice>
      </block>
      <block order="6">
        <cline><![CDATA[  cout << "hydromatic";]]></cline>
        <cline> }</cline>
      </block>
      <block order="7">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="cond_recc_p5" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a block of code that prints <q>Pick me!</q> if x is
            equal to y, <q>Choose me!</q> if x is less than y, OR <q>Love me!</q>
            if x + y is even.</p>
    </statement>
    <blocks>
      <block order="5">
        <choice correct="yes">
          <cline>if (x == y) {</cline>
        </choice>
        <choice>
          <cline>if (x = y) { </cline>
        </choice>
      </block>
      <block order="4">
        <cline><![CDATA[ cout << "Pick me!";]]></cline>
        <cline>}</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>else if (y &gt; x) {</cline>
        </choice>
        <choice>
          <cline>if (x &lt; y) { </cline>
        </choice>
      </block>
      <block order="1">
        <cline><![CDATA[ cout << "Choose me!";]]></cline>
        <cline>}</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>else if ((x + y) % 2 == 0) {</cline>
        </choice>
        <choice>
          <cline>else (x + y % 2 == 0) { </cline>
        </choice>
      </block>
      <block order="8">
        <cline>else if (x + y % 2 == 0) { </cline>
      </block>
      <block order="10">
        <cline><![CDATA[ cout << "Love me!"; }]]></cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="cond_recc_p6" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a function that prints your letter grade according to this scheme.
            [0, 70) = F, [70, 80) = C, [80, 90) = B, and [90, 100] = A.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>void printLetterGrade(double grade) {</cline>
      </block>
      <block order="3">
        <cline> if (grade &lt; 70) {</cline>
      </block>
      <block order="7">
        <cline>  cout &lt;&lt; "F";</cline>
        <cline> }</cline>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline><![CDATA[ else if (grade < 80) {]]></cline>
        </choice>
        <choice>
          <cline> if (grade &lt; 80) { </cline>
        </choice>
      </block>
      <block order="14">
        <cline>  cout &lt;&lt; "C";</cline>
        <cline> }</cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline><![CDATA[ else if (grade < 90) {]]></cline>
        </choice>
        <choice>
          <cline> if (grade &lt; 90) { </cline>
        </choice>
      </block>
      <block order="8">
        <cline>  cout &lt;&lt; "B";</cline>
        <cline> }</cline>
      </block>
      <block order="12">
        <choice correct="yes">
          <cline><![CDATA[ else if (grade <= 100) { ]]></cline>
        </choice>
        <choice>
          <cline> else {</cline>
        </choice>
      </block>
      <block order="4">
        <cline>  cout &lt;&lt; "A";</cline>
        <cline> }</cline>
      </block>
      <block order="9">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="cond_recc_p7" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>According to a logic game, a knight is someone who cannot tell a lie,
            and a knave is someone who cannot tell the truth.  Construct a function
            that takes two booleans: the truth value of the story, and the truth value
            told by the person.  The function should print whether the person was a
            knight or a knave.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>void knightKnave(bool truth, bool told) {</cline>
      </block>
      <block order="8">
        <cline> if (truth == true) {</cline>
      </block>
      <block order="3">
        <cline>  if (told == true) {</cline>
        <cline><![CDATA[   cout << "Knight";]]></cline>
        <cline>  }</cline>
      </block>
      <block order="1">
        <cline>  else {</cline>
        <cline>   cout &lt;&lt; "Knave";</cline>
        <cline>  }</cline>
        <cline> }</cline>
      </block>
      <block order="5">
        <cline> else {</cline>
      </block>
      <block order="4">
        <cline>  if (told == true) {</cline>
        <cline>   cout &lt;&lt; "Knave";</cline>
        <cline>  }</cline>
      </block>
      <block order="2">
        <cline>  else {</cline>
        <cline><![CDATA[   cout << "Knight";]]></cline>
        <cline>  }</cline>
        <cline> }</cline>
      </block>
      <block order="6">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="cond_recc_p8" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>If a cat is in a good mood, it purrs; when it's in a bad mood, it
            meows.  If a doog is in a good mood, it barks; when it's in a bad
            mood it woofs.  Construct a function that accomplishes this.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>void makeVocals(string animal, string mood) {</cline>
      </block>
      <block order="1">
        <cline> if (mood == "bad") {</cline>
      </block>
      <block order="4">
        <cline>  if (animal == "dog") {</cline>
        <cline>   cout &lt;&lt; "Woof!";</cline>
        <cline>  }</cline>
      </block>
      <block order="7">
        <cline>  else {</cline>
        <cline>   cout &lt;&lt; "Meow!";</cline>
        <cline>  }</cline>
      </block>
      <block order="2">
        <cline> else {</cline>
      </block>
      <block order="3">
        <cline>  if (animal == "dog") {</cline>
        <cline>   cout &lt;&lt; "Bark!";</cline>
        <cline>  }</cline>
      </block>
      <block order="8">
        <cline>  } else {</cline>
        <cline>   cout &lt;&lt; "Purr!";</cline>
        <cline>  }</cline>
      </block>
      <block order="5">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="cond_recc_p9" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a recursive function that tells the user to enter a positive
            number.  It should then output that number to the terminal.  If the user
            enters a negative number or zero, prompt the user again.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>void takeSum() {</cline>
      </block>
      <block order="8">
        <cline><![CDATA[ cout << "Input a positive number!";]]></cline>
      </block>
      <block order="4">
        <cline> int num;</cline>
        <cline> cin &gt;&gt; num;</cline>
      </block>
      <block order="3">
        <cline> if (num &lt; 0) {</cline>
      </block>
      <block order="2">
        <cline>  takeSum();</cline>
      </block>
      <block order="5">
        <cline> } // END "if"</cline>
      </block>
      <block order="7">
        <cline> cout &lt;&lt; num;</cline>
      </block>
      <block order="6">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="cond_recc_p10" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>In the table of ASCII characters, the lowercase alphabet consists
            of characters 97-122.  The uppercase alphabet consists of characters
            65-90, which is a 32 character shift back from the lowercase.  Construct
            a recursive function that asks the user to input a LOWERCASE character,
            converts that character to UPPERCASE character and prints it.  If the user
            enters a character outside of the range of the LOWERCASE alphabet, prompt
            the user again.  Hint:  <q>||</q> means <q>or</q> when used between two conditional
            statements.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>void capitalize() {</cline>
      </block>
      <block order="2">
        <cline><![CDATA[ cout << "Input a lowercase character!";]]></cline>
      </block>
      <block order="7">
        <cline> char let;</cline>
        <cline> cin &gt;&gt; let;</cline>
      </block>
      <block order="6">
        <cline><![CDATA[ if (int(let) < 97 || int(let) > 122) {]]></cline>
      </block>
      <block order="8">
        <cline>  capitalize();</cline>
        <cline> }</cline>
      </block>
      <block order="1">
        <cline> let = let - 32;</cline>
      </block>
      <block order="5">
        <cline> cout &lt;&lt; char(let);</cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</exercises>
