<?xml version="1.0"?>
<section xml:id="chapter4_activecode-exercises-2">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to
            assess what you have learned in this chapter.</p>
  <exercise label="XXX">
    <statement>
      <p>Construct a block of code that prints the remainder of 18 when
                    divided by 13.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="cond_recc_p1_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the code to print the remainder of 18 when divided by 13.

    
    <program xml:id="cond_recc_p1_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int x = 18;
    int y = 13;
    cout << x % y;
}
        ]]></code></program>

            

<exercise label="cond_recc_p1_ac_a"><statement><p>Below is one way to write the code to print the remainder of 18 when divided by 13.</p></statement><program xml:id="cond_recc_p1_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int x = 18;
    int y = 13;
    cout << x % y;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a function, <c>is_even</c>, that prints whether a number
                    is even.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="cond_recc_p2_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    is_even(4);
    is_even(3);
    is_even(0);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the is_even function.

    
    <program xml:id="cond_recc_p2_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void is_even(int number) {
    if (number % 2 == 0) {
    cout << true;
    }
    else {
    cout << false;
    }
}

int main() {
    is_even(4);
    is_even(3);
    is_even(0);
}
        ]]></code></program>

            

<exercise label="cond_recc_p2_ac_a"><statement><p>Below is one way to construct the <c>is_even</c> function.</p></statement><program xml:id="cond_recc_p2_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void is_even(int number) {
    if (number % 2 == 0) {
    cout << true;
    }
    else {
    cout << false;
    }
}

int main() {
    is_even(4);
    is_even(3);
    is_even(0);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a function, <c>difference</c>, that prints the difference of a and b if the result
                    would result in a positive number.  Otherwise, prints -1.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="cond_recc_p3_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    int a = 25;
    int b = 10;
    difference(a,b);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the difference function.

    
    <program xml:id="cond_recc_p3_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void difference(int a, int b) {
    if (a - b > 0) {
    cout << a - b;
    }
    else {
    cout << -1;
    }
}

int main() {
    int a = 25;
    int b = 10;
    difference(a,b);
}
        ]]></code></program>

            

<exercise label="cond_recc_p3_ac_a"><statement><p>Below is one way to write the <c>difference</c> function.</p></statement><program xml:id="cond_recc_p3_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void difference(int a, int b) {
    if (a - b > 0) {
    cout << a - b;
    }
    else {
    cout << -1;
    }
}

int main() {
    int a = 25;
    int b = 10;
    difference(a,b);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a function, <c>matic</c>, that takes as inputs 2 integers, x and y, and prints <q>automatic</q> if x is
                    an odd number, <q>systematic</q> if x is greater than y, AND
                    <q>hydromatic</q> if y is not equal to x.  Check all 3 conditions.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="cond_recc_p4_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code.

    
    <program xml:id="cond_recc_p4_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void matic(int x, int y) {
    if (x % 2 > 0) {
        cout << "automatic"; }
    if (x > y) {
        cout << "systematic"; }
    if (y != x) {
        cout << "hydromatic"; }
}

int main() {
    matix(5,4);
}
        ]]></code></program>

            

<exercise label="cond_recc_p4_ac_a"><statement><p>Below is one way to construct the code.</p></statement><program xml:id="cond_recc_p4_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void matic(int x, int y) {
    if (x % 2 > 0) {
        cout << "automatic"; }
    if (x > y) {
        cout << "systematic"; }
    if (y != x) {
        cout << "hydromatic"; }
}

int main() {
    matix(5,4);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a block of code that prints <q>Pick me!</q> if x is
                    equal to y, <q>Choose me!</q> if x is less than y, OR <q>Love me!</q>
                    if x + y is even.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="cond_recc_p5_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code.

    
    <program xml:id="cond_recc_p5_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    if (x == y) {
        cout << "Pick me!"; }
    else if (y > x) {
        cout << "Choose me!"; }
    else if ((x + y) % 2 == 0) {
        cout << "Love me!"; }
}
        ]]></code></program>

            

<exercise label="cond_recc_p5_ac_a"><statement><p>Below is one way to construct the code.</p></statement><program xml:id="cond_recc_p5_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    if (x == y) {
        cout << "Pick me!"; }
    else if (y > x) {
        cout << "Choose me!"; }
    else if ((x + y) % 2 == 0) {
        cout << "Love me!"; }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a function, <c>printLetterGrade</c>, that prints your letter grade according to this scheme.
                    [0, 70) = F, [70, 80) = C, [80, 90) = B, and [90, 100] = A.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="cond_recc_p6_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    double grade = 90.0;
    printLetterGrade(grade);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the printLetterGrade function.

    
    <program xml:id="cond_recc_p6_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void printLetterGrade(double grade) {
    if (grade < 70) {
    cout << "F"; }
    else if (grade < 80) {
    cout << "C"; }
    else if (grade < 90) {
    cout << "B"; }
    else {
    cout << "A"; }
}

int main() {
    double grade = 90.0;
    printLetterGrade(grade);
}
        ]]></code></program>

            

<exercise label="cond_recc_p6_ac_a"><statement><p>Below is one way to write the <c>printLetterGrade</c> function.</p></statement><program xml:id="cond_recc_p6_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void printLetterGrade(double grade) {
    if (grade < 70) {
    cout << "F"; }
    else if (grade < 80) {
    cout << "C"; }
    else if (grade < 90) {
    cout << "B"; }
    else {
    cout << "A"; }
}

int main() {
    double grade = 90.0;
    printLetterGrade(grade);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>According to a logic game, a knight is someone who cannot tell a lie,
                    and a knave is someone who cannot tell the truth.  Construct a function
                    that takes two booleans: the truth value of the story, and the truth value
                    told by the person.  The function should print whether the person was a
                    knight or a knave.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="cond_recc_p7_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the knightKnave function.

    
    <program xml:id="cond_recc_p7_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void knightKnave(bool truth, bool told) {
    if (truth == true) {
        if (told == true) {
            cout << "Knight";
        }
        else {
            cout << "Knave";
        } }
        else {
            if (told == true) {
                cout << "Knave";
            }
        else {
            cout << "Knive";
        }
        }
}
        ]]></code></program>

            

<exercise label="cond_recc_p7_ac_a"><statement><p>Below is one way to construct the <c>knightKnave</c> function.</p></statement><program xml:id="cond_recc_p7_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void knightKnave(bool truth, bool told) {
    if (truth == true) {
        if (told == true) {
            cout << "Knight";
        }
        else {
            cout << "Knave";
        } }
        else {
            if (told == true) {
                cout << "Knave";
            }
        else {
            cout << "Knive";
        }
        }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>If a cat is in a good mood, it purrs; when it's in a bad mood, it
                    meows.  If a doog is in a good mood, it barks; when it's in a bad
                    mood it woofs.  Construct a function that accomplishes this.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="cond_recc_p8_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the makeVocals function.

    
    <program xml:id="cond_recc_p8_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void makeVocals(string animal, string mood) {
    if (mood == "bad") {
        if (animal == "dog") {
            cout << "Woof!" << endl;
        }
        else {
            cout << "Meow!" << endl;
        }
    }
    else {
        if (animal == "dog") {
            cout << "Bark!" << endl;
        }
        else {
            cout << "Purr!" << endl;
        }
    }
}

int main() {
    makeVocals("dog","good");
    makeVocals("cat","bad");
}
        ]]></code></program>

            

<exercise label="cond_recc_p8_ac_a"><statement><p>Below is one way to construct the <c>makeVocals</c> function.</p></statement><program xml:id="cond_recc_p8_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void makeVocals(string animal, string mood) {
    if (mood == "bad") {
        if (animal == "dog") {
            cout << "Woof!" << endl;
        }
        else {
            cout << "Meow!" << endl;
        }
    }
    else {
        if (animal == "dog") {
            cout << "Bark!" << endl;
        }
        else {
            cout << "Purr!" << endl;
        }
    }
}

int main() {
    makeVocals("dog","good");
    makeVocals("cat","bad");
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a recursive function that tells the user to enter a positive
                    number.  It should then output that number to the terminal.  If the user
                    enters a negative number or zero, prompt the user again.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="cond_recc_p9_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the takeSum recursive function.

    
    <program xml:id="cond_recc_p9_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void takeSum() {
    cout << "Input a positive number!";
    int num;
    cin >> num;
    if (num < 0) {
        takeSum();
    } // END "if"
    cout << num;
} // END function

int main() {
    takeSum();
}
        ]]></code></program>

            

<exercise label="cond_recc_p9_ac_a"><statement><p>Below is one way to write the <c>takeSum</c> recursive function.</p></statement><program xml:id="cond_recc_p9_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void takeSum() {
    cout << "Input a positive number!";
    int num;
    cin >> num;
    if (num < 0) {
        takeSum();
    } // END "if"
    cout << num;
} // END function

int main() {
    takeSum();
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>In the table of ASCII characters, the lowercase alphabet consists
                    of characters 97-122.  The uppercase alphabet consists of characters
                    65-90, which is a 32 character shift back from the lowercase.  Construct
                    a recursive function that asks the user to input a LOWERCASE character,
                    converts that character to UPPERCASE character and prints it.  If the user
                    enters a character outside of the range of the LOWERCASE alphabet, prompt
                    the user again.  Hint:  <q>||</q> means <q>or</q> when used between two conditional
                    statements.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="cond_recc_p10_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the capitalize function.

    
    <program xml:id="cond_recc_p10_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void capitalize() {
    cout << "Input a lowercase character!";
    char let;
    cin >> let;
    if (int(let) < 97 || int(let) > 122) {
    capitalize(); }
    let = let - 32;
    cout << char(let);
}

int main() {
    capitalize();
}
        ]]></code></program>

            

<exercise label="cond_recc_p10_ac_a"><statement><p>Below is one way to write the <c>capitalize</c> function.</p></statement><program xml:id="cond_recc_p10_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void capitalize() {
    cout << "Input a lowercase character!";
    char let;
    cin >> let;
    if (int(let) < 97 || int(let) > 122) {
    capitalize(); }
    let = let - 32;
    cout << char(let);
}

int main() {
    capitalize();
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
</section>
