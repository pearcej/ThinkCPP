<?xml version="1.0"?>
<section xml:id="chapter4_stack-diagrams-for-recursive-functions">
  <title>Stack Diagrams for Recursive Functions</title>
  <p>In the previous chapter we used a <term>stack diagram</term> to represent the state of a
    program during a function call. The same kind of diagram can make it easier to interpret a
    recursive function.</p>
  <p>Remember that every time a function gets called it creates a new
    instance that contains the function's local variables and parameters.</p>
  <p>This figure shows a stack diagram for <c>countdown</c>, called with <c>n = 3</c>:</p>
  <figure align="center">
    <image source="Chapter4/Images/4.9stackdiagram.png"
           width="50%"
           alt="A stack of 5 boxes. The top one is labeled main and is empty. The next four are all labeled 'countdown' and respectively contain n = 3, n = 2, n = 1, n = 0."/>
  </figure>
  <p>There is one instance of <c>main</c> and <term>four</term> instances of <c>countdown</c>, each with a
    different value for the parameter <c>n</c>. The bottom of the stack, <c>countdown</c> with <c>n = 0</c> is the
    base case. It does not make a recursive call, so there are no more instances of <c>countdown</c>.</p>
  <p>The instance of <c>main</c> is empty because main does not have any parameters or local variables.
    As an exercise, draw a stack diagram for <c>nLines</c>, invoked with the parameter n = 4.</p>
  <exercise label="stack_1">
    <statement>
      <p>Refer to the <c>nLines</c> function below. It is the same as the <c>nLines</c> function defined on the
        previous page. How many instances of <c>nLines</c> would there be in the stack diagram if we begin
        with n = 4?</p>
      <program>void nLines(int n) {
  if (n &gt; 0) {
    cout &lt;&lt; endl;
    nLines(n + 1);
  }
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>If nLines could reach its base case, it cannot be done in 3 function calls.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>If nLines could reach its base case, it cannot be done in 4 function calls.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
          <p>If nLines could reach its base case, it could be done in 5 function calls, but does it
            ever reach the base case?</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>infinite</p>
        </statement>
        <feedback>
          <p>The nLines function never reaches its base case, so the stack diagram would be
            infinitely long.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>