<?xml version="1.0"?>
<exercises xml:id="chapter4_activecode-exercises">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to assess what you have learned in this
    chapter.</p>
  <exercise label="cond_rec_a1">
    <statement>
      <p>Fix the code below so that it prints <q>THE TEAM</q> <q>THE TEAM</q>
                    <q>THE TEAM</q> on three
        separate lines.</p>
    </statement>
    <program interactive="activecode"
             line-numbers="yes"
             xml:id="cond_rec_a1q_editor">
        <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
  int x = 8;
  int y = 8;

  if (x % 2 == 0) {
      cout << "THE TEAM";
  }
  else if (x >= y) {
      cout << "THE TEAM";
  }
  else if (y >= x) {
      cout << "THE TEAM";
  }
}
          ]]></code>
      </program>
    <solution>
      <p>Below is one way to fix the program. Since we want <q>THE TEAM</q> to print three times, we
        must check all three conditons. this means changing the else if statements to if statements.</p>
      <program xml:id="cond_rec_a1_a_editor-1"
               interactive="activecode"
               line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;
int main() {
   int x = 8;
   int y = 8;

   if (x % 2 == 0) {
       cout << "THE TEAM" << endl;
   }
   if (x >= y) {
       cout << "THE TEAM" << endl;
   }
   if (y >= x) {
       cout <<< "THE TEAM" << endl;
   }
}
]]></code>
        </program>
    </solution>
  </exercise>

  <exercise label="cond_rec_a2">
    <statement>
      <p>You are part of a class where everyone passes, but it's very hard
        to pass with an A. Fix the function so it prints your letter grade
        according to this scheme. [0, 50) = C, [50, 95) = B, and [95, 100] = A.</p>
    </statement>
    <program xml:id="cond_rec_a2_editor"
             interactive="activecode"
             line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

string whichDoor(double grade) {
  s = "";
  if (grade < 50) {
      s = "C";
  }
  if (grade < 85) {
      s = "B";
  }
  if (grade >= 95) {
      s = "A";
  }
  cout << s;
}
      ]]></code>
      </program>
    <hint>
      <p>You are part of a class where everyone passes, but it's very hard
        to pass with an A. Fix the function so it prints your letter grade
        according to this scheme. [0, 50) = C, [50, 95) = B, and [95, 100] = A.
        Use the lines to construct the code, then go back to complete the Activecode.</p>
      <activity label="cond_rec_a2_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide"
                exercise-interactive="parson">
        <blocks>
          <block order="7">
            <choice correct="yes">
              <cline>void whichDoor(double grade) {</cline>
            </choice>
            <choice>
              <cline>string whichDoor(double grade) { </cline>
            </choice>
          </block>
          <block order="1">
            <choice correct="yes">
              <cline>    string s = "";</cline>
            </choice>
            <choice>
              <cline>    s = ""; </cline>
            </choice>
          </block>
          <block order="2">
            <cline><![CDATA[    if (grade < 50) {]]></cline>
            <cline>        s = "C";</cline>
            <cline>    }</cline>
          </block>
          <block order="9">
            <choice correct="yes">
              <cline><![CDATA[    if (grade < 95 && grade >= 50) {]]></cline>
              <cline>        s = "B";</cline>
              <cline>    }</cline>
            </choice>
            <choice>
              <cline><![CDATA[    if (grade < 95 || grade >= 50) { ]]></cline>
              <cline>        s = "B";</cline>
              <cline>    }</cline>
            </choice>
          </block>
          <block order="3">
            <cline>    if (grade &gt;= 95) {</cline>
            <cline>        s = "A";</cline>
            <cline>    }</cline>
          </block>
          <block order="5">
            <cline>    cout &lt;&lt; s;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>


  <exercise label="cond_rec_a3">
    <statement>
      <p>Fix the infinite recursion in the code below. The function
        should not count any numbers after 10 (the highest numbers
        that should print are 9 or 10). When it is done counting,
        the function should print that.</p>
    </statement>
    <program interactive="activecode"
             line-numbers="yes"
             xml:id="cond_rec_a3q_editor">
        <code><![CDATA[
#include <iostream>
using namespace std;

void countBy2(int num) {
    if (num != 10) {
        cout << num;
        countBy2 (num + 2);
    }
    else {
        cout << num << endl;
        cout << "Done counting!";
    }
}

int main() {
    countBy2(5);
}
        ]]></code>
      </program>
    <solution>
      <p>
        Below is one way to fix the program. The infinite recursion happens when we use an
        odd number as an argument. By checking that a number is less than 99, the highest numbers
        to
        recurse are 98 and 97. 98 + 2 == 100 and 97 + 2 == 99, so we never count past 100.
      </p>
      <program xml:id="cond_rec_a3_a_editor"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void countBy2(int num) {
    if (num < 9) {
        cout << num;
        countBy2(num + 2);
    }
    else {
        cout << num << endl;
        cout << "Done counting!";
    }
}

int main() {
    countBy2(5);
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cond_rec_a4">
    <statement>
      <p>Finish the <c>is_even</c>code below so that it prints true if <c>x</c> is even and false if <c>x</c>
        is odd.</p>
    </statement>
    <program xml:id="cond_rec_a4_editor"
             interactive="activecode"
             line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

void is_even(int num) {
  if (num % 2 == 0) {
      cout << true;
  }
}

int main() {
  int x = 3;
  is_even(x);
}
]]></code>
      </program>
    <hint>
      <p>Finish the code below so that it prints true if <c>x</c> is even and false if <c>x</c> is
        odd. Use the lines to construct the code, then go back to complete the Activecode.</p>
      <activity label="cond_rec_a4_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide"
                exercise-interactive="parson">
        <blocks>
          <block order="3">
            <cline>void is_even(int num) {</cline>
          </block>
          <block order="2">
            <choice correct="yes">
              <cline>    if (num % 2 == 0) {</cline>
              <cline><![CDATA[        cout << "true";]]></cline>
              <cline>    }</cline>
            </choice>
            <choice>
              <cline>    if (num % 2 == 0) { </cline>
              <cline><![CDATA[        cout << true;]]></cline>
              <cline>    }</cline>
            </choice>
          </block>
          <block order="5">
            <choice correct="yes">
              <cline>    else {</cline>
              <cline><![CDATA[        cout << "false";]]></cline>
              <cline>    }</cline>
            </choice>
            <choice>
              <cline>    else { </cline>
              <cline><![CDATA[        cout << false;]]></cline>
              <cline>    }</cline>
            </choice>
          </block>
          <block order="4">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>


  <exercise label="cond_rec_a5">
    <statement>
      <p>Finish the code below so that the function will continue to
        ask for input until the user guesses the word correctly.</p>
    </statement>
    <program interactive="activecode"
             line-numbers="yes"
             xml:id="cond_rec_a5q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;

bool guessTheWord(string correct) {
    cout << "Guess the word!";
    string guess;
    cin >> guess;
    if (guess == correct) {
        cout << "That's it!";
    }
}
        ]]></code>
    </program>
    <solution>
      <p>Below is one way to complete the program.</p>
      <program xml:id="cond_rec_a5a_editor"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

bool guessTheWord(string correct) {
    cout << "Guess the word!";
    string guess;
    cin >> guess;
    if (guess == correct) {
        cout << "That's it!";
    }
    else {
        guessTheWord(correct);
    }
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cond_rec_a6">
    <statement>
      <p>Write the function <c>greaterThan</c> that prints true if the first <c>double</c> argument is greater than
        the second <c>double</c> argument.</p>
    </statement>
    <program xml:id="cond_rec_a6_editor"
             interactive="activecode"
             line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

void greaterThan(FIX ME) {

}
      ]]></code>
      </program>
    <hint>
      <p>Write the function <c>greaterThan</c> that prints true if the first <c>double</c> argument is greater than
        the second <c>double</c> argument. Be sure to include any necessary headers. Use the lines to
        construct the code, then go back to complete the Activecode.</p>
      <activity label="cond_rec_a6_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide"
                exercise-interactive="parson">
        <blocks>
          <block order="3">
            <choice correct="yes">
              <cline>void greaterThan(double a, double b) {</cline>
            </choice>
            <choice>
              <cline>void greaterThan(int a , int b) { </cline>
            </choice>
          </block>
          <block order="5">
            <cline>    if (a &gt; b) {</cline>
            <cline><![CDATA[        cout << "true";]]></cline>
            <cline>    }</cline>
          </block>
          <block order="2">
            <cline>    if (a &lt; b) {</cline>
            <cline><![CDATA[        cout << true;]]></cline>
            <cline>    }</cline>
          </block>
          <block order="4">
            <cline>    else {</cline>
            <cline><![CDATA[        cout << "false";]]></cline>
            <cline>    }</cline>
          </block>
          <block order="7"
                 correct="no">
            <cline>    if (double a &gt; double b) { </cline>
            <cline><![CDATA[        cout << true;]]></cline>
            <cline>    }</cline>
          </block>
          <block order="1">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cond_rec_a7">
    <statement>
      <p>Write the function <c>goodVibes</c> that prints <q>I'm having a <c>mood</c> day!</q> depending on the
        value of <c>mood</c>. If <c>mood</c> is <q>bad</q>, then the function should not do anything since
        it's good vibes only. Be sure to include any necessary headers.</p>
    </statement>
    <program interactive="activecode"
             line-numbers="yes"
             xml:id="cond_rec_a7q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;

void goodVibes(string mood) {

}
        ]]></code>
      </program>
    <solution>
      <p>Below is one way to write the program. The return allows the function to exit if
        there are bad vibes in the room. Otherise, the function prints as directed. </p>
      <program xml:id="cond_rec_a7a_editor"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void goodVibes(string mood) {
    if (mood == "bad") {
        return;
    }
    cout << "I'm having a " << mood << " day";
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cond_rec_a8">
    <statement>
      <p>Write the function <c>exclusiveOr</c> that prints true If either <c>a</c> OR <c>b</c> is true, and
        prints false otherwise.</p>
    </statement>
    <program xml:id="cond_rec_a8_editor"
             interactive="activecode"
             line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

void exclusiveOr(bool a, bool b) {

}
      ]]></code>
      </program>
    <hint>
      <p>Write the function <c>exclusiveOr</c> that prints true If either <c>a</c> OR <c>b</c> is true, and
        prints false otherwise. Be sure to include any necessary headers. Use the lines to construct
        the code, then go back to complete the Activecode.</p>
      <activity label="cond_rec_a8_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide"
                exercise-interactive="parson">
        <blocks>
          <block order="2">
            <cline>void exclusiveOr(bool a, bool b) {</cline>
          </block>
          <block order="1">
            <choice correct="yes">
              <cline>    if (a == true || b == true) {</cline>
              <cline><![CDATA[        cout << "true";]]></cline>
              <cline>    }</cline>
            </choice>
            <choice>
              <cline>    if (a == true &amp;&amp; b == true) { </cline>
              <cline><![CDATA[        cout << "true";]]></cline>
              <cline>    }</cline>
            </choice>
          </block>
          <block order="3">
            <cline>    else {</cline>
            <cline><![CDATA[        cout << "false";]]></cline>
            <cline>    }</cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cond_rec_a9">
    <statement>
      <p>Write the function <c>countdown</c> that takes a positive integer and decrements it until eaching
        zero, printing the number at each step of the way. Once it reaches zero, it should print <q>
        Blastoff!</q></p>
    </statement>
    <program interactive="activecode"
             line-numbers="yes"
             xml:id="cond_rec_a9q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;

void countdown(int num) {

}
        ]]></code>
      </program>
    <solution>
      <p>Below is one way to write the program.</p>
      <program xml:id="cond_rec_a9a_editor"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void countdown(int num) {
    if (num != 0) {
        cout << num << endl;
        num -= 1;
        countdown (num);
    }
    else {
        cout << "Blastoff!";
    }
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cond_rec_a10">
    <statement>
      <p>Write the function <c>printNegativeNum</c> that asks the user for a negative number. If the user does not
        provide a negative number, it should contine asking until the user provides one. It should
        then print the negative number.</p>
    </statement>
    <program xml:id="cond_rec_a10_editor"
             interactive="activecode"
             line-numbers="yes">
        <code><![CDATA[
#include <iostream>
using namespace std;

void printNegativeNum() {

}
      ]]></code>
      </program>
    <hint>
      <p>Write the function <c>printNegativeNum</c> that asks the user for a negative number. If the user does not
        provide a negative number, it should contine asking until the user provides one. It should
        then print the negative number. Use the lines to construct the code, then go back to
        complete the Activecode.</p>
      <activity label="cond_rec_a10_pp"
                numbered="yes"
                adaptive="yes"
                indentation="hide"
                exercise-interactive="parson">
        <blocks>
          <block order="3">
            <cline>void printNegativeNum() {</cline>
          </block>
          <block order="2">
            <cline>    int negative;</cline>
          </block>
          <block order="1">
            <cline><![CDATA[    cout << "Please provide a negative number." << endl;]]></cline>
          </block>
          <block order="6">
            <cline>    cin &gt;&gt; negative;</cline>
          </block>
          <block order="8">
            <choice correct="yes">
              <cline>    if (negative &gt;= 0) {</cline>
              <cline>        printNegativeNum();</cline>
              <cline>    }</cline>
            </choice>
            <choice>
              <cline>    if (negative &gt;= 0) { </cline>
              <cline><![CDATA[        cout << "Please provide a negative nunber." << endl;]]></cline>
              <cline>    }</cline>
            </choice>
          </block>
          <block order="4">
            <cline><![CDATA[    cout << negative << endl;]]></cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>
</exercises>