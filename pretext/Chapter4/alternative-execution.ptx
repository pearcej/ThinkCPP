<?xml version="1.0"?>
<section xml:id="chapter4_alternative-execution-alternative">
  <title>Alternative Execution</title>
  <p>A second form of conditional execution is alternative execution, in
    which there are two possibilities, and the condition determines which
    one gets executed. The syntax looks like:</p>
  <program>if (x % 2 == 0) {
  cout &lt;&lt; "x is even" &lt;&lt; endl;
}
else {
  cout &lt;&lt; "x is odd" &lt;&lt; endl;
}</program>
  <p>If the remainder when x is divided by 2 is zero, then we know that x is
    even, and this code displays a message to that effect. If the condition
    is false, the second set of statements is executed. Since the condition
    must be true or false, exactly one of the alternatives will be executed.</p>
  <p>As an aside, if you think you might want to check the parity (evenness or oddness) of numbers
    often, you might want to <q>wrap</q> this code up in a function, as follows:</p>
  <program>void printParity(int x) {
  if (x % 2 == 0) {
    cout &lt;&lt; "x is even" &lt;&lt; endl;
  }
  else {
    cout &lt;&lt; "x is odd" &lt;&lt; endl;
  }
}</program>
  <p>Now you have a function named <c>printParity</c> that will display an appropriate message for any integer
    you care to provide. In main you would call this function as follows:</p>
  <program>
printParity(17);
</program>
  <p>Always remember that when you <em>call</em> a function, you do not have to declare the types of
    the arguments you provide. C++ can figure out what type they are. You should resist the
    temptation to write things like:</p>
  <program>int number = 17;
printParity(int number);         // WRONG!!!</program>
  <listing label="alt_execution_AC_1">
    <caption>
      This program shows you how the print parity function works.
        Feel free to modify the values of number and otherNumber to
        see how the output is changed.
    </caption>
    <program xml:id="alt_execution_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

void printParity(int x) {
    if (x % 2 == 0) {
        cout << "x is even" << endl;
    }
    else {
        cout << "x is odd" << endl;
    }
}

int main() {
    int number = 17;
    printParity(number);
    int otherNumber = 18;
    printParity(otherNumber);
    return 0;
}
        ]]></code>
    </program>
  </listing>
  <exercise label="alt_execution_1">
    <statement>
      <p>What will be printed after <c>main</c> is executed?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

void weather(int temp) {
  if (temp &lt; 52) {
    cout &lt;&lt; "It is cold!";
  }
  else {
    cout &lt;&lt; "It is warm!";
  }
}

int main() {
  int degrees = 52;
  weather(degrees);
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>It is cold!</p>
        </statement>
        <feedback>
          <p>That statement would print if degrees was less than 50.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>It is warm!</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Nothing prints.</p>
        </statement>
        <feedback>
          <p>One of the statements is satisfied, so something does print.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Error message.</p>
        </statement>
        <feedback>
          <p>There is nothing in the code below that would generate an error.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="alt_execution_2"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a block of code that correctly goes through alternative execution for pricing of
        an entre at a nice restaurant. If the price is more than $30.00, print <q>Expensive!</q>. If
        the price is less than $30.00, print <q>Inexpensive!</q> You should by initializing the cost
        to $40.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>int cost = 40;</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>if (cost &gt; 30) {</cline>
        </choice>
        <choice>
          <cline>if (cost &gt; 30) </cline>
        </choice>
      </block>
      <block order="3">
        <cline><![CDATA[ cout << "Expensive!";]]></cline>
      </block>
      <block order="6">
        <cline>} //"if" bracket</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>else {</cline>
        </choice>
        <choice>
          <cline>else if { </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline><![CDATA[ cout << "Inexpensive!";]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[ cout << "Inexpensive!"]]></cline>
        </choice>
      </block>
      <block order="4">
        <cline>} //"else" bracket</cline>
      </block>
    </blocks>
  </exercise>
</section>