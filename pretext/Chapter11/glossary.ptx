<?xml version="1.0"?>
<section xml:id="chapter11_glossary">
  <title>Glossary</title>
  <dl>
    <li>
      <title>member function:</title>
      <p>A function that operates on an object that is passed as an implicit parameter named <c>this</c>
        .</p>
    </li>
    <li>
      <title>nonmember function:</title>
      <p>A function that is not a member of any structure definition. Also called a <q>free-standing</q>
        function.</p>
    </li>
    <li>
      <title>invoke:</title>
      <p>To call a function <q>on</q> an object, in order to pass the object as an implicit
        parameter.</p>
    </li>
    <li>
      <title>current object:</title>
      <p>The object on which a member function is invoked. Inside the member function, we can refer
        to the current object implicitly, or by using the keyword <c>this</c>.</p>
    </li>
    <li>
      <title>this:</title>
      <p>A keyword that refers to the current object. <c>this</c> is a pointer, which makes it difficult
        to use, since we do not cover pointers in this book.</p>
    </li>
    <li>
      <title>interface:</title>
      <p>A description of how a function is used, including the number and
        types of the parameters and the type of the return value.</p>
    </li>
    <li>
      <title>function declaration:</title>
      <p>A statement that declares the interface to a function without
        providing the body. Declarations of member functions appear inside
        structure definitions even if the definitions appear outside.</p>
    </li>
    <li>
      <title>implementation:</title>
      <p>The body of a function, or the details of how a function works.</p>
    </li>
    <li>
      <title>constructor:</title>
      <p>A special function that initializes the instance variables of a
        newly-created object.</p>
    </li>
  </dl>
  <exercise label="glossary11_1">
    <statement>
      <p>Match each phrase with the corresponding definition by dragging the phrase into the
        appropriate box.</p>
    </statement>
    <feedback>
      <p>Try again!</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>member function</premise>
        <response>A function that operates on an object that is passed as an implicit parameter
          named "this".</response>
      </match>
      <match order="2">
        <premise>nonmember function</premise>
        <response>A free-standing function that is not part of any structure definition.</response>
      </match>
      <match order="3">
        <premise>current object</premise>
        <response>The object on which a member function is invoked.</response>
      </match>
    </matches>
  </exercise>
  <exercise label="glossary11_2">
    <statement>
      <p>Match each phrase with the corresponding definition by dragging the phrase into the
        appropriate box.</p>
    </statement>
    <feedback>
      <p>Try again!</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>invoke</premise>
        <response>To call a function <q>on</q> an object.</response>
      </match>
      <match order="2">
        <premise>this</premise>
        <response>A keyword that refers to the current object.</response>
      </match>
      <match order="3">
        <premise>interface</premise>
        <response>A description of how a function is used.</response>
      </match>
    </matches>
  </exercise>
  <exercise label="glossary11_3">
    <statement>
      <p>Match each phrase with the corresponding definition by dragging the phrase into the
        appropriate box.</p>
    </statement>
    <feedback>
      <p>Try again!</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>function declaration</premise>
        <response>A statement that declares the interface to a function without providing the body.</response>
      </match>
      <match order="2">
        <premise>implementation</premise>
        <response>The body of a function, or the details of how a function works.</response>
      </match>
      <match order="3">
        <premise>constructor</premise>
        <response>A special function that initializes the instance variables of a newly-created
          object.</response>
      </match>
    </matches>
  </exercise>
</section>