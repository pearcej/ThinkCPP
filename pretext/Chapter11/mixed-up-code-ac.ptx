<?xml version="1.0"?>
<section xml:id="chapter11_activecode-exercises">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to assess what you have learned in this chapter.</p>
  <exercise label="XXX">
    <statement>
      <p>Suppose you have the following code. Construct a block of code that would make the print function into a member function.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_11_1_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

// Edit this code
        struct Student {
     int id, year;
     string name;
};

void printStudent(const Student& stu) {
     cout << stu.id << ":" << stu.year << ":" << stu.name << endl;
}

int main() {
      Student s1 = { 56673, 2023, "Bob" };
      printStudent (s1);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code block

    
    <program xml:id="mucp_11_1_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

struct Student {
    int id, year;
    string name;
    void print();
};

void Student::print() {
    Student stu = *this;
    cout << stu.id << ":" << stu.year << ":" << stu.name << endl;
}

int main() {
    Student s1 = { 56673, 2023, "Bob" };
    s1.print();
}
        ]]></code></program>

            

<exercise label="mucp_11_1_ac_a"><statement><p>Below is one way to construct the code block</p></statement><program xml:id="mucp_11_1_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

struct Student {
    int id, year;
    string name;
    void print();
};

void Student::print() {
    Student stu = *this;
    cout << stu.id << ":" << stu.year << ":" << stu.name << endl;
}

int main() {
    Student s1 = { 56673, 2023, "Bob" };
    s1.print();
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's make an album! Write the struct definition for
                    <c>Album</c>, which should have instance variables name and year.
                    Include a member function called check that returns true if
                    the song was released after 2015.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_11_2_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to define the Album struct.

    
    <program xml:id="mucp_11_2_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Album {
    string name;
    int year;
    bool check();
};

bool Album::check() {
    if (year > 2015) {
        return true;
    }
    else {
        return false;
    }
}
        ]]></code></program>

            

<exercise label="mucp_11_2_ac_a"><statement><p>Below is one way to define the <c>Album</c> struct.</p></statement><program xml:id="mucp_11_2_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Album {
    string name;
    int year;
    bool check();
};

bool Album::check() {
    if (year > 2015) {
        return true;
    }
    else {
        return false;
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write the necessary of code to establish
                    the <c>convertToSeconds</c> member function as a part of the <c>Time</c> struct.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_11_3_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the convertToSeconds member function.

    
    <program xml:id="mucp_11_3_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Time {
    int hour;
    int minutes;
    int second;
};

double Time::convertToSeconds() const {
    int minutes = time.hour * 60 + time.minutes;
    double seconds = minutes * 60 + time.second;
    return seconds;
}
        ]]></code></program>

            

<exercise label="mucp_11_3_ac_a"><statement><p>Below is one way to write the <c>convertToSeconds</c> member function.</p></statement><program xml:id="mucp_11_3_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Time {
    int hour;
    int minutes;
    int second;
};

double Time::convertToSeconds() const {
    int minutes = time.hour * 60 + time.minutes;
    double seconds = minutes * 60 + time.second;
    return seconds;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Create the <c>Student::is_older()</c> function as it would be defined INSIDE
                    of the Student structure definition. This function checks if the current
                    Student is older than another Student. The function is invoked on the
                    current Student.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_11_4_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to create the Student::is_older() function.

    
    <program xml:id="mucp_11_4_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

bool is_older(const Student& stu) const {
    if (age > stu.age) {return true;}
        else {return false;}
}
        ]]></code></program>

            

<exercise label="mucp_11_4_ac_a"><statement><p>Below is one way to create the <c>Student::is_older()</c> function.</p></statement><program xml:id="mucp_11_4_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

bool is_older(const Student& stu) const {
    if (age > stu.age) {return true;}
        else {return false;}
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write the necessary code to initialise
                    a constructor for type <c>Days</c> that takes in the number of days and
                    initialises the member variables <c>days</c>, <c>weeks</c>, <c>years</c>.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_11_5_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to initialize the constructor.

    
    <program xml:id="mucp_11_5_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

Days::Days(int num_days) {
    years = num_days / 365;
    Days day;
    num_days -= years * 365;
    weeks = num_days / 7;
    num_days -= weeks * 60.0;
    days = num_days;
}
        ]]></code></program>

            

<exercise label="mucp_11_5_ac_a"><statement><p>Below is one way to initialize the constructor.</p></statement><program xml:id="mucp_11_5_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

Days::Days(int num_days) {
    years = num_days / 365;
    Days day;
    num_days -= years * 365;
    weeks = num_days / 7;
    num_days -= weeks * 60.0;
    days = num_days;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write two constructors for <c>Student</c>. One with no arguments and
                    one with arguments.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_11_6_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the two constructors.

    
    <program xml:id="mucp_11_6_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

Student::Student() {
    void Student::Student() {
        id = 123456789;
        year = 2020;
        name = "Alice";
    }
    Student::Student(int id_in, int year_in, string name_in) {
        Student::Student construct(int id_in, int year_in, string name_in) {
            id = id_in;
            year = year_in;
            name = name_in;
}
        ]]></code></program>

            

<exercise label="mucp_11_6_ac_a"><statement><p>Below is one way to write the two constructors.</p></statement><program xml:id="mucp_11_6_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

Student::Student() {
    void Student::Student() {
        id = 123456789;
        year = 2020;
        name = "Alice";
    }
    Student::Student(int id_in, int year_in, string name_in) {
        Student::Student construct(int id_in, int year_in, string name_in) {
            id = id_in;
            year = year_in;
            name = name_in;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Implement two constructors for the <c>Penguin</c> structure. One should
                    be a default constructor, the other should take arguments. The
                    weight needs to be converted from pounds to kilograms in the second constructor</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_11_7_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to implement the two constructors.

    
    <program xml:id="mucp_11_7_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Penguin {
    int age;
    int weight;
    Penguin();
    Penguin(int age_in, int weight_in);
};

Penguin::Penguin() {
    age = 1;
    weight = 24;
}

Penguin::Penguin(int age_in, int weight_in) {
    age = age_in;
    weight = weight_in;
}
        ]]></code></program>

            

<exercise label="mucp_11_7_ac_a"><statement><p>Below is one way to implement the two constructors.</p></statement><program xml:id="mucp_11_7_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Penguin {
    int age;
    int weight;
    Penguin();
    Penguin(int age_in, int weight_in);
};

Penguin::Penguin() {
    age = 1;
    weight = 24;
}

Penguin::Penguin(int age_in, int weight_in) {
    age = age_in;
    weight = weight_in;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write the necessary blocks of code to make the
                    <c>AddDays</c> function below a member function.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_11_8_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// EDIT THE CODE BELOW

Days AddDays(const Days& d1, const Days& d2) {
    int days = convertToDays (d1) + convertToDays(d2);
    return makeDays (days);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to make the AddDays function a member function.

    
    <program xml:id="mucp_11_8_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

Days Days::add(const Days& d2) const {
    int days = convertToDays() + d2.convertToDays();
    Days day (days);
    return day;
}
        ]]></code></program>

            

<exercise label="mucp_11_8_ac_a"><statement><p>Below is one way to make the <c>AddDays</c> function a member function.</p></statement><program xml:id="mucp_11_8_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

Days Days::add(const Days& d2) const {
    int days = convertToDays() + d2.convertToDays();
    Days day (days);
    return day;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write the necessary blocks of code to create a struct
                    <c>Penguin</c> that stores name and age. In addition have 2 constructors and
                    declare Penguins in main such that both are called.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_11_9_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to creat the Penguin struct and the 2 constructors.

    
    <program xml:id="mucp_11_9_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Penguin {
    int age;
    string name;
    Penguin();
    Penguin(int age_in, string name);
};

Penguin::Penguin() {
    age = 1;
    name = "Alice";
}

Penguin::Penguin(int age_in, string name_in) {
    age = age_in;
    name = name_in;
}

int main() {
    Penguin p1();
    Penguin p2 (3, "Bob");
}
        ]]></code></program>

            

<exercise label="mucp_11_9_ac_a"><statement><p>Below is one way to creat the <c>Penguin</c> struct and the 2 constructors.</p></statement><program xml:id="mucp_11_9_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Penguin {
    int age;
    string name;
    Penguin();
    Penguin(int age_in, string name);
};

Penguin::Penguin() {
    age = 1;
    name = "Alice";
}

Penguin::Penguin(int age_in, string name_in) {
    age = age_in;
    name = name_in;
}

int main() {
    Penguin p1();
    Penguin p2 (3, "Bob");
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write the necessary blocks of code in order to write
                    a header (.h) file for the struct <c>Student</c>.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_11_10_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the header file for the Student struct.

    
    <program xml:id="mucp_11_10_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Student {
    // instance variables
    int id, year;
    string name;
    // constructors
    Student(int id, int year, string name);
    Student();
    // functions
    void print() const;
    bool after(const Student& stu) const;
};
        ]]></code></program>

            

<exercise label="mucp_11_10_ac_a"><statement><p>Below is one way to write the header file for the <c>Student</c> struct.</p></statement><program xml:id="mucp_11_10_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Student {
    // instance variables
    int id, year;
    string name;
    // constructors
    Student(int id, int year, string name);
    Student();
    // functions
    void print() const;
    bool after(const Student& stu) const;
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
</section>
