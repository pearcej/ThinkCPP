<?xml version="1.0"?>
<section xml:id="chapter3_parameters-and-arguments">
  <title>Parameters and Arguments</title>
  <p>Some of the built-in functions we have used have <term>parameters</term>, which are values that
    you provide to let the function do its job. For example, if you want to find the sine of a
    number, you have to indicate what the number is. Thus, <c>sin</c> takes a <c>double</c> value as a
    parameter.</p>
  <p>Some functions take more than one parameter, like <c>pow</c>, which takes two <c>double</c>s, the base
    and the exponent.</p>
  <p>Notice that in each of these cases we have to specify not only how many
    parameters there are, but also what type they are. So it shouldn't
    surprise you that when you write a class definition, the parameter list
    indicates the type of each parameter. For example:</p>
  <program>void printTwice(char phil) {
  cout &lt;&lt; phil &lt;&lt; phil &lt;&lt; endl;
}</program>
  <p>This function takes a single parameter, named phil, that has type <c>char</c>. Whatever that
    parameter is (and at this point we have no idea what it is), it gets printed twice, followed by
    a new line. I chose the name phil to suggest that the name you give a parameter is up to you,
    but in general you want to choose something more illustrative than phil.</p>
  <p>In order to call this function, we have to provide a <c>char</c>. For example, we might have a <c>main</c>
    function like this:</p>
  <program>int main() {
  printTwice('a');
  return 0;
}</program>
  <p>The <c>char</c> value you provide is called an <term>argument</term>, and we say that the argument
    is <term>passed</term> to the function. In this case the value 'a' is passed as an argument to
    printTwice where it will get printed twice.</p>
  <p>Alternatively, if we had a <c>char</c> variable, we could use it as an argument instead:</p>
  <program>int main() {
  char argument = 'b';
  printTwice(argument);
  return 0;
}</program>
  <p>Notice something very important here: the name of the variable we pass
    as an argument (argument) has nothing to do with the name of the
    parameter (phil). Let me say that again:</p>
  <note>
    <p>The name of the variable we pass as an argument has nothing to do
      with the name of the parameter.</p>
  </note>
  <p>They can be the same or they can be different, but it is important to
    realize that they are not the same thing, except that they happen to
    have the same value (in this case, the character 'b').</p>
  <warning>
    <p>The value you provide as an argument must have the same type as the
      parameter of the function you call.</p>
  </warning>
  <p>This rule is important, but it is sometimes confusing because C++
    sometimes converts arguments from one type to another automatically.
    For now you should learn the general rule, and we will deal with
    exceptions later.</p>
  <listing label="params_args_AC_1">
    <caption>
      The following code will show the output of the printTwice function.
        Try modifying the value of argument to change the output.
    </caption>
    <program xml:id="params_args_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

void printTwice(char phil) {
    cout << phil << phil << endl;
}

int main() {
    char argument = 'b';
    printTwice(argument);
    return 0;
}
        ]]></code>
    </program>
  </listing>
  <exercise label="params_args_1">
    <statement>
      <p>What will be printed to the terminal? If nothing will print, or if the compiler will
        throw an error, type <q>error</q>.</p>
      <p>
        <program>
          #include &lt;iostream&gt;
          using namespace std;

          void printTwice(char phil) {
            cout &lt;&lt; phil &lt;&lt; phil &lt;&lt; endl;
          }

          int main() {
            string argument = "s";
            printTwice(argument);
            return 0;
          }
        </program>
      </p>
      <p>
        <var/>
      </p>
    </statement>
    <setup>
      <var>
        <condition string="^\s*error\s*$">
          <feedback>
            <p>Correct! The type provided does not match the expected parameter type!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="params_args_2">
    <statement>
      <p>What will be printed to the terminal? If nothing will print, or if the compiler will throw
        an error, type <q>error</q>.</p>

      <program>
        #include &lt;iostream&gt;
        using namespace std;

        void printTwice(char phil) {
          cout &lt;&lt; phil &lt;&lt; phil &lt;&lt; endl;
        }

        int main() {
          char argument = 'b';
          printTwice(argument);
          return 0;
        }
      </program>
      <p>
        <var/>
      </p>
    </statement>
    <setup>
      <var>
        <condition string="^\s*bb\s*$">
          <feedback>
            <p>The printTwice function will print the character argument provided two times.</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="params_args_4">
    <statement>
      <p>Match the function declaration to an example of its function call.</p>
    </statement>
    <feedback>
      <p>Try again!</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>int timesTwo(int x, int y);</premise>
        <response>timesTwo(4, 7);</response>
      </match>
      <match order="2">
        <premise>int timesTwo(string y, int x);</premise>
        <response>timesTwo("hello", 10);</response>
      </match>
      <match order="3">
        <premise>int timesTwo(double x, string y);</premise>
        <response>timesTwo(4.5, "hello");</response>
      </match>
      <match order="4">
        <premise>int timesTwo(string x, string y);</premise>
        <response>timesTwo("hello", "hi");</response>
      </match>
    </matches>
  </exercise>
</section>