<?xml version="1.0"?>
<exercises xml:id="chapter3_multiple-choice-exercises">
  <title>Multiple Choice Exercises</title>
  <p>Answer the following <term>Multiple Choice</term> questions to assess what you have learned in
    this chapter.</p>
  <exercise label="functions_mc1">
    <statement>
      <p>You want to spice up your resume before the career fair, so you decide to
        update your GPA using the program below. What is the GPA that you will
        have on display for future employers?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

int main() {
  double GPA = 3.52;
  int updatedGPA = int(GPA);
  cout &lt;&lt; "GPA: " &lt;&lt; updatedGPA;
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="functions_mc1_opt_a">
          <p>
            <c>3.0</c>
          </p>
        </statement>
        <feedback id="functions_mc1_opt_a">
          <p>Its correct to think that your GPA will be rounded down, but what else happens when you
            convert from <c>int</c> to <c>double</c>?</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc1_opt_b">
          <p>
            <c>3</c>
          </p>
        </statement>
        <feedback id="functions_mc1_opt_b">
          <p>Converting to an <c>int</c> always rounds down to the nearest integer, so I do not
            recommend using type conversions to build your resume&#x2026; especially if you're close
            to <c>4.0</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc1_opt_c">
          <p>
            <c>4.0</c>
          </p>
        </statement>
        <feedback id="functions_mc1_opt_c">
          <p>Converting to an int <em>will</em> round your GPA, but not in the direction that you
            were hoping for&#x2026; what else happens when you convert from <c>int</c> to <c>double</c>?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc1_opt_d">
          <p>
            <c>4</c>
          </p>
        </statement>
        <feedback id="functions_mc1_opt_d">
          <p>Converting to an int <em>will</em> round yor GPA, but not in the direction that you
            were hoping for.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc1_opt_e">
          <p>Error!</p>
        </statement>
        <feedback id="functions_mc1_opt_e">
          <p>No errors here! Type conversions are perfectly legal in C++!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_mc2">
    <statement>
      <p>What is the value of x after the program executes?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

int main() {
  int x = acos(-1);
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="functions_mc2_opt_a">
          <p>3.14159265358979323846</p>
        </statement>
        <feedback id="functions_mc2_opt_a">
          <p>If <c>x</c> were a double, C++ would automatically round the value of pi to <term>15</term>
            decimal places.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc2_opt_b">
          <p>3.142</p>
        </statement>
        <feedback id="functions_mc2_opt_b">
          <p>If <c>x</c> were a double, C++ would automatically round the value of pi to <term>15</term>
            decimal places.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc2_opt_c">
          <p>3.0</p>
        </statement>
        <feedback id="functions_mc2_opt_c">
          <p>Automatic type conversion will round the value of pi down to the nearest integer, but
            what else happens when we convert a <c>double</c> to an <c>int</c>?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc2_opt_d">
          <p>3</p>
        </statement>
        <feedback id="functions_mc2_opt_d">
          <p>The value of x <em>should</em> be 3, since automatic type conversion will round the
            value of pi down to the nearest integer. Are you sure this program compiles?</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc2_opt_e">
          <p>Error!</p>
        </statement>
        <feedback id="functions_mc2_opt_e">
          <p>Whenever we use math functions, we must include the <c>&lt;cmath&gt;</c> header file.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_mc3">
    <statement>
      <p><term>Multiple Response</term> Select all variables that have a <em>non-zero</em> value
        after the decimal place. (3.1 has a <em>non-zero</em> value, while 3.0 does not)</p>
      <program>#include &lt;iostream&gt;
using namespace std;

int main() {
  int a = 1.5;
  double b = a + 1.5;
  double c = 2.4;
  double d = 1/5;
  int e = c * c;
  double f = int(c);
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="functions_mc3_opt_a">
          <p>
            <c>a</c>
          </p>
        </statement>
        <feedback id="functions_mc3_opt_a">
          <p>C++ performs automatic type conversion to round 1.5 down to the
            nearest integer.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc3_opt_b">
          <p>
            <c>b</c>
          </p>
        </statement>
        <feedback id="functions_mc3_opt_b">
          <p>Since <c>a = 1</c>, we know that <c>b = 2.5</c>, which is a non-zero decimal.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc3_opt_c">
          <p>
            <c>c</c>
          </p>
        </statement>
        <feedback id="functions_mc3_opt_c">
          <p><c>c</c> is a <c>double</c> and has a non-zero decimal.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc3_opt_d">
          <p>
            <c>d</c>
          </p>
        </statement>
        <feedback id="functions_mc3_opt_d">
          <p>C++ performs integer division to round <c>1/5</c> down to the nearest integer. The value
            will be stored as <c>0</c>, not <c>0.2</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc3_opt_e">
          <p>
            <c>e</c>
          </p>
        </statement>
        <feedback id="functions_mc3_opt_e">
          <p><c>c</c> squared may have a non-zero decimal, but automatic type conversion will round
            it down to the nearest integer before storing the value in <c>e</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc3_opt_f">
          <p>
            <c>f</c>
          </p>
        </statement>
        <feedback id="functions_mc3_opt_f">
          <p><c>int(c)</c> rounds <c>c</c> down to the nearest integer before storing the value in <c>f</c>.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_mc4">
    <statement>
      <p><term>Multiple Response</term> Which of the following would work as a function header
        (first line of a function).</p>
    </statement>
    <choices>
      <choice>
        <statement id="functions_mc4_opt_a">
          <p>
            <c>printHelloWorld() {</c>
          </p>
        </statement>
        <feedback id="functions_mc4_opt_a">
          <p>This function header is missing a type.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc4_opt_b">
          <p>
            <c>string palindrome(word) {</c>
          </p>
        </statement>
        <feedback id="functions_mc4_opt_b">
          <p>The function's parameter is missing a type.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc4_opt_c">
          <p>
            <c>int mult(int a, int b) {</c>
          </p>
        </statement>
        <feedback id="functions_mc4_opt_c">
          <p>Correct! The function header has a type, empty parentheses, and
            a squiggly bracket.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc4_opt_d">
          <p>
            <c>char shiftThree(char letter)</c>
          </p>
        </statement>
        <feedback id="functions_mc4_opt_d">
          <p>This function header is missing a squiggly bracket <c>{</c>.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc4_opt_e">
          <p>
            <c>void giveCompliment() {</c>
          </p>
        </statement>
        <feedback id="functions_mc4_opt_e">
          <p>Correct! The function header has a type, empty parentheses, and
            a squiggly bracket.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc4_opt_f">
          <p>
            <c>string friend(string name) {</c>
          </p>
        </statement>
        <feedback id="functions_mc4_opt_f">
          <p><c>friend</c> is a reserved keyword in C++.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_mc5">
    <statement>
      <p>What is printed when the following code runs? Are there any errors?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

void giveCompliment() {
    cout &lt;&lt; "You are awesome!";
}

void giveInsult() {
    insult = "You suck!";
}

int main() {
    giveInsult();
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="functions_mc5_opt_a">
          <p>
            <c>"You are awesome!"</c>
          </p>
        </statement>
        <feedback id="functions_mc5_opt_a">
          <p>The <c>giveCompliment</c> function is not called in <c>main</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc5_opt_b">
          <p>
            <c>"You suck!"</c>
          </p>
        </statement>
        <feedback id="functions_mc5_opt_b">
          <p>The <c>giveInsult</c> function doesn't <c>cout</c> anything.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc5_opt_c">
          <p>Nothing is printed.</p>
        </statement>
        <feedback id="functions_mc5_opt_c">
          <p><c>insult</c> data type is not defined.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc5_opt_d">
          <p>Error!</p>
        </statement>
        <feedback id="functions_mc5_opt_d">
          <p>Correct! <c>insult</c> data type is not defined.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_mc6">
    <statement>
      <p>Rachel and Monica are best friends. They write a function called <c>bestFriends</c> so that they
        announce this fact to the rest of their friends. What is printed when they run the code
        below? Are there any errors?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

void bestFriends(string a, string b) {
    cout &lt;&lt; a &lt;&lt; " is best friends with " &lt;&lt; b;
}

int main() {
    string a = "Rachel";
    string b = "Monica";
    bestFriends(b, a);
}</program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="functions_mc6_opt_a">
          <p>
            <c>"Monica is best friends with Rachel"</c>
          </p>
        </statement>
        <feedback id="functions_mc6_opt_a">
          <p>Correct! Although the function definition has <c><![CDATA[a << " is best
friends with " << b]]></c>, we call the function with
            variable <c>b</c> as argument <c>a</c> and variable <c>a</c> as argument <c>b</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc6_opt_b">
          <p>
            <c>"Rachel is best friends with Monica"</c>
          </p>
        </statement>
        <feedback id="functions_mc6_opt_b">
          <p>You seem to be confusing your arguments and parameters!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc6_opt_c">
          <p>
            <c>a is best friends with b</c>
          </p>
        </statement>
        <feedback id="functions_mc6_opt_c">
          <p>The function <c>couts</c> the <em>values</em> of the variables, not their names!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc6_opt_d">
          <p>
            <c>b is best friends with a</c>
          </p>
        </statement>
        <feedback id="functions_mc6_opt_d">
          <p>The function <c>couts</c> the <em>values</em> of the variables, not their names!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc6_opt_e">
          <p>Error!</p>
        </statement>
        <feedback id="functions_mc6_opt_e">
          <p>There are no errors with this program!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_mc7">
    <statement>
      <p>What is printed when the following code runs? Are there any errors?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

void greeting(string name) {
    cout &lt;&lt; "hello, " &lt;&lt; name &lt;&lt; "!";
}

void goodbye(string name) {
    greeting(name);
    cout &lt;&lt; "!!";
}

int main() {
    string hannah = "Hannah";
    string anna = "Anna";
    string louise = hannah;
    hannah = anna;
    anna = louise;
    goodbye(anna);
}</program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="functions_mc7_opt_a">
          <p>
            <c>hello, Hannah!!!</c>
          </p>
        </statement>
        <feedback id="functions_mc7_opt_a">
          <p>Correct! The string <q>Hannah</q> is assigned to the variable <c>louise</c>, then the value
            of <c>louise</c> is assigned to the variable <c>anna</c>. When <c>goodbye(anna)</c> runs, <c>anna</c> has the value <q>
            Hannah</q>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc7_opt_b">
          <p>
            <c>hello, anna!!!</c>
          </p>
        </statement>
        <feedback id="functions_mc7_opt_b">
          <p>The function <c>couts</c> the <em>value</em> of the variable <c>anna</c> not the variable name!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc7_opt_c">
          <p>
            <c>hello, Anna!!!</c>
          </p>
        </statement>
        <feedback id="functions_mc7_opt_c">
          <p>Is <c>"Anna"</c> still the value of <c>anna</c>?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc7_opt_d">
          <p>
            <c>hello, Louise!</c>
          </p>
        </statement>
        <feedback id="functions_mc7_opt_d">
          <p>The <c>goodbye</c> function adds extra exclamation points.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc7_opt_e">
          <p>
            <c>hello, Louise!!!</c>
          </p>
        </statement>
        <feedback id="functions_mc7_opt_e">
          <p>We assigned the value of <c>louise</c> to <c>anna</c>. Is <c>"Louise"</c> the value of <c>louise</c>?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc7_opt_f">
          <p>Error!</p>
        </statement>
        <feedback id="functions_mc7_opt_f">
          <p>There are no errors with this program!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_mc8">
    <statement>
      <p><term>Multiple Response</term> Which of the following are legal function calls of <c>orderFood</c>?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

void orderFood(string food, int quantity) {
    cout &lt;&lt; "I'll have " &lt;&lt; quantity &lt;&lt; " " &lt;&lt; food;
}

int main() {
    string a = "wings";
    string b = "sliders";
    int c = 3;
    double d = 8.64;
    char e = 'p';
}</program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="functions_mc8_opt_a">
          <p>
            <c>orderFood(a, c);</c>
          </p>
        </statement>
        <feedback id="functions_mc8_opt_a">
          <p>Correct! <c>a</c> is a string and <c>c</c> is an int.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc8_opt_b">
          <p>
            <c>orderFood(b, d);</c>
          </p>
        </statement>
        <feedback id="functions_mc8_opt_b">
          <p>Correct! Automatic type conversion will convert d to an <c>int</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc8_opt_c">
          <p>
            <c>orderFood(e, c);</c>
          </p>
        </statement>
        <feedback id="functions_mc8_opt_c">
          <p><c>e</c> has a character value, and this function takes a <em>string</em>.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc8_opt_d">
          <p>
            <c>orderfood(a, d);</c>
          </p>
        </statement>
        <feedback id="functions_mc8_opt_d">
          <p>Correct! Automatic type conversion will convert d to an <c>int</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc8_opt_e">
          <p>
            <c>orderFood(c, a);</c>
          </p>
        </statement>
        <feedback id="functions_mc8_opt_e">
          <p>You have to input your arguments in the correct order.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_mc9">
    <statement>
      <p>What is printed when the following code runs? Are there any errors?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

void printWord(string w) {
    cout &lt;&lt; w &lt;&lt; w;
}

int main() {
    char a = 'a' + 5;
    printWord (a);
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="functions_mc9_opt_a">
          <p>
            <c>a</c>
          </p>
        </statement>
        <feedback id="functions_mc9_opt_a">
          <p><c>'a'</c> is no longer the value of <c>a</c>, and the function would print it more than
            once. Hint: think about the <em>type</em> of <c>a</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc9_opt_b">
          <p>
            <c>f</c>
          </p>
        </statement>
        <feedback id="functions_mc9_opt_b">
          <p><c>'f'</c> is the value of a, but the function would print it more than once. Hint: think
            about the <em>type</em> of <c>a</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc9_opt_c">
          <p>
            <c>aa</c>
          </p>
        </statement>
        <feedback id="functions_mc9_opt_c">
          <p><c>'a'</c> is no longer the value of <c>a</c>. Hint: think about the <em>type</em> of <c>a</c>
            .</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc9_opt_d">
          <p>
            <c>ff</c>
          </p>
        </statement>
        <feedback id="functions_mc9_opt_d">
          <p>Hint: think about the <em>type</em> of <c>a</c>.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc9_opt_e">
          <p>Error!</p>
        </statement>
        <feedback id="functions_mc9_opt_e">
          <p><c>printWord</c> takes a string, not a character, as an argument.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_mc10">
    <statement>
      <p>How many local variables and parameters does <c>mult</c> have?</p>
      <program>void mult(int a, int b, int c) {
    int d = 7;
    cout &lt;&lt; a * b * c * d;
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="functions_mc10_opt_a">
          <p>1 parameter, 3 local variables</p>
        </statement>
        <feedback id="functions_mc10_opt_a">
          <p>Remember, the parameters are declared in the function definition, and the local
            variables are declared <em>inside</em> of the function.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc10_opt_b">
          <p>2 parameters, 4 local variables</p>
        </statement>
        <feedback id="functions_mc10_opt_b">
          <p>You can declare multiple variables at once! Also, remember that local variables are
            declared <em>inside</em> of the function.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc10_opt_c">
          <p>2 parameters, 1 local variables</p>
        </statement>
        <feedback id="functions_mc10_opt_c">
          <p>You can declare multiple variables at once!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc10_opt_d">
          <p>3 parameters, 1 local variable</p>
        </statement>
        <feedback id="functions_mc10_opt_d">
          <p><c>a</c>, <c>b</c>, and <c>c</c> are parameters declared in the function definition. <c>d</c>
            is a local variable declared inside of the function.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc10_opt_e">
          <p>3 parameters, 4 local variables</p>
        </statement>
        <feedback id="functions_mc10_opt_e">
          <p>Remember that local variables are declared <em>inside</em> of the function.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_mc11">
    <statement>
      <p>How many calls are made to <c>party</c> during the entire program?</p>
      <program>#include &lt;iostream&gt;
using namespace std;

void party(int day_of_month, string address) {
    cout &lt;&lt; "party on "&lt;&lt;day_of_month&lt;&lt;" at "
         &lt;&lt; address &lt;&lt; endl;
}

void weekend(bool available) {
    if(available==true) {
       party(21,"Big house");
       party(22,"CCTC");
    } else {
       cout &lt;&lt; "sorry I have to study for ENGR101!" &lt;&lt; endl;
    }
}

int main() {
    bool im_free=false;
    party(25, "North campus");
    weekend(im_free);

    im_free=true;
    party(25, "Central campus");
    weekend(im_free);
    return 0;
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="functions_mc11_opt_a">
          <p>6 calls</p>
        </statement>
        <feedback id="functions_mc11_opt_a">
          <p>Take into account that <c>weekend</c> only calls <c>party</c> if a conditional is true!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc11_opt_b">
          <p>2 calls</p>
        </statement>
        <feedback id="functions_mc11_opt_b">
          <p><c>weekend</c> can also call the function <c>party</c></p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="functions_mc11_opt_c">
          <p>4 calls</p>
        </statement>
        <feedback id="functions_mc11_opt_c">
          <p>Correct! two calls by <c>main</c> and two calls by <c>weekend</c></p>
        </feedback>
      </choice>
      <choice>
        <statement id="functions_mc11_opt_d">
          <p>3 calls</p>
        </statement>
        <feedback id="functions_mc11_opt_d">
          <p>One invocation of <c>weekend</c> calls <c>party</c> twice.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</exercises>