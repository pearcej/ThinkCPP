<?xml version="1.0"?>
<section xml:id="chapter3_mixed-up-code-exercises-1">
  <title>Mixed-Up Code Exercises</title>
  <p>Answer the following <term>Mixed-Up Code</term> questions to
            assess what you have learned in this chapter.</p>
  <exercise label="functions_p9" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a function that correctly prints the integer conversion of the passed double.</p>
    </statement>
    <blocks>
      <block order="6">
        <choice correct="yes">
          <cline>void printInteger(double d) {</cline>
        </choice>
        <choice>
          <cline>printInteger(double d); </cline>
        </choice>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline> d = int(d);</cline>
        </choice>
        <choice>
          <cline> d = integer(d); </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline> cout &lt;&lt; d;</cline>
        </choice>
        <choice>
          <cline> cout d; </cline>
        </choice>
      </block>
      <block order="1">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="functions_p0" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a function called newLine that takes no arguments and prints a blank line.  Then construct another function called divider that prints two blank lines separated by a line of <q>&#x2026; &#x2026; &#x2026; &#x2026;</q></p>
    </statement>
    <blocks>
      <block order="6">
        <cline>void newLine() {</cline>
      </block>
      <block order="7">
        <cline> cout &lt;&lt; endl;</cline>
      </block>
      <block order="3">
        <cline>}</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>void divider() {</cline>
        </choice>
        <choice>
          <cline> void divider (newLine) { </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline> newLine();  //first call</cline>
        </choice>
        <choice>
          <cline><![CDATA[ cout << newLine();  //first call ]]></cline>
        </choice>
      </block>
      <block order="11">
        <cline><![CDATA[ cout << ". . . . . . . . . . . . " << endl;]]></cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline> newline();  //second call</cline>
        </choice>
        <choice>
          <cline><![CDATA[ cout << newLine();  //second call ]]></cline>
        </choice>
      </block>
      <block order="8">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="functions_p1" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a function that correctly calculates the volume of a cone with as much precision as possible and prints the value to the terminal.  Use 3.14 for pi.</p>
    </statement>
    <blocks>
      <block order="1">
        <choice correct="yes">
          <cline>void volumeCone(double r, double h) {</cline>
        </choice>
        <choice>
          <cline>double volumeCone(double r, double h) { </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline> double vol = 1/3.0 * 3.14 * r * r * h;</cline>
        </choice>
        <choice>
          <cline> double vol = 1/3 * 3.14 * r * r * h; </cline>
        </choice>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline> int vol = 1/3 * 3.14 * r * r * h; </cline>
        </choice>
        <choice>
          <cline> int vol = 1/3.0 * 3.14 * r * r * h; </cline>
        </choice>
      </block>
      <block order="6">
        <cline> cout &lt;&lt; vol;</cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="functions_p3" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a function that prints the sin of an angle given in degrees. Use 3.14 for pi.</p>
    </statement>
    <blocks>
      <block order="9">
        <cline>#include &lt;cmath&gt;</cline>
      </block>
      <block order="1">
        <cline>#include &lt;iostream&gt;</cline>
        <cline>using namespace std;</cline>
      </block>
      <block order="11">
        <choice correct="yes">
          <cline>void sineDegrees(double d) {</cline>
        </choice>
        <choice>
          <cline>void sineDegrees() { </cline>
        </choice>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline> double r = d * (2 * 3.14) / 360.0;</cline>
        </choice>
        <choice>
          <cline> double r = d * 360.0 / (2 * 3.14); </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline> double sine = sin(r);</cline>
        </choice>
        <choice>
          <cline> double sine = sin(d); </cline>
        </choice>
      </block>
      <block order="3">
        <cline> cout &lt;&lt; sine;</cline>
      </block>
      <block order="5">
        <cline>}</cline>
      </block>
      <block order="10" correct="no">
        <cline> #include &lt;math&gt; </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="functions_p4" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a function that prints the price (with 8% sales tax) of an item with after using a 30% off coupon.</p>
    </statement>
    <blocks>
      <block order="5">
        <choice correct="yes">
          <cline>void finalPrice(double item) {</cline>
        </choice>
        <choice>
          <cline>void finalPrice(string item) { </cline>
        </choice>
      </block>
      <block order="2">
        <cline> double discount = item * 0.30;</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline> double final = (item - discount) * 1.08;</cline>
        </choice>
        <choice>
          <cline> double final = (item - discount) * 0.08; </cline>
        </choice>
      </block>
      <block order="6">
        <cline> double final = item - discount * 0.08; </cline>
      </block>
      <block order="8">
        <cline> cout &lt;&lt; final;</cline>
      </block>
      <block order="7">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="functions_p5" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Suppose you have already defined a function called sumOfSquares which returns the sum of the squares of two numbers and root which returns the square root of a number.  Construct a function that calculates the hypotenuse of the right triangle and prints the three sidelengths.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>int main() {</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline> double s1 = 4.8;</cline>
          <cline> double s2 = 3.8;</cline>
        </choice>
        <choice>
          <cline> int s1 = 4.8; </cline>
          <cline> int s2 = 3.6;</cline>
        </choice>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline> double sqSum = sumOfSquares(s2, s1);</cline>
        </choice>
        <choice>
          <cline> sqSum = sumOfSquares(s1, s2); </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline> double hyp = root(sqSum);</cline>
        </choice>
        <choice>
          <cline> double hyp = root(s1, s2); </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline><![CDATA[ cout << "The sides of the triangle are: " << s1 << ", " << s2 << ", " << hyp;]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[ cout << "The sides of the triangle are: " << s1 << ", " << s2 << ", " << s3; ]]></cline>
        </choice>
      </block>
      <block order="5">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="functions_p6" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>The chickens from the previous chapter are infuriated.  Construct a function that prints <q>Eat</q> on the first line, <q>More</q> on the second line, and the name of the passed animal on the fourth line, followed by an exclamation point.</p>
    </statement>
    <blocks>
      <block order="6">
        <choice correct="yes">
          <cline>void eatMore(string animal) {</cline>
        </choice>
        <choice>
          <cline>void eatMore() { </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline> cout &lt;&lt; "Eat";</cline>
        </choice>
        <choice>
          <cline><![CDATA[ cout << "Eat" << endl; ]]></cline>
        </choice>
      </block>
      <block order="8">
        <cline><![CDATA[ cout << endl; cout << "More" << endl;]]></cline>
      </block>
      <block order="9">
        <cline> cout &lt;&lt; endl;</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline><![CDATA[ cout << animal << "!" << endl;]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[ cout << animal << ! << endl; ]]></cline>
        </choice>
      </block>
      <block order="7">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="functions_p7" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a function that takes a dollar amount and cent amount and prints the total amount of money that you have. Hint: the mod operator &#x2018;%' returns the remainder of a division.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>void printAmount(int dollars, int cents) {</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline> int dollarTotal = dollars + cents / 100;</cline>
        </choice>
        <choice>
          <cline> double dollarTotal = dollars + cents / 100.0; </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline> double centTotal = cents % 100;</cline>
        </choice>
        <choice>
          <cline> double centTotal = cents / 100; </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline><![CDATA[ cout << "$" << dollarTotal << "." << centTotal;]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[ cout << "$" << dollarTotal << centTotal; ]]></cline>
        </choice>
      </block>
      <block order="1">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="functions_p8" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>In Michigan, the probability that it snows on any given day in the winter is about 14%.  The probability of having a snow day on any given day in the winter is about 4%.  The probability that is snows and you have a snow day is 8%.
            Construct and call a function that calculates the probability of a having a snow day, given the fact that it will snow tonight.
            For reference, the formula for conditional probability is: P(A|B) = P(B and A) / P(B).</p>
    </statement>
    <blocks>
      <block order="9">
        <choice correct="yes">
          <cline>void conditionalProb(double B, double both) {</cline>
        </choice>
        <choice>
          <cline>void conditionalProb(double B, both) { </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline> double prob = both / B;</cline>
        </choice>
        <choice>
          <cline> double prob = B / both; </cline>
        </choice>
      </block>
      <block order="1">
        <cline> cout &lt;&lt; prob;</cline>
      </block>
      <block order="2">
        <cline>}</cline>
      </block>
      <block order="12">
        <cline>int main() {</cline>
      </block>
      <block order="4">
        <cline> double pSnow = 0.14;</cline>
        <cline> double pSnowday = 0.04;</cline>
        <cline> double pBoth = 0.08;</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline> conditionalProb(pSnow, pBoth);</cline>
        </choice>
        <choice>
          <cline> conditionalProb(pSnowday, pBoth); </cline>
        </choice>
      </block>
      <block order="3">
        <cline> conditionalProb(pSnowday, pSnow); </cline>
      </block>
      <block order="7">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="functions_p2" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Your final grade is determined by a midterm component (each midterm is worth 20% of the grade) and a final component. In order to avoid any discrepancies with students who's grades are on the fence, your teacher follows this strict grading scale:
            [0%,60%) = F, [60%, 70%) = D, [70%, 80%) = C, [80%, 90%) = B and [90%, 100%] = A. He does not round until the very end.
            Construct a function that determines a student's final grade percentage according to this grading scheme and prints the result.</p>
    </statement>
    <blocks>
      <block order="9">
        <choice correct="yes">
          <cline>void finalGrade(double m1, double m2, double f) {</cline>
        </choice>
        <choice>
          <cline>void finalGrade(double m1, m2, f) { </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline> double m_comp = m1 * 0.2 + m2 * 0.2;</cline>
          <cline> double f_comp = f * 0.06;</cline>
        </choice>
        <choice>
          <cline> int m_comp = m1 * 0.2 + m2 * 0.2; </cline>
          <cline> int f_comp = f * 0.06;</cline>
        </choice>
      </block>
      <block order="7">
        <cline> double final_grade = m_comp + f_comp;</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline><![CDATA[ cout << int(final_grade);]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[ cout << int(final_grade) + 1; ]]></cline>
        </choice>
      </block>
      <block order="1">
        <cline><![CDATA[ cout << final_grade; ]]></cline>
      </block>
      <block order="2">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>
