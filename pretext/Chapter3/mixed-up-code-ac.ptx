<?xml version="1.0"?>
<section xml:id="chapter3_activecode-exercises-2">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to
            assess what you have learned in this chapter.</p>
  <exercise label="XXX">
    <statement>
      <p>Construct a function <c>printInteger</c> that correctly prints the integer conversion of the passed double.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="functions_p9_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    double x = 3.14159265;
    printInteger(x);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the printInteger function.

    
    <program xml:id="functions_p9_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void printInteger(double d) {
    d = int(d);
    cout << d;
}

int main() {
    double x = 3.14159265;
    printInteger(x);
}
        ]]></code></program>

            

<exercise label="functions_p9_ac_a"><statement><p>Below is one way to write the <c>printInteger</c> function.</p></statement><program xml:id="functions_p9_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void printInteger(double d) {
    d = int(d);
    cout << d;
}

int main() {
    double x = 3.14159265;
    printInteger(x);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a function called <c>newLine</c> that takes no arguments and prints a blank line.  Then construct another function called <c>divider</c> that prints two blank lines separated by a line of <q>&#x2026; &#x2026; &#x2026; &#x2026;</q></p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="functions_p0_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() { // Implement the two functions
    newLine();
    divider();
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the two functions, newLine and divider.

    
    <program xml:id="functions_p0_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void newLine() {
    cout << endl;
}  //newLine

void divider() {
    newLine();  //first call
    cout << ". . . . . . . . . . . . " << endl;
    newLine();  //second call
}  //divider

int main() { // Use the two functions
    newLine();
    divider();
}
        ]]></code></program>

            

<exercise label="functions_p0_ac_a"><statement><p>Below is one way to write the two functions, <c>newLine</c> and <c>divider</c>.</p></statement><program xml:id="functions_p0_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void newLine() {
    cout << endl;
}  //newLine

void divider() {
    newLine();  //first call
    cout << ". . . . . . . . . . . . " << endl;
    newLine();  //second call
}  //divider

int main() { // Use the two functions
    newLine();
    divider();
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a function, <c>volumeCone</c>, that takes as inputs the radius then the height and correctly calculates the volume of a cone with as much precision as possible and prints the value to the terminal.  Use 3.14 for pi.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="functions_p1_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    double r = 2.5;
    double h = 5.5;
    volumeCone(r,h);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the volumeCone function.

    
    <program xml:id="functions_p1_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void volumeCone(double r, double h) {
    double vol = 1/3.0 * 3.14 * r * r * h;
    cout << vol;
}
        ]]></code></program>

            

<exercise label="functions_p1_ac_a"><statement><p>Below is one way to write the <c>volumeCone</c> function.</p></statement><program xml:id="functions_p1_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void volumeCone(double r, double h) {
    double vol = 1/3.0 * 3.14 * r * r * h;
    cout << vol;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a function, <c>sineDegrees</c>, that prints the sin of an angle given in degrees. Use 3.14 for pi.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="functions_p3_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    double degrees = 25.00;
    sineDegrees(degrees);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the sineDegrees function.

    
    <program xml:id="functions_p3_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;

void sineDegrees(double d) {
    double r = d * (2 * 3.14) / 360.0;
    double sine = sin(r);
    cout << sine;
}

int main() {
    double degrees = 25.00;
    sineDegrees(degrees);
}
        ]]></code></program>

            

<exercise label="functions_p3_ac_a"><statement><p>Below is one way to write the <c>sineDegrees</c> function.</p></statement><program xml:id="functions_p3_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;

void sineDegrees(double d) {
    double r = d * (2 * 3.14) / 360.0;
    double sine = sin(r);
    cout << sine;
}

int main() {
    double degrees = 25.00;
    sineDegrees(degrees);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a function, <c>finalPrice</c>, that prints the price (with 8% sales tax) of an item with after using a 30% off coupon.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="functions_p4_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    double item = 200.50;
    finalPrice(item);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the finalPrice function.

    
    <program xml:id="functions_p4_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void finalPrice(double item) {
    double discount = item * 0.30;
    double final = (item - discount) * 1.08;
    cout << final;
}
        ]]></code></program>

            

<exercise label="functions_p4_ac_a"><statement><p>Below is one way to write the <c>finalPrice</c> function.</p></statement><program xml:id="functions_p4_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void finalPrice(double item) {
    double discount = item * 0.30;
    double final = (item - discount) * 1.08;
    cout << final;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Suppose you have already defined a function called <c>sumOfSquares</c> which returns the sum of the squares of two numbers and <c>root</c> which returns the square root of a number.  Construct a function that calculates the hypotenuse of the right triangle and prints the three sidelengths.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="functions_p5_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <math.h>
using namespace std;
// DO NOT MODIFY THIS CODE

double sumOfSquares ( double s2, double s1) {
    return (s2 * s2) + (s1 * s1);
}

double root ( double num ) {
    return sqrt(num);
}

// YOUR CODE HERE
        ]]></code>
    </program>
    <statement>
      <p>Below is one way to write the <c>sumOfSquares</c> and <c>root</c> functions.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="functions_p5_ac_a_editor">
      <code><![CDATA[
#include <iostream>
#include <math.h>
using namespace std;

double sumOfSquares ( double s2, double s1) {
    return (s2 * s2) + (s1 * s1);
}

double root ( double num ) {
    return sqrt(num);
}

int main() {
    double s1 = 4.8;
    double s2 = 3.8;
    double sqSum = sumOfSquares(s2, s1);
    double hyp = root(sqSum);
    cout << "The sides of the triangle are: " << s1 << ", " << s2 << ", " << hyp;
}
        ]]></code>
    </program>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>The chickens from the previous chapter are infuriated.  Construct a function, <c>eatMore</c>, that prints <q>Eat</q> on the first line, <q>More</q> on the second line, and the name of the passed animal on the fourth line, followed by an exclamation point.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="functions_p6_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    string animal = "Chicken";
    eatMore(animal);
}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the eatMore function.

    
    <program xml:id="functions_p6_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void eatMore(string animal) {
    cout << "Eat";
    cout << endl; cout << "More" << endl;
    cout << endl;
    cout << animal << "!" << endl;
}

int main() {
    string animal = "Chicken";
    eatMore(animal);
}
        ]]></code></program>

            

<exercise label="functions_p6_ac_a"><statement><p>Below is one way to write the <c>eatMore</c> function.</p></statement><program xml:id="functions_p6_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void eatMore(string animal) {
    cout << "Eat";
    cout << endl; cout << "More" << endl;
    cout << endl;
    cout << animal << "!" << endl;
}

int main() {
    string animal = "Chicken";
    eatMore(animal);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a function, <c>printAmount</c>, that takes a dollar amount and cent amount and prints the total amount of money that you have. Hint: the mod operator &#x2018;%' returns the remainder of a division.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="functions_p7_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE


// DO NOT MODIFY BELOW THIS LINE
int main() {
    int dollars = 45;
    int cents = 56;
    printAmount(dollars, cents);
}
        ]]></code>
    </program>
    <solution>


    
                Below is onw way to write the printAmount function.

    
    <program xml:id="functions_p7_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void printAmount(int dollars, int cents) {
    int dollarTotal = dollars + cents / 100;
    double centTotal = cents % 100;
    cout << "$" << dollarTotal << "." << centTotal;
}

int main() {
    int dollars = 45;
    int cents = 56;
    printAmount(dollars, cents);
}
        ]]></code></program>

            

<exercise label="functions_p7_ac_a"><statement><p>Below is onw way to write the <c>printAmount</c> function.</p></statement><program xml:id="functions_p7_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void printAmount(int dollars, int cents) {
    int dollarTotal = dollars + cents / 100;
    double centTotal = cents % 100;
    cout << "$" << dollarTotal << "." << centTotal;
}

int main() {
    int dollars = 45;
    int cents = 56;
    printAmount(dollars, cents);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>In Michigan, the probability that it snows on any given day in the winter is about 14%.  The probability of having a snow day on any given day in the winter is about 4%.  The probability that is snows and you have a snow day is 8%.
                    Construct and call a function, <c>conditionalProb</c>, that calculates the probability of a having a snow day, given the fact that it will snow tonight.
                    For reference, the formula for conditional probability is: P(A|B) = P(B and A) / P(B).</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="functions_p8_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write and call the conditionalProb function.

    
    <program xml:id="functions_p8_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void conditionalProb(double B, double both) {
    double prob = both / B;
    cout << prob;
} //conditionalProb

int main() {
    double pSnow = 0.14;
    double pBoth = 0.08;
    conditionalProb(pSnow, pBoth);
} //main
        ]]></code></program>

            

<exercise label="functions_p8_ac_a"><statement><p>Below is one way to write and call the <c>conditionalProb</c> function.</p></statement><program xml:id="functions_p8_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void conditionalProb(double B, double both) {
    double prob = both / B;
    cout << prob;
} //conditionalProb

int main() {
    double pSnow = 0.14;
    double pBoth = 0.08;
    conditionalProb(pSnow, pBoth);
} //main
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Your final grade is determined by a midterm component (each midterm is worth 20% of the grade) and a final component that is worth 60% of the grade. In order to avoid any discrepancies with students who's grades are on the fence, your teacher follows this strict grading scale:
                    [0%,60%) = F, [60%, 70%) = D, [70%, 80%) = C, [80%, 90%) = B and [90%, 100%] = A. He does not round until the very end.
                    Construct a function, <c>finalGrade</c>, that determines a student's final grade percentage according to this grading scheme and prints the result.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="functions_p2_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the finalGrade function.

    
    <program xml:id="functions_p2_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void finalGrade(double m1, double m2, double f) {
    double m_comp = m1 * 0.2 + m2 * 0.2;
    double f_comp = f * 0.6;
    double final_grade = m_comp + f_comp;
    cout << int(final_grade);
}

int main() {
    finalGrade(80,70,80);
}
        ]]></code></program>

            

<exercise label="functions_p2_ac_a"><statement><p>Below is one way to construct the <c>finalGrade</c> function.</p></statement><program xml:id="functions_p2_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

void finalGrade(double m1, double m2, double f) {
    double m_comp = m1 * 0.2 + m2 * 0.2;
    double f_comp = f * 0.6;
    double final_grade = m_comp + f_comp;
    cout << int(final_grade);
}

int main() {
    finalGrade(80,70,80);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
</section>
