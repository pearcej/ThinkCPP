<?xml version="1.0"?>
<section xml:id="chapter3_functions-with-multiple-parameters">
  <title>Functions with Multiple Parameters</title>
  <p>The syntax for declaring and invoking functions with multiple parameters
    is a common source of errors. First, remember that you have to declare
    the type of every parameter. For example</p>
  <program>void printTime(int hour, int minute) {
  cout &lt;&lt; hour;
  cout &lt;&lt; ":";
  cout &lt;&lt; minute;
}</program>
  <p>It might be tempting to write <c>(int hour, minute)</c>, but that format is only legal for variable declarations,
    not for parameters.</p>
  <p>Another common source of confusion is that you do not have to declare
    the types of arguments when you call a function. The following is wrong!</p>
  <program>int hour = 11;
int minute = 59;
printTime(int hour, int minute);   // WRONG!</program>
  <p>In this case, the compiler can tell the type of hour and minute by
    looking at their declarations.</p>
  <warning>
    <p>It is unnecessary and illegal to include the type when you pass
      variables as arguments! The type is only needed for declaration.</p>
  </warning>
  <p>The correct syntax is printTime(hour, minute).</p>
  <listing label="multiple_params_AC_1">
    <caption>
      This program shows how the dollar_amount and cent_amount arguments
        are passed into the printPrice function.
    </caption>
    <program xml:id="multiple_params_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

void printPrice(int dollars, int cents) {
    cout << "Price is " << dollars << " dollars and " << cents << " cents." << endl;
}

int main() {
    int dollar_amount = 2;
    int cent_amount = 92;
    printPrice(dollar_amount, cent_amount);
    return 0;
}
        ]]></code>
    </program>
  </listing>
  <exercise label="multiple_params_1">
    <statement>
      <p>Which of the following is a correct function header (first line of
        a function definition)?</p>
    </statement>
    <choices>
      <choice>
        <statement id="multiple_params_1_opt_a">
          <p>
            <c>totalcost(double cost, tax, discount)</c>
          </p>
        </statement>
        <feedback id="multiple_params_1_opt_a">
          <p><c>totalcost</c> needs a return type, and each parameter needs a data type.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="multiple_params_1_opt_b">
          <p>
            <c>totalCost(double cost, double tax) {</c>
          </p>
        </statement>
        <feedback id="multiple_params_1_opt_b">
          <p><c>totalcost</c> needs a return type.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="multiple_params_1_opt_c">
          <p>
            <c>void totalCost(double cost, double tax, double discount) {</c>
          </p>
        </statement>
        <feedback id="multiple_params_1_opt_c">
          <p>Correct!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="multiple_params_2">
    <statement>
      <p>Which of the following is a legal function call of the function below?</p>
      <program>void multiplyTwo(int num, string name) {
  int total = num * 2;
  cout &lt;&lt; "Hi " &lt;&lt; name &lt;&lt; ", your total is " &lt;&lt; total &lt;&lt; "!" &lt;&lt; endl;
}

int main() {
  int x = 2;
  string phil = "Phil";
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="multiple_params_2_opt_a">
          <p>
            <c>multiplyTwo(int x, string phil);</c>
          </p>
        </statement>
        <feedback id="multiple_params_2_opt_a">
          <p>Data types are not needed when calling a function.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="multiple_params_2_opt_b">
          <p>
            <c>multiplyTwo (x, phil);</c>
          </p>
        </statement>
        <feedback id="multiple_params_2_opt_b">
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="multiple_params_2_opt_c">
          <p>
            <c>void multiplyTwo(int num, string name) {</c>
          </p>
        </statement>
        <feedback id="multiple_params_2_opt_c">
          <p>This is the function definition.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="multiple_params_2_opt_d">
          <p>
            <c>void multiplyTwo(int x, string phil);</c>
          </p>
        </statement>
        <feedback id="multiple_params_2_opt_d">
          <p>Data types are not needed when calling a function.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>