<?xml version="1.0"?>
<section xml:id="chapter3_composition">
  <title>Composition</title>
  <p>Just as with mathematical functions, C++ functions can be <term>composed</term>, meaning that
    you use one expression as part of another. For example, you can use any expression as an
    argument to a function:</p>
  <program>
double x = cos(angle + pi / 2);
</program>
  <p>This statement takes the value of pi, divides it by two and adds the result to the value of
    angle. The sum is then passed as an argument to the <c>cos</c> function.</p>
  <p>You can also take the result of one function and pass it as an argument
    to another:</p>
  <listing label="function_comp_AC_1">
    <caption>
      This program finds the log base e of 10 and raises e to that power. The
        result of this computation is assigned to x.
    </caption>
    <program xml:id="function_comp_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    double x = exp(log(10.0));
    cout << x;
}
        ]]></code>
    </program>
  </listing>
  <exercise label="function_comp_1">
    <statement>
      <p>Which of these statements has proper syntax?</p>
    </statement>
    <choices>
      <choice>
        <statement id="function_comp_1_opt_a">
          <p>
            <c>double x = log6(12);</c>
          </p>
        </statement>
        <feedback id="function_comp_1_opt_a">
          <p><c>log6</c> is not a built in cmath function, but you could write an implementation for it
            if you wanted!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="function_comp_1_opt_b">
          <p>
            <c>double val = abs(tan(1.57));</c>
          </p>
        </statement>
        <feedback id="function_comp_1_opt_b">
          <p>This correctly uses cmath functions!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="function_comp_1_opt_c">
          <p>
            <c>double num = exp(cosine(0.86667));</c>
          </p>
        </statement>
        <feedback id="function_comp_1_opt_c">
          <p><c>cosine</c> is not a built in cmath function, but <c>cos</c> is!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="function_comp_1_opt_d">
          <p>
            <c>double y = exp(cos(1.047)) + exp(tan(2.094))</c>
          </p>
        </statement>
        <feedback id="function_comp_1_opt_d">
          <p>This would be correct if it ended in a semi-colon.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="function_comp_2">
    <statement>
      <p>Which of these statements returns the y-component of the unit
        vector at 330 degrees?</p>
    </statement>
    <choices>
      <choice>
        <statement id="function_comp_2_opt_a">
          <p>
            <c>y = cos(330);</c>
          </p>
        </statement>
        <feedback id="function_comp_2_opt_a">
          <p>You must always convert to radians before using sinusoidal functions.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="function_comp_2_opt_b">
          <p>
            <c>y = cos(330 * 2 * pi / 360);</c>
          </p>
        </statement>
        <feedback id="function_comp_2_opt_b">
          <p><c>cos</c> will return the x-component.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="function_comp_2_opt_c">
          <p>
            <c>y = sin(330);</c>
          </p>
        </statement>
        <feedback id="function_comp_2_opt_c">
          <p>You must always convert to radians before using sinusoidal functions.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="function_comp_2_opt_d">
          <p>
            <c>y = sin(330 * 2 * pi / 360);</c>
          </p>
        </statement>
        <feedback id="function_comp_2_opt_d">
          <p><c>sin</c> returns the y-component, <c>cos</c> returns the x-component.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="function_comp_2_opt_e">
          <p>
            <c>y = tan(330 * 2 * pi / 360);</c>
          </p>
        </statement>
        <feedback id="function_comp_2_opt_e">
          <p><c>tan</c> is not the proper function to use here.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>