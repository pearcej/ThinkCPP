<?xml version="1.0"?>
<section xml:id="chapter12_activecode-exercises">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to assess what you have learned in this chapter.</p>
  <exercise label="XXX">
    <statement>
      <p>Let's write the struct definition for <c>Song</c>. Song should have
                    instance variables title, artist, and numLikes.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_12_1_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to define the Song struct.

    
    <program xml:id="mucp_12_1_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Song {
    string title;
    string artist;
    int numLikes;
};
        ]]></code></program>

            

<exercise label="mucp_12_1_ac_a"><statement><p>Below is one way to define the <c>Song</c> struct.</p></statement><program xml:id="mucp_12_1_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Song {
    string title;
    string artist;
    int numLikes;
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's make an album! Write the struct definition for
                    <c>Album</c>, which should have instance variables name, year and
                    a vector of Songs.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_12_2_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to define the Album struct.

    
    <program xml:id="mucp_12_2_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Song {
    string title;
    string artist;
    int numLikes;
};

struct Album {
    string name;
    int year;
    vector&#60Song&#62 songs;
};
        ]]></code></program>

            

<exercise label="mucp_12_2_ac_a"><statement><p>Below is one way to define the <c>Album</c> struct.</p></statement><program xml:id="mucp_12_2_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Song {
    string title;
    string artist;
    int numLikes;
};

struct Album {
    string name;
    int year;
    vector&#60Song&#62 songs;
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Two Songs are equal if the title and artist of the Songs are equal.
                    Write the function <c>songEqual</c>, which takes two Songs as parameters
                    and returns true if they are equal.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_12_3_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the songEqual function.

    
    <program xml:id="mucp_12_3_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std

struct Song {
    string title;
    string artist;
    int numLikes;
};

bool songEqual(const Song& a, const &Song b) {
    if (a.title == b.title && a.artist == b.artist) {
        return true;
    }
    else {
        return false;
    }
}
        ]]></code></program>

            

<exercise label="mucp_12_3_ac_a"><statement><p>Below is one way to write the <c>songEqual</c> function.</p></statement><program xml:id="mucp_12_3_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std

struct Song {
    string title;
    string artist;
    int numLikes;
};

bool songEqual(const Song& a, const &Song b) {
    if (a.title == b.title && a.artist == b.artist) {
        return true;
    }
    else {
        return false;
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>What if we'd like to search an album for our favorite song?
                    Write the <c>Album</c> member function searchAlbum which takes a
                    Song as a parameter and returns the location of the Song in
                    the album. If the song isn't found, return -1. Use the
                    songEqual function we defined earlier!</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_12_4_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the Album member function.

    
    <program xml:id="mucp_12_4_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Song {
    string title;
    string artist;
    int numLikes;
};

struct Album {
    string name;
    int year;
    vector<Song> songs;
};

int Album::searchAlbum(const Song& a) {
    for (size_t i = 0; i < songs.size(); ++i) {
        if (songEqual (songs[i], a)) {
            return i;
        }
    }
    return -1;
}
        ]]></code></program>

            

<exercise label="mucp_12_4_ac_a"><statement><p>Below is one way to write the <c>Album</c> member function.</p></statement><program xml:id="mucp_12_4_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Song {
    string title;
    string artist;
    int numLikes;
};

struct Album {
    string name;
    int year;
    vector<Song> songs;
};

int Album::searchAlbum(const Song& a) {
    for (size_t i = 0; i < songs.size(); ++i) {
        if (songEqual (songs[i], a)) {
            return i;
        }
    }
    return -1;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>What's the most popular Song within an Album? Let's write
                    the <c>Album</c> member function mostLikedSong, which prints out
                    the information of the most liked Song in the format <q>The most
                    liked song is title by artist with numLikes likes.</q></p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_12_5_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the Album member function.

    
    <program xml:id="mucp_12_5_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Song {
    string title;
    string artist;
    int numLikes;
};

struct Album {
    string name;
    int year;
    vector<Song> songs;
};

void Album::mostLikedSong() {
    int maxIndex = 0;
    int maxLikes = 0;
    for (size_t i = 0; i < songs.size(); ++i) {
        if (songs[i].numLikes > maxLikes) {
            maxIndex = i;
            maxLikes = songs[i].numLikes;
        }
    }
    cout << "The most liked song is " << songs[maxIndex].title;
    cout << " by " << songs[maxIndex].artist << " with ";
    cout << songs[maxIndex].numLikes << " likes." << endl;
}
        ]]></code></program>

            

<exercise label="mucp_12_5_ac_a"><statement><p>Below is one way to write the <c>Album</c> member function.</p></statement><program xml:id="mucp_12_5_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Song {
    string title;
    string artist;
    int numLikes;
};

struct Album {
    string name;
    int year;
    vector<Song> songs;
};

void Album::mostLikedSong() {
    int maxIndex = 0;
    int maxLikes = 0;
    for (size_t i = 0; i < songs.size(); ++i) {
        if (songs[i].numLikes > maxLikes) {
            maxIndex = i;
            maxLikes = songs[i].numLikes;
        }
    }
    cout << "The most liked song is " << songs[maxIndex].title;
    cout << " by " << songs[maxIndex].artist << " with ";
    cout << songs[maxIndex].numLikes << " likes." << endl;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the struct definition for <c>Product</c>. <c>Product</c> should have
                    instance variables name and price.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_12_6_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to define the Product struct.

    
    <program xml:id="mucp_12_6_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Product {
    string name;
    double price;
};
        ]]></code></program>

            

<exercise label="mucp_12_6_ac_a"><statement><p>Below is one way to define the <c>Product</c> struct.</p></statement><program xml:id="mucp_12_6_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Product {
    string name;
    double price;
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's make a shopping list! Write the struct definition for
                    <c>List</c>, which should have instance variables type and
                    a vector of Products.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_12_7_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to define the List struct.

    
    <program xml:id="mucp_12_7_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Product {
    string name;
    double price;
};

struct List {
    string type;
    vector&#60Product&#62 products;
};
        ]]></code></program>

            

<exercise label="mucp_12_7_ac_a"><statement><p>Below is one way to define the <c>List</c> struct.</p></statement><program xml:id="mucp_12_7_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Product {
    string name;
    double price;
};

struct List {
    string type;
    vector&#60Product&#62 products;
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Two Products are equal if the name and price of the Products are equal.
                    Write the function productEqual, which takes two Products as parameters
                    and returns true if they are equal. What if we want to check to see if
                    we have bananas in our shopping list? Write the List member function
                    <c>searchList</c>, which takes a Product as a parameter and returns the location
                    of the Product in the List. Return -1 if it's not in the List.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_12_8_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the searchList member function.

    
    <program xml:id="mucp_12_8_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Product {
    string name;
    double price;
};

bool productEqual(const Product& a, const &Product b) {
    if (a.name == b.name && a.price == b.price) {
        return true;
    }
    else {
        return false;
    }
}

int List::searchList(const Product& a) {
    for (size_t i = 0; i < products.size(); ++i) {
        if (productEqual (products[i], a)) {
            return i;
        }
    }
    return -1;
}
        ]]></code></program>

            

<exercise label="mucp_12_8_ac_a"><statement><p>Below is one way to write the <c>searchList</c> member function.</p></statement><program xml:id="mucp_12_8_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Product {
    string name;
    double price;
};

bool productEqual(const Product& a, const &Product b) {
    if (a.name == b.name && a.price == b.price) {
        return true;
    }
    else {
        return false;
    }
}

int List::searchList(const Product& a) {
    for (size_t i = 0; i < products.size(); ++i) {
        if (productEqual (products[i], a)) {
            return i;
        }
    }
    return -1;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Time to checkout! Write the List member function <c>totalPrice</c>
                    which calculates and returns the total price of all the Products.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_12_9_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the totalPrice member function.

    
    <program xml:id="mucp_12_9_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Product {
    string name;
    double price;
};

struct List {
    string type;
    vector<Product> products;
};

double List::totalPrice() {
    double total = 0;
    for (size_t i = 0; i < products.size(); ++i) {
        total += products[i].price;
    }
    return total;
}
        ]]></code></program>

            

<exercise label="mucp_12_9_ac_a"><statement><p>Below is one way to write the <c>totalPrice</c> member function.</p></statement><program xml:id="mucp_12_9_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Product {
    string name;
    double price;
};

struct List {
    string type;
    vector<Product> products;
};

double List::totalPrice() {
    double total = 0;
    for (size_t i = 0; i < products.size(); ++i) {
        total += products[i].price;
    }
    return total;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Oops! We made a mistake and grabbed pineapple pizza.
                    What if we want to remove an Product from our List?
                    Write the List member function <c>removeProduct</c>, which takes
                    an index as a parameter and removes it. Then it fills
                    the gap with the last product in the List.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_12_10_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the removeProduct member function.

    
    <program xml:id="mucp_12_10_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Product {
    string name;
    double price;
};

struct List {
    string type;
    vector&#60Product&#62 products;
};

void List::removeProduct(int index) {
    products[index] = products[products.size() - 1];
}
        ]]></code></program>

            

<exercise label="mucp_12_10_ac_a"><statement><p>Below is one way to write the <c>removeProduct</c> member function.</p></statement><program xml:id="mucp_12_10_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Product {
    string name;
    double price;
};

struct List {
    string type;
    vector&#60Product&#62 products;
};

void List::removeProduct(int index) {
    products[index] = products[products.size() - 1];
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
</section>
