<?xml version="1.0"?>
<section xml:id="chapter12_the-equals-function">
  <title>The <c>equals</c> function</title>
  <p>In order for two cards to be equal, they have to have the same rank and the same suit.
    Unfortunately, the <c>==</c> operator does not work for user-defined types like <c>Card</c>, so we
    have to write a function that compares two cards. We'll call it <c>equals</c>. It is also possible to
    write a new definition for the <c>==</c> operator, but we will not cover that in this book.</p>
  <p>It is clear that the return value from <c>equals</c> should be a boolean that indicates whether the
    cards are the same. It is also clear that there have to be two <c>Card</c>s as parameters. But we
    have one more choice: should <c>equals</c> be a member function or a free-standing function?</p>
  <p>As a member function, it looks like this:</p>
  <program>bool Card::equals(const Card&amp; c2) const {
  return (rank == c2.rank &amp;&amp; suit == c2.suit);
}</program>
  <p>To use this function, we have to invoke it on one of the cards and pass
    the other as an argument:</p>
  <program>Card card1 (1, 11);
Card card2 (1, 11);

if (card1.equals(card2)) {
  cout &lt;&lt; "Yup, that's the same card." &lt;&lt; endl;
}</program>
  <p>This method of invocation always seems strange to me when the function is something like <c>equals</c>,
    in which the two arguments are symmetric. What I mean by symmetric is that it does not matter
    whether I ask <q>Is A
      equal to B?</q> or <q>Is B equal to A?</q> In this case, I think it looks better to rewrite <c>equals</c>
    as a nonmember function:</p>
  <program>bool equals(const Card&amp; c1, const Card&amp; c2) {
  return (c1.rank == c2.rank &amp;&amp; c1.suit == c2.suit);
}</program>
  <p>When we call this version of the function, the arguments appear
    side-by-side in a way that makes more logical sense, to me at least.</p>
  <program>if (equals(card1, card2)) {
  cout &lt;&lt; "Yup, that's the same card." &lt;&lt; endl;
}</program>
  <p>Of course, this is a matter of taste. My point here is that you should
    be comfortable writing both member and nonmember functions, so that you
    can choose the interface that works best depending on the circumstance.</p>
  <listing label="12_4">
    <caption>
      Run this active code to see how the <c>equals()</c> function works.
    </caption>
    <program xml:id="c12_4_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <string>
#include <vector>
using namespace std;

struct Card {
    int suit, rank;

    Card();
    Card(int s, int r);
    void print() const;
    bool equals(const Card& c2) const;
};

int main() {
    Card card1 (1,11);
    Card card2 (1,11);
    Card card3 (3,11);
    card1.equals(card2);
    card1.equals(card3);
}

        ]]></code>
      <tests>

Card::Card() {
  suit = 0;  rank = 0;
}

Card::Card(int s, int r) {
  suit = s;  rank = r;
}

bool Card::equals(const Card&amp; c2) const {
  bool boolean = (rank == c2.rank &amp;&amp; suit == c2.suit);
  if (boolean == true) {
    cout &lt;&lt; "Yup, that's the same card." &lt;&lt; endl;
  }
  else {
    cout &lt;&lt; "Nope, those cards are different." &lt;&lt; endl;
  }
  return boolean;
}

void Card::print() const {
  vector&lt;string&gt; suits(4);
  suits[0] = "Clubs";
  suits[1] = "Diamonds";
  suits[2] = "Hearts";
  suits[3] = "Spades";

  vector&lt;string&gt; ranks(14);
  ranks[1] = "Ace";
  ranks[2] = "2";
  ranks[3] = "3";
  ranks[4] = "4";
  ranks[5] = "5";
  ranks[6] = "6";
  ranks[7] = "7";
  ranks[8] = "8";
  ranks[9] = "9";
  ranks[10] = "10";
  ranks[11] = "Jack";
  ranks[12] = "Queen";
  ranks[13] = "King";

   cout &lt;&lt; ranks[rank] &lt;&lt; " of " &lt;&lt; suits[suit] &lt;&lt; endl;
}
</tests>
    </program>
  </listing>
  <exercise label="equals_function_1">
    <statement>
      <p>How can we compare two <c>Card</c> objects?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Directly, using the build in == operator.</p>
        </statement>
        <feedback>
          <p>Incorrect! We have to create our own method to compare two Card objects, the ==
            operator won't work.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Compare their ranks and suits separately using the == operator. If either comparison is
            true, then they are equal.</p>
        </statement>
        <feedback>
          <p>Incorrect! This would return true if two cards have the same rank, but different suits
            OR the same suit, but different ranks.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Compare their ranks and suits separately using the == operator. If either comparison is
            false, then they are NOT equal.</p>
        </statement>
        <feedback>
          <p>Correct! Both ranks and suits must be the same for two cards to be equal.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>They cannot be compared because they are non-numerical objects.</p>
        </statement>
        <feedback>
          <p>Incorrect! Card objects can be compared, but we must create our own method.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="equals_function_2">
    <statement>
      <p>Should we write the <c>equals()</c> function as a free-standing function, or as a member function
        of <c>Card</c>?</p>
    </statement>
    <choices>
      <choice>
        <statement id="equals_function_2_opt_a">
          <p>A free-standing function, because we shouldn't <q>invoke</q> the function on just one <c>Card</c>
            .</p>
        </statement>
        <feedback id="equals_function_2_opt_a">
          <p>Incorrect! We can invoke the function on a <c>Card</c>!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="equals_function_2_opt_b">
          <p>A member function, because the <c>equals()</c> operation is part of the <c>Card</c> data structure.</p>
        </statement>
        <feedback id="equals_function_2_opt_b">
          <p>Incorrect! The <c>equals()</c> operation is not necessarily part of the <c>Card</c> data structure.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="equals_function_2_opt_c">
          <p>Both are viable.</p>
        </statement>
        <feedback id="equals_function_2_opt_c">
          <p>Correct! This is a matter of preference!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="equals_function_3"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>In a card game called Euchre, the highest ranked suit is called the trump suit. The trump
        suit contains
        all of the cards of that suit, and the Jack of the other suit of the same color. For
        example, if Hearts
        was trump, the trump suit would contain all Hearts, and the Jack of Diamonds. Implement the
        is_trump()
        function that returns true of a Card is part of the trump suit. Assume we have a helper
        function same_color()
        that returns the other suit of the same color.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>bool Card::is_trump(string trump_suit) {</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline> if (suit == trump_suit) {</cline>
          <cline>  return true;</cline>
          <cline> }</cline>
        </choice>
        <choice>
          <cline> if (suit != trump_suit) {                         </cline>
          <cline>  return false;</cline>
          <cline> }</cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline> else if (rank == "Jack" &amp;&amp; suit == same_color()) {</cline>
          <cline>  return true;</cline>
          <cline> }</cline>
        </choice>
        <choice>
          <cline> else if (rank == "Jack") {                         </cline>
          <cline>  return true;</cline>
          <cline> }</cline>
        </choice>
      </block>
      <block order="4">
        <cline> else {</cline>
        <cline>  return false;</cline>
        <cline> }</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>}</cline>
        </choice>
        <choice>
          <cline>};                         </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
</section>