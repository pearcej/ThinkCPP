<?xml version="1.0"?>
<section xml:id="chapter12_decks-and-subdecks">
  <title>Decks and subdecks</title>
  <p>Looking at the interface to <c>findBisect</c></p>
  <program>int findBisect(const Card&amp; card, const vector&lt;Card&gt;&amp; deck,
        int low, int high) {</program>
  <p>it might make sense to treat three of the parameters, <c>deck</c>, <c>low</c> and <c>high</c>, as a single
    parameter that specifies a <em>subdeck</em>.</p>
  <p>This kind of thing is quite common, and I sometimes think of it as an <term>abstract parameter</term>.
    What I mean by <term>abstract,</term> is something that is not literally part of the program
    text, but which describes the function of the program at a higher level.</p>
  <p>For example, when you call a function and pass a vector and the bounds <c>low</c> and <c>high</c>,
    there is nothing that prevents the called function from accessing parts of the vector that are
    out of bounds. So you are not literally sending a subset of the deck; you are really sending the
    whole deck. But as long as the recipient plays by the rules, it makes sense to think of it,
    abstractly, as a subdeck.</p>
  <p>There is one other example of this kind of abstraction that you might have noticed in <xref ref="chapter9_functions-for-objects"/>, when I referred
    to an <q>empty</q> data structure. The reason I put <q>empty</q> in quotation marks was to
    suggest that it is not literally accurate. All variables have values all the time. When you
    create them, they are given default values. So there is no such thing as an empty object.</p>
  <p>But if the program guarantees that the current value of a variable is never read before it is
    written, then the current value is irrelevant. Abstractly, it makes sense to think of such a
    variable as <q>empty.</q></p>
  <p>This kind of thinking, in which a program comes to take on meaning beyond what is literally
    encoded, is a very important part of thinking like a computer scientist. Sometimes, the word <q>
    abstract</q> gets used so often and in so many contexts that it is hard to interpret.
    Nevertheless, abstraction is a central idea in computer science (as well as many other fields).</p>
  <p>A more general definition of <q>abstraction</q> is <q>The process of modeling a
      complex system with a simplified description in order to suppress
      unnecessary details while capturing relevant behavior.</q></p>
  <exercise label="decks_and_subdecks_1">
    <statement>
      <p>Which is false about the <c>findBisect()</c> funtion?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>It uses binary search to locate the card in the deck.</p>
        </statement>
        <feedback>
          <p>This is true. Binary search is very efficient.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>If the program user plays by the rules, we can think of deck, low, and high abstractly
            as a subdeck.</p>
        </statement>
        <feedback>
          <p>This is true. If the user doesn't follow the rules, we might be in trouble.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>It can only access the part of the deck that is between the bounds high and low.</p>
        </statement>
        <feedback>
          <p>This is false! findBisect() can access the entire deck, even when you pass high and low
            parameters.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>There is no such thing as an empty object.</p>
        </statement>
        <feedback>
          <p>This is true. When you create an object, it is given default values.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="decks_and_subdecks_2">
    <statement>
      <p>When a programmer hides all unnecessary details from the user to reduce complexity and
        increase efficiency, this is called <var/>. </p>
    </statement>
    <setup>
      <var case="insensitive">
        <condition string="^\s*abstraction\s*$">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*x\s*$">
          <feedback>
            <p>Incorrect! You may need to go back and read!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
</section>