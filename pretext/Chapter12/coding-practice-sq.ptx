<?xml version="1.0"?>
<section xml:id="chapter12_coding-practice-1">
  <title>Coding Practice</title>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter12', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_12_AC_2q">
        <statement>
          <p>An image is just a matrix of pixels. Write the <c>struct</c> definition for <c>Image</c>,
                    which should store information about its height and width and contain a matrix
                    of <c>Pixel</c>s. Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_12_AC_2q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
};

// Write your code for the struct Image here.
        ]]></code>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter12', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_12_AC_2_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>An image is just a matrix of pixels. Write the <c>struct</c> definition for <c>Image</c>,
                    which should store information about its height and width and contain a matrix
                    of <c>Pixel</c>s. Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="2">
            <cline>struct Image {</cline>
          </block>
          <block order="6">
            <cline>    int height;</cline>
          </block>
          <block order="3">
            <cline>    int width;</cline>
          </block>
          <block order="5">
            <cline><![CDATA[    vector<vector<Pixel>> matrix;]]></cline>
          </block>
          <block order="7" correct="no">
            <cline><![CDATA[    vector<Pixel> matrix; ]]></cline>
          </block>
          <block order="1" correct="no">
            <cline><![CDATA[    vector<vector> matrix; ]]></cline>
          </block>
          <block order="4">
            <cline>};</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter12', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_12_AC_4q">
        <statement>
          <p>Now let's print an <c>Image</c>. Unfortunately we can't print out the actual
                    image to the terminal, but we can print out the <c>Pixel</c>s in the <c>Image</c>
                    matrix. Write the <c>Image</c> member function <c>printImage</c>.
                    Separate pixels in the same row with a space and add a new line
                    at the end of each row. Use the <c>printPixel</c> function we created previously.
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_12_AC_4q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector<vector<Pixel>> matrix;
    void printImage();
};

// Write your implementation of printImage here.

int main() {
    vector<vector<Pixel> > matrix = { { { 0, 255, 255 }, { 0, 0, 0 }, { 255, 255, 255 } },
                                    { { 30, 60, 50 }, { 20, 135, 200 }, { 60, 80, 125 } } };
    Image image = { 2, 3, matrix };
    image.printImage();
}
        ]]></code>
          <tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter12', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_12_AC_4_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Now let's print an <c>Image</c>. Unfortunately we can't print out the actual
                    image to the terminal, but we can print out the <c>Pixel</c>s in the <c>Image</c>
                    matrix. Write the <c>Image</c> member function <c>printImage</c>.
                    Separate pixels in the same row with a space and add a new line
                    at the end of each row. Use the <c>printPixel</c> function we created previously.
                    Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="8">
            <cline>void Image::printImage() {</cline>
          </block>
          <block order="9">
            <cline><![CDATA[    for (int r = 0; r < height; ++r) {]]></cline>
          </block>
          <block order="6">
            <cline><![CDATA[    for (int c = 0; c < width; ++ c) {]]></cline>
          </block>
          <block order="4">
            <cline>        matrix[r][c].printPixel();</cline>
          </block>
          <block order="3">
            <cline><![CDATA[        cout << " ";]]></cline>
          </block>
          <block order="2">
            <cline>    }</cline>
          </block>
          <block order="1">
            <cline>    cout &lt;&lt; endl;</cline>
          </block>
          <block order="7">
            <cline>    }</cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter12', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_12_AC_6q">
        <statement>
          <p>Let's write a <c>swapPixel</c> member function for <c>Image</c>. <c>swapPixel</c>
                    takes two pairs of row indices and column indices from a matrix and swaps the two
                    <c>Pixel</c>s at those locations. Note that these indices are 0-indexed, unlike the
                    previous <c>cropIndex</c> parameters. Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_12_AC_6q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector<vector<Pixel> > matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
};

// Write your implementation of swapPixel here.

int main() {
    vector<vector<Pixel> > matrix = { { { 0, 140, 255 }, { 0, 0, 0 }, { 15, 20, 255 } } };
    Image image = { 1, 3, matrix };
    image.printImage();
    cout << endl;
    image.swapPixel(0, 0, 0, 2);
    image.printImage();
}
        ]]></code>
          <tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter12', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_12_AC_6_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Let's write a <c>swapPixel</c> member function for <c>Image</c>. <c>swapPixel</c>
                    takes two pairs of row indices and column indices from a matrix and swaps the two
                    <c>Pixel</c>s at those locations. Note that these indices are 0-indexed, unlike the
                    previous <c>cropIndex</c> parameters.
                    Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="5">
            <cline>void Image::swapPixel(int row1, int col1, int row2, int col2) {</cline>
          </block>
          <block order="3">
            <cline>    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };</cline>
          </block>
          <block order="1">
            <cline>    matrix[row1][col1] = matrix[row2][col2];</cline>
          </block>
          <block order="4">
            <cline>    matrix[row2][col2] = temp;</cline>
          </block>
          <block order="2">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter12', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_12_AC_8q">
        <statement>
          <p>Oops! Somehow our image came out upside down. Let's write
                    the <c>Image</c> member function <c>flipVertical</c>, which
                    reverts an image to be right side up.
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_12_AC_8q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector<vector<Pixel> > matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
    void flipVertical();
};

// Write your implementation of flipVertical here.

int main() {
    vector<vector<Pixel> > matrix = { { { 255, 255, 255 }, { 255, 255, 255 }, { 255, 255, 255 } },
                                    { { 50, 50, 50 }, { 10, 10, 10 }, { 50, 50, 50 } },
                                    { { 30, 30, 30 }, { 70, 70, 70 }, { 30, 30, 30 } },
                                    { { 0, 0, 0 }, { 0, 0, 0 }, { 0, 0, 0 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout << endl;
    image.flipVertical();
    image.printImage();
}
        ]]></code>
          <tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}

void Image::flipHorizontal() {
    for (int r = 0; r &lt; height; ++r) {
        int start = 0;
        int end = width - 1;
        while (start &lt; end) {
            swapPixel(r, start, r, end);
            ++start;
            --end;
        }
    }
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter12', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_12_AC_8_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Oops! Somehow our image came out upside down. Let's write
                    the <c>Image</c> member function <c>flipVertical</c>, which
                    reverts an image to be right side up.
                    Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="3">
            <cline>void Image::flipVertical() {</cline>
            <cline><![CDATA[    for (int c = 0; c < width; ++c) {]]></cline>
          </block>
          <block order="5">
            <cline>        int start = 0;</cline>
          </block>
          <block order="6">
            <cline>        int end = height - 1;</cline>
          </block>
          <block order="10">
            <cline><![CDATA[        while (start < end) {]]></cline>
          </block>
          <block order="7">
            <cline>            swapPixel(start, c, end, c);</cline>
          </block>
          <block order="1">
            <cline>            ++start;</cline>
          </block>
          <block order="8">
            <cline>            --end;</cline>
          </block>
          <block order="4">
            <cline>        }</cline>
          </block>
          <block order="9">
            <cline>    }</cline>
          </block>
          <block order="2">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter12', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_12_AC_10q">
        <statement>
          <p>Let's return our image to the state of a clean slate. Write the
                    function <c>clearImage</c>, which sets the color of every <c>Pixel</c>
                    to white. Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_12_AC_10q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector<vector<Pixel> > matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
    void flipVertical();
    void createBorder(Pixel p);
    void clearImage();
};

// Write your implementation of clearImage here.

int main() {
    vector<vector<Pixel> > matrix = { { { 0, 0, 0 }, { 10, 10, 10 }, { 65, 70, 255 } },
                                    { { 26, 48, 205 }, { 43, 12, 15 }, { 45, 30, 70 } },
                                    { { 89, 36, 65 }, { 75, 43, 26 }, { 40, 75, 70 } } };
    Image image = { 3, 3, matrix };
    image.printImage();
    cout << endl;
    image.clearImage();
    image.printImage();
}
        ]]></code>
          <tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}

void Image::flipHorizontal() {
    for (int r = 0; r &lt; height; ++r) {
        int start = 0;
        int end = width - 1;
        while (start &lt; end) {
            swapPixel(r, start, r, end);
            ++start;
            --end;
        }
    }
}

void Image::flipVertical() {
    for (int c = 0; c &lt; width; ++c) {
        int start = 0;
        int end = height - 1;
        while (start &lt; end) {
            swapPixel(start, c, end, c);
            ++start;
            --end;
        }
    }
}

void Image::createBorder(Pixel p) {
    for (int r = 0; r &lt; height; ++r) {
        matrix[r][0] = p;
        matrix[r][width - 1] = p;
    }
    for (int c = 0; c &lt; width; ++c) {
        matrix[0][c] = p;
        matrix[height - 1][c] = p;
    }
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter12', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_12_AC_10_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Let's return our image to the state of a clean slate. Write the
                    function <c>clearImage</c>, which sets the color of every <c>Pixel</c>
                    to white.
                    Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="1">
            <cline>void Image::clearImage() {</cline>
          </block>
          <block order="5">
            <cline><![CDATA[    for (int r = 0; r < height; r++) {]]></cline>
          </block>
          <block order="2">
            <cline><![CDATA[        for (int c = 0; c < width; c++) {]]></cline>
          </block>
          <block order="7">
            <cline>            matrix[r][c].r = 255;</cline>
          </block>
          <block order="8">
            <cline>            matrix[r][c].g = 255;</cline>
          </block>
          <block order="3">
            <cline>            matrix[r][c].b = 255;</cline>
          </block>
          <block order="6">
            <cline>        }</cline>
          </block>
          <block order="4">
            <cline>    }</cline>
          </block>
          <block order="9">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
</section>
