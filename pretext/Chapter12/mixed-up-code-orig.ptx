<?xml version="1.0"?>
<section xml:id="chapter12_mixed-up-code-practice">
  <title>Mixed Up Code Practice</title>
  <exercise label="mucp_12_1" numbered="yes" adaptive="yes" indentation="show">
    <statement>
      <p>Let's write the struct definition for Song. Song should have
            instance variables title, artist, and numLikes. Put the necessary
            blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>struct Song {</cline>
      </block>
      <block order="2" correct="no">
        <cline>Struct Song {  </cline>
      </block>
      <block order="3">
        <cline>   string title;</cline>
      </block>
      <block order="1">
        <cline>   string artist;</cline>
      </block>
      <block order="6">
        <cline>   int numLikes;</cline>
      </block>
      <block order="4">
        <cline>};</cline>
      </block>
      <block order="7" correct="no">
        <cline>}  </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_12_2" numbered="yes" adaptive="yes" indentation="show">
    <statement>
      <p>Let's make an album! Write the struct definition for
            Album, which should have instance variables name, year and
            a vector of Songs. Put the necessary
            blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>struct Album {</cline>
      </block>
      <block order="5" correct="no">
        <cline>string Album {  </cline>
      </block>
      <block order="3" correct="no">
        <cline>   string title;  </cline>
      </block>
      <block order="7">
        <cline>   string name;</cline>
      </block>
      <block order="9">
        <cline>   int year;</cline>
      </block>
      <block order="10" correct="no">
        <cline>   Song song;  </cline>
      </block>
      <block order="8">
        <cline>   vector&lt;Song&gt; songs;</cline>
      </block>
      <block order="2" correct="no">
        <cline>   vector&lt;string&gt; Song;  </cline>
      </block>
      <block order="4">
        <cline>};</cline>
      </block>
      <block order="6" correct="no">
        <cline>}  </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_12_3" numbered="yes" adaptive="yes" indentation="show">
    <statement>
      <p>Two Songs are equal if the title and artist of the Songs are equal.
            Write the function songEqual, which takes two Songs as parameters
            and returns true if they are equal. Put the necessary
            blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>bool songEqual(const Song&amp; a, const &amp;Song b) {</cline>
      </block>
      <block order="7" correct="no">
        <cline>bool songEqual(Song const &amp;a, Song const &amp;b) {  </cline>
      </block>
      <block order="2" correct="no">
        <cline>bool Song::songEqual(const Song&amp; song) {  </cline>
      </block>
      <block order="9">
        <cline>   if (a.title == b.title &amp;&amp; a.artist == b.artist) {</cline>
      </block>
      <block order="11" correct="no">
        <cline>   if (title == b.title &amp;&amp; artist == b.artist) {  </cline>
      </block>
      <block order="4">
        <cline>      return true;</cline>
      </block>
      <block order="6">
        <cline>   }</cline>
      </block>
      <block order="3">
        <cline>   else {</cline>
      </block>
      <block order="8">
        <cline>      return false;</cline>
      </block>
      <block order="1">
        <cline>   }</cline>
      </block>
      <block order="10">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_12_4" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>What if we'd like to search an album for our favorite song?
            Write the Album member function searchAlbum which takes a
            Song as a parameter and returns the location of the Song in
            the album. If the song isn't found, return -1. Use the
            songEqual function we defined earlier! Put the necessary
            blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="16">
        <cline>int Album::searchAlbum(const Song&amp; a) {</cline>
      </block>
      <block order="4" correct="no">
        <cline>int searchAlbum(const Album&amp; album, const Song&amp; a) {  </cline>
      </block>
      <block order="12" correct="no">
        <cline>bool searchAlbum(Song const &amp;a) {  </cline>
      </block>
      <block order="8">
        <cline><![CDATA[   for (size_t i = 0; i < songs.size(); ++i) {]]></cline>
      </block>
      <block order="7" correct="no">
        <cline><![CDATA[   for (size_t i = 0; i < album.size(); ++i) {  ]]></cline>
      </block>
      <block order="1" correct="no">
        <cline><![CDATA[   for (size_t i = 0; i < Song.size(); ++i) {  ]]></cline>
      </block>
      <block order="5">
        <cline>      if (songEqual (songs[i], a)) {</cline>
      </block>
      <block order="6" correct="no">
        <cline>      if (songs[i] == a) {  </cline>
      </block>
      <block order="3" correct="no">
        <cline>      if (album.song == a) {  </cline>
      </block>
      <block order="9" correct="no">
        <cline>      if (Song[i] == a) {  </cline>
      </block>
      <block order="10">
        <cline>         return i;</cline>
      </block>
      <block order="11" correct="no">
        <cline>         return true;  </cline>
      </block>
      <block order="17">
        <cline>      }</cline>
      </block>
      <block order="15">
        <cline>   }</cline>
      </block>
      <block order="13">
        <cline>   return -1;</cline>
      </block>
      <block order="14" correct="no">
        <cline>   return false;  </cline>
      </block>
      <block order="2">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_12_5" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>What's the most popular Song within an Album? Let's write
            the Album member function mostLikedSong, which prints out
            the information of the most liked Song in the format <q>The most
            liked song is title by artist with numLikes likes.</q> Put the necessary
            blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>void Album::mostLikedSong() {</cline>
      </block>
      <block order="8" correct="no">
        <cline>int Album::mostLikedSong() {  </cline>
      </block>
      <block order="2" correct="no">
        <cline>void Album::mostLikedSong(const Song&amp; a) {  </cline>
      </block>
      <block order="18">
        <cline>   int maxIndex = 0;</cline>
      </block>
      <block order="1">
        <cline>   int maxLikes = 0;</cline>
      </block>
      <block order="16">
        <cline><![CDATA[   for (size_t i = 0; i < songs.size(); ++i) {]]></cline>
      </block>
      <block order="15" correct="no">
        <cline><![CDATA[   for (size_t i = 0; i < album.size(); ++i) {  ]]></cline>
      </block>
      <block order="9">
        <cline>      if (songs[i].numLikes &gt; maxLikes) {</cline>
      </block>
      <block order="11">
        <cline>         maxIndex = i;</cline>
      </block>
      <block order="5">
        <cline>         maxLikes = songs[i].numLikes;</cline>
      </block>
      <block order="17" correct="no">
        <cline>         i = maxLikes;  </cline>
      </block>
      <block order="4" correct="no">
        <cline>         maxLikes = numLikes;  </cline>
      </block>
      <block order="10">
        <cline>      }</cline>
      </block>
      <block order="13">
        <cline>   }</cline>
      </block>
      <block order="12">
        <cline><![CDATA[   cout << "The most liked song is " << songs[maxIndex].title;]]></cline>
      </block>
      <block order="14">
        <cline><![CDATA[   cout << " by " << songs[maxIndex].artist << " with ";]]></cline>
      </block>
      <block order="6">
        <cline><![CDATA[   cout << songs[maxIndex].numLikes << " likes." << endl;]]></cline>
      </block>
      <block order="3">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_12_6" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Let's write the struct definition for Product. Product should have
            instance variables name and price. Put the necessary
            blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>struct Product {</cline>
      </block>
      <block order="3" correct="no">
        <cline>struct product {  </cline>
      </block>
      <block order="5">
        <cline>   string name;</cline>
      </block>
      <block order="7">
        <cline>   double price;</cline>
      </block>
      <block order="4" correct="no">
        <cline>   int price;  </cline>
      </block>
      <block order="1">
        <cline>};</cline>
      </block>
      <block order="6" correct="no">
        <cline>}  </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_12_7" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Let's make a shopping list! Write the struct definition for
            List, which should have instance variables type and
            a vector of Products. Put the necessary
            blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>struct List {</cline>
      </block>
      <block order="1" correct="no">
        <cline>Struct List {  </cline>
      </block>
      <block order="7">
        <cline>   string type;</cline>
      </block>
      <block order="8" correct="no">
        <cline>   Product type;  </cline>
      </block>
      <block order="4">
        <cline>   vector&lt;Product&gt; products;</cline>
      </block>
      <block order="3" correct="no">
        <cline>   vector&lt;&gt; Product;  </cline>
      </block>
      <block order="5">
        <cline>};</cline>
      </block>
      <block order="2" correct="no">
        <cline>}  </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_12_8" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Two Products are equal if the name and price of the Products are equal.
            Write the function productEqual, which takes two Products as parameters
            and returns true if they are equal. What if we want to check to see if
            we have bananas in our shopping list? Write the List member function
            searchList, which takes a Product as a parameter and returns the location
            of the Product in the List. Return -1 if it's not in the List. Put the necessary
            blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>bool productEqual(const Product&amp; a, const &amp;Product b) {</cline>
      </block>
      <block order="16" correct="no">
        <cline>bool productEqual (Product const &amp;a, Product const &amp;b) {  </cline>
      </block>
      <block order="13" correct="no">
        <cline>   if (a.name == b.name) {  </cline>
      </block>
      <block order="9">
        <cline>   if (a.name == b.name &amp;&amp; a.price == b.price) {</cline>
      </block>
      <block order="7">
        <cline>      return true;</cline>
      </block>
      <block order="2">
        <cline>   }</cline>
      </block>
      <block order="18">
        <cline>   else {</cline>
      </block>
      <block order="10">
        <cline>      return false;</cline>
      </block>
      <block order="3">
        <cline>   }</cline>
      </block>
      <block order="17">
        <cline>}</cline>
      </block>
      <block order="22">
        <cline>int List::searchList(const Product&amp; a) {</cline>
      </block>
      <block order="8" correct="no">
        <cline>int searchList(const Product&amp; a) {  </cline>
      </block>
      <block order="21">
        <cline><![CDATA[   for (size_t i = 0; i < products.size(); ++i) {]]></cline>
      </block>
      <block order="6" correct="no">
        <cline><![CDATA[   for (size_t i = 0; i < numProducts; ++i) {  ]]></cline>
      </block>
      <block order="14">
        <cline>      if (productEqual (products[i], a)) {</cline>
      </block>
      <block order="1" correct="no">
        <cline>      if (album.song == a) {  </cline>
      </block>
      <block order="5">
        <cline>         return i;</cline>
      </block>
      <block order="12">
        <cline>      }</cline>
      </block>
      <block order="20">
        <cline>   }</cline>
      </block>
      <block order="11">
        <cline>   return -1;</cline>
      </block>
      <block order="19" correct="no">
        <cline>   return 1;  </cline>
      </block>
      <block order="15">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_12_9" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Time to checkout! Write the List member function totalPrice
            which calculates and returns the total price of all the Products.
            Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="11">
        <cline>double List::totalPrice() {</cline>
      </block>
      <block order="13" correct="no">
        <cline>double List : totalPrice() {  </cline>
      </block>
      <block order="7" correct="no">
        <cline>int totalPrice() {  </cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>   double total = 0;</cline>
        </choice>
        <choice>
          <cline>   double total;  </cline>
        </choice>
      </block>
      <block order="8">
        <cline><![CDATA[   for (size_t i = 0; i < products.size(); ++i) {]]></cline>
      </block>
      <block order="6" correct="no">
        <cline><![CDATA[   for (double i = 0; i < products.size(); ++i) {  ]]></cline>
      </block>
      <block order="12" correct="no">
        <cline>   for (size_t i = 0; i &gt; products.size(); ++i) {  </cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>      total += products[i].price;</cline>
        </choice>
        <choice>
          <cline>      total += products.price;  </cline>
        </choice>
      </block>
      <block order="10">
        <cline>   }</cline>
      </block>
      <block order="2">
        <cline>   return total;</cline>
      </block>
      <block order="3">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_12_10" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Oops! We made a mistake and grabbed pineapple pizza.
            What if we want to remove an Product from our List?
            Write the List member function removeProduct, which takes
            an index as a parameter and removes it. Then it fills
            the gap with the last product in the List. Put the necessary
            blocks of code in the correct order.</p>
    </statement>
    <blocks/>
  </exercise>
</section>
