<?xml version="1.0"?>
<exercises xml:id="chapter12_coding-practice">
  <title>Coding Practice</title>
  <exercise label="cp_12_1">
    <statement>
      <p>A pixel is the smallest controllable element of a picture represented on the screen. Images
        are comprised of numerous individual pixels, and each pixel's color sample has three
        numerical RGB (red, green, blue) components to represent the color of that pixel. The
        intensity value of each RGB component ranges from 0 to 255, where 0 is no intensity and 255
        is highest intensity. Write the <c>struct</c> definition for <c>Pixel</c>, which has values for each
        component r, g, and b.</p>
    </statement>
    <program interactive="activecode"
             line-numbers="yes"
             xml:id="cp_12_AC_1q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

// Write your code for the struct Pixel here.
        ]]></code>
    </program>
    <solution>
      <p>Below is one way to implement the program. We declare the Pixel struct and create
        the instance variables in order.</p>
      <program xml:id="cp_12_AC_1a_editor"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
};
        ]]></code></program>
    </solution>
  </exercise>


  <exercise label="cp_12_AC_2_q">
    <statement>
      <p>An image is just a matrix of pixels. Write the <c>struct</c> definition for <c>Image</c>, which should
        store information about its height and width and contain a matrix of <c>Pixel</c>s. Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_12_AC_2q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
};

// Write your code for the struct Image here.
        </code>
    </program>
    <hint>
      <activity label="cp_12_AC_2_pp">
        <statement>
          <p>An image is just a matrix of pixels. Write the <c>struct</c> definition for <c>Image</c>, which
            should store information about its height and width and contain a matrix of <c>Pixel</c>s.
            Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="2">
            <cline>struct Image {</cline>
          </block>
          <block order="6">
            <cline>    int height;</cline>
          </block>
          <block order="3">
            <cline>    int width;</cline>
          </block>
          <block order="5">
            <cline>    vector&lt;vector&lt;Pixel&gt;&gt; matrix;</cline>
          </block>
          <block order="7"
                 correct="no">
            <cline>    vector&lt;Pixel&gt; matrix; </cline>
          </block>
          <block order="1"
                 correct="no">
            <cline>    vector&lt;vector&gt; matrix; </cline>
          </block>
          <block order="4">
            <cline>};</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>


  <exercise label="cp_12_AC_3">
    <statement>
      <p>Let's print out a <c>Pixel</c>! Write the <c>Pixel</c> member function <c>printPixel</c>, which prints out the
        values of the <c>Pixel</c> in this form: (r, g, b).</p>
    </statement>
    <program interactive="activecode"
             line-numbers="yes"
             xml:id="cp_12_AC_3q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

// Write your implementation of printPixel here.

int main() {
    Pixel p = {0, 0, 0};
    p.printPixel();
}
        ]]></code>
    </program>
    <solution>
      <p>Below is one way to implement the program. We use the scope resolution operator
        to make printPixel a Pixel member function.</p>
      <program xml:id="cp_12_AC_3a_editor"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

void Pixel::printPixel() {
    cout << "("<< r << ", " << g << ", " << b << ")";
}

int main() {
    Pixel p = {0, 0, 0};
    p.printPixel();
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cp_12_AC_4_q">
    <statement>
      <p>Now let&#8217;s print an <c>Image</c>. Unfortunately we can&#8217;t print out the actual image
        to the terminal, but we can print out the <c>Pixel</c>s in the <c>Image</c> matrix. Write the <c>Image</c>
        member function <c>printImage</c>. Separate pixels in the same row with a space and add a new line at
        the end of each row. Use the <c>printPixel</c> function we created previously. Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_12_AC_4q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt;&gt; matrix;
    void printImage();
};

// Write your implementation of printImage here.

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 0, 255, 255 }, { 0, 0, 0 }, { 255, 255, 255 } },
                                    { { 30, 60, 50 }, { 20, 135, 200 }, { 60, 80, 125 } } };
    Image image = { 2, 3, matrix };
    image.printImage();
}
        </code>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}
</tests>

    </program>
    <hint>
      <activity label="cp_12_AC_4_pp">
        <statement>
          <p>Now let&#8217;s print an <c>Image</c>. Unfortunately we can&#8217;t print out the actual
            image to the terminal, but we can print out the <c>Pixel</c>s in the <c>Image</c> matrix. Write
            the <c>Image</c> member function <c>printImage</c>. Separate pixels in the same row with a space and
            add a new line at the end of each row. Use the <c>printPixel</c> function we created previously.
            Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="8">
            <cline>void Image::printImage() {</cline>
          </block>
          <block order="9">
            <cline>    for (int r = 0; r &lt; height; ++r) {</cline>
          </block>
          <block order="6">
            <cline>    for (int c = 0; c &lt; width; ++ c) {</cline>
          </block>
          <block order="4">
            <cline>        matrix[r][c].printPixel();</cline>
          </block>
          <block order="3">
            <cline>        cout &lt;&lt; " ";</cline>
          </block>
          <block order="2">
            <cline>    }</cline>
          </block>
          <block order="1">
            <cline>    cout &lt;&lt; endl;</cline>
          </block>
          <block order="7">
            <cline>    }</cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>


  <exercise label="cp_12_AC_5">
    <statement>
      <p>Somebody photobombed our image! What if we wanted to crop the photobomber out? Let's write
        the <c>Image</c> member function <c>cropImage</c>, which takes four paramenters, a start and stop row and
        a start and stop column. It then modifies the matrix to the cropped matrix.</p>
    </statement>
    <program interactive="activecode"
             line-numbers="yes"
             xml:id="cp_12_AC_5q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector<vector<Pixel> > matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
};

// Write your implementation of cropImage here.

int main() {
    vector<vector<Pixel> > matrix = { { { 0, 255, 255 }, { 0, 0, 0 }, { 255, 255, 255 } },
                                      { { 30, 60, 50 }, { 20, 135, 200 }, { 60, 80, 125 } },
                                      { { 10, 0, 50 }, { 30, 65, 225 }, { 25, 105, 125 } },
                                      { { 255, 60, 0 }, { 20, 25, 255 }, { 65, 55, 0 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout << endl;
    image.cropImage(2, 3, 1, 2);
    image.printImage();
}
        ]]></code>
      <tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}
</tests>
    </program>
    <solution>
      <p>Below is one way to implement the program. First we make a new matrix with the
        correct amount of rows. Then we push back the pixels we want into the new matrix.
        Afterwards, we must update the height and width of the Image and set the Image's
        matrix
        equal to the new one we created. </p>
      <program xml:id="cp_12_AC_5a_editor"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector<vector<Pixel> > matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
};

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector<vector<Pixel> > newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r < stopRow; ++r) {
        for (int c = startCol - 1; c < stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

int main() {
    vector<vector<Pixel> > matrix = { { { 0, 255, 255 }, { 0, 0, 0 }, { 255, 255, 255 } },
                                      { { 30, 60, 50 }, { 20, 135, 200 }, { 60, 80, 125 } },
                                      { { 10, 0, 50 }, { 30, 65, 225 }, { 25, 105, 125 } },
                                      { { 255, 60, 0 }, { 20, 25, 255 }, { 65, 55, 0 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout << endl;
    image.cropImage(2, 3, 1, 2);
    image.printImage();
}
        ]]></code>
        </program>
    </solution>
  </exercise>

  <exercise label="cp_12_AC_6_q">
    <statement>
      <p>Let&#8217;s write a <c>swapPixel</c> member function for <c>Image</c>. <c>swapPixel</c> takes two pairs of row
        indices and column indices from a matrix and swaps the two <c>Pixel</c>s at those locations. Note
        that these indices are 0-indexed, unlike the previous <c>cropIndex</c> parameters. Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_12_AC_6q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
};

// Write your implementation of swapPixel here.

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 0, 140, 255 }, { 0, 0, 0 }, { 15, 20, 255 } } };
    Image image = { 1, 3, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    image.swapPixel(0, 0, 0, 2);
    image.printImage();
}
        </code>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}
</tests>

    </program>
    <hint>
      <activity label="cp_12_AC_6_pp">
        <statement>
          <p>Let&#8217;s write a <c>swapPixel</c> member function for <c>Image</c>. <c>swapPixel</c> takes two pairs of row
            indices and column indices from a matrix and swaps the two <c>Pixel</c>s at those locations.
            Note that these indices are 0-indexed, unlike the previous <c>cropIndex</c> parameters. Use the
            lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="5">
            <cline>void Image::swapPixel(int row1, int col1, int row2, int col2) {</cline>
          </block>
          <block order="3">
            <cline>    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };</cline>
          </block>
          <block order="1">
            <cline>    matrix[row1][col1] = matrix[row2][col2];</cline>
          </block>
          <block order="4">
            <cline>    matrix[row2][col2] = temp;</cline>
          </block>
          <block order="2">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>


  <exercise label="cp_12_AC_7">
    <statement>
      <p>When you take a selfie on your phone, the image is mirrored. We can do the same to an image
        by flipping it horizontally. Write the <c>Image</c> member function <c>flipHorizontal</c>, which flips an image
        horizontally. Use the <c>swapPixel</c> function we created previously.</p>
    </statement>
    <program interactive="activecode"
             line-numbers="yes"
             xml:id="cp_12_AC_7q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector<vector<Pixel> > matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
};

// Write your implementation of flipHorizontal here.

int main() {
    vector<vector<Pixel> > matrix = { { { 0, 0, 0 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 50, 50, 50 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 100, 100, 100 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 150, 150, 150 }, { 10, 10, 10 }, { 255, 255, 255 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout << endl;
    image.flipHorizontal();
    image.printImage();
}
        ]]></code>
      <tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}
</tests>
    </program>
    <solution>
      <p> Below is one way to implement the program. We loop through each row in the
        matrix. We create start and end indices and repeatedly swap pixels, moving both
        indices
        toward the middle. Once they meet in the middle, we have finished flipping the
        image.</p>
      <program xml:id="cp_12_AC_7a_editor"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector<vector<Pixel> > matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
};

void Image::flipHorizontal() {
    for (int r = 0; r < height; ++r) {
        int start = 0;
        int end = width - 1;
        while (start < end) {
            swapPixel(r, start, r, end);
            ++start;
            --end;
        }
    }
}

int main() {
    vector<vector<Pixel> > matrix = { { { 0, 0, 0 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 50, 50, 50 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 100, 100, 100 }, { 10, 10, 10 }, { 255, 255, 255 } },
                                      { { 150, 150, 150 }, { 10, 10, 10 }, { 255, 255, 255 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout << endl;
    image.flipHorizontal();
    image.printImage();
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cp_12_AC_8_q">
    <statement>
      <p>Oops! Somehow our image came out upside down. Let&#8217;s write the <c>Image</c> member function <c>flipVertical</c>,
        which reverts an image to be right side up. Check the hint below for help with the
        construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_12_AC_8q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
    void flipVertical();
};

// Write your implementation of flipVertical here.

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 255, 255, 255 }, { 255, 255, 255 }, { 255, 255, 255 } },
                                    { { 50, 50, 50 }, { 10, 10, 10 }, { 50, 50, 50 } },
                                    { { 30, 30, 30 }, { 70, 70, 70 }, { 30, 30, 30 } },
                                    { { 0, 0, 0 }, { 0, 0, 0 }, { 0, 0, 0 } } };
    Image image = { 4, 3, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    image.flipVertical();
    image.printImage();
}
        </code>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}

void Image::flipHorizontal() {
    for (int r = 0; r &lt; height; ++r) {
        int start = 0;
        int end = width - 1;
        while (start &lt; end) {
            swapPixel(r, start, r, end);
            ++start;
            --end;
        }
    }
}
</tests>

    </program>
    <hint>
      <activity label="cp_12_AC_8_pp">
        <statement>
          <p>Oops! Somehow our image came out upside down. Let&#8217;s write the <c>Image</c> member
            function <c>flipVertical</c>, which reverts an image to be right side up. Use the lines to construct
            the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="3">
            <cline>void Image::flipVertical() {</cline>
            <cline>    for (int c = 0; c &lt; width; ++c) {</cline>
          </block>
          <block order="5">
            <cline>        int start = 0;</cline>
          </block>
          <block order="6">
            <cline>        int end = height - 1;</cline>
          </block>
          <block order="10">
            <cline>        while (start &lt; end) {</cline>
          </block>
          <block order="7">
            <cline>            swapPixel(start, c, end, c);</cline>
          </block>
          <block order="1">
            <cline>            ++start;</cline>
          </block>
          <block order="8">
            <cline>            --end;</cline>
          </block>
          <block order="4">
            <cline>        }</cline>
          </block>
          <block order="9">
            <cline>    }</cline>
          </block>
          <block order="2">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_12_AC_9">
    <statement>
      <p>Let's write the <c>Image</c> member function called <c>createBorder</c>, which sets the <c>Pixel</c>s on the edge
        of an <c>Image</c> to a given <c>Pixel</c>.</p>
    </statement>
    <program interactive="activecode"
             line-numbers="yes"
             xml:id="cp_12_AC_9q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector<vector<Pixel> > matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
    void flipVertical();
    void createBorder(Pixel p);
};

// Write your implementation of createBorder here.

int main() {
    vector<vector<Pixel> > matrix = { { { 25, 65, 23 }, { 73, 56, 24 }, { 255, 255, 255 }, { 253, 61, 56 } },
                                      { { 50, 50, 50 }, { 145, 52, 102 }, { 2, 0, 25 }, { 52, 47, 35 } },
                                      { { 45, 34, 100 }, { 213, 67, 45 }, { 2, 45, 255 }, { 34, 16, 76 } },
                                      { { 2, 2, 78 }, { 164, 16, 23 }, { 5, 255, 25 }, { 32, 65, 34 } },
                                      { { 150, 150, 150 }, { 241, 42, 64 }, { 1, 4, 255 }, { 16, 73, 84 } } };
    Image image = { 5, 4, matrix };
    image.printImage();
    cout << endl;
    Pixel p = { 0, 0, 0 };
    image.createBorder(p);
    image.printImage();
}
        ]]></code>
      <tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}

void Image::flipHorizontal() {
    for (int r = 0; r &lt; height; ++r) {
        int start = 0;
        int end = width - 1;
        while (start &lt; end) {
            swapPixel(r, start, r, end);
            ++start;
            --end;
        }
    }
}

void Image::flipVertical() {
    for (int c = 0; c &lt; width; ++c) {
        int start = 0;
        int end = height - 1;
        while (start &lt; end) {
            swapPixel(start, c, end, c);
            ++start;
            --end;
        }
    }
}
</tests>
    </program>
    <solution>
      <p>Below is one way to implement the program. We set the first and last row and
        first and last column of Pixels in the Image to the given Pixel.</p>
      <program xml:id="cp_12_AC_9a_editor"
               line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector<vector<Pixel> > matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
    void flipVertical();
    void createBorder(Pixel p);
};

void Image::createBorder(Pixel p) {
    for (int r = 0; r < height; ++r) {
        matrix[r][0] = p;
        matrix[r][width - 1] = p;
    }
    for (int c = 0; c < width; ++c) {
        matrix[0][c] = p;
        matrix[height - 1][c] = p;
    }
}

int main() {
    vector<vector<Pixel> > matrix = { { { 25, 65, 23 }, { 73, 56, 24 }, { 255, 255, 255 }, { 253, 61, 56 } },
                                      { { 50, 50, 50 }, { 145, 52, 102 }, { 2, 0, 25 }, { 52, 47, 35 } },
                                      { { 45, 34, 100 }, { 213, 67, 45 }, { 2, 45, 255 }, { 34, 16, 76 } },
                                      { { 2, 2, 78 }, { 164, 16, 23 }, { 5, 255, 25 }, { 32, 65, 34 } },
                                      { { 150, 150, 150 }, { 241, 42, 64 }, { 1, 4, 255 }, { 16, 73, 84 } } };
    Image image = { 5, 4, matrix };
    image.printImage();
    cout << endl;
    Pixel p = { 0, 0, 0 };
    image.createBorder(p);
    image.printImage();
}
        ]]></code></program>
    </solution>
  </exercise>

  <exercise label="cp_12_AC_10_q">
    <statement>
      <p>Let&#8217;s return our image to the state of a clean slate. Write the function <c>clearImage</c>,
        which sets the color of every <c>Pixel</c> to white. Check the hint below for help with the
        construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_12_AC_10q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Pixel {
    int r;
    int g;
    int b;
    void printPixel();
};

struct Image {
    int height;
    int width;
    vector&lt;vector&lt;Pixel&gt; &gt; matrix;
    void printImage();
    void cropImage(int startRow, int stopRow, int startCol, int stopCol);
    void swapPixel(int row1, int col1, int row2, int col2);
    void flipHorizontal();
    void flipVertical();
    void createBorder(Pixel p);
    void clearImage();
};

// Write your implementation of clearImage here.

int main() {
    vector&lt;vector&lt;Pixel&gt; &gt; matrix = { { { 0, 0, 0 }, { 10, 10, 10 }, { 65, 70, 255 } },
                                    { { 26, 48, 205 }, { 43, 12, 15 }, { 45, 30, 70 } },
                                    { { 89, 36, 65 }, { 75, 43, 26 }, { 40, 75, 70 } } };
    Image image = { 3, 3, matrix };
    image.printImage();
    cout &lt;&lt; endl;
    image.clearImage();
    image.printImage();
}
        </code>
<tests>
void Pixel::printPixel() {
    cout &lt;&lt; "("&lt;&lt; r &lt;&lt; ", " &lt;&lt; g &lt;&lt; ", " &lt;&lt; b &lt;&lt; ")";
}

void Image::printImage() {
    for (int r = 0; r &lt; height; ++r) {
    for (int c = 0; c &lt; width; ++ c) {
        matrix[r][c].printPixel();
        cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    }
}

void Image::cropImage(int startRow, int stopRow, int startCol, int stopCol) {
    vector&lt;vector&lt;Pixel&gt; &gt; newMatrix(stopRow - startRow + 1);
    for (int r = startRow - 1; r &lt; stopRow; ++r) {
        for (int c = startCol - 1; c &lt; stopCol; ++c) {
            newMatrix[r - (startRow - 1)].push_back(matrix[r][c]);
        }
    }
    height = stopRow - startRow + 1;
    width = stopCol - startCol + 1;
    matrix = newMatrix;
}

void Image::swapPixel(int row1, int col1, int row2, int col2) {
    Pixel temp = { matrix[row1][col1].r, matrix[row1][col1].g,  matrix[row1][col1].b };
    matrix[row1][col1] = matrix[row2][col2];
    matrix[row2][col2] = temp;
}

void Image::flipHorizontal() {
    for (int r = 0; r &lt; height; ++r) {
        int start = 0;
        int end = width - 1;
        while (start &lt; end) {
            swapPixel(r, start, r, end);
            ++start;
            --end;
        }
    }
}

void Image::flipVertical() {
    for (int c = 0; c &lt; width; ++c) {
        int start = 0;
        int end = height - 1;
        while (start &lt; end) {
            swapPixel(start, c, end, c);
            ++start;
            --end;
        }
    }
}

void Image::createBorder(Pixel p) {
    for (int r = 0; r &lt; height; ++r) {
        matrix[r][0] = p;
        matrix[r][width - 1] = p;
    }
    for (int c = 0; c &lt; width; ++c) {
        matrix[0][c] = p;
        matrix[height - 1][c] = p;
    }
}
</tests>

    </program>
    <hint>
      <activity label="cp_12_AC_10_pp">
        <statement>
          <p>Let&#8217;s return our image to the state of a clean slate. Write the function <c>clearImage</c>,
            which sets the color of every <c>Pixel</c> to white. Use the lines to construct the code,
            then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="1">
            <cline>void Image::clearImage () {</cline>
          </block>
          <block order="5">
            <cline>    for (int r = 0; r &lt; height; r++) {</cline>
          </block>
          <block order="2">
            <cline>        for (int c = 0; c &lt; width; c++) {</cline>
          </block>
          <block order="7">
            <cline>            matrix[r][c].r = 255;</cline>
          </block>
          <block order="8">
            <cline>            matrix[r][c].g = 255;</cline>
          </block>
          <block order="3">
            <cline>            matrix[r][c].b = 255;</cline>
          </block>
          <block order="6">
            <cline>        }</cline>
          </block>
          <block order="4">
            <cline>    }</cline>
          </block>
          <block order="9">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

</exercises>