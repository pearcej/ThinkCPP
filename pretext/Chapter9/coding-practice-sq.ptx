<?xml version="1.0"?>
<section xml:id="chapter9_coding-practice-1">
  <title>Coding Practice</title>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_9_AC_2q">
        <statement>
          <p>Write the function <c>printCakeInfo</c>, which prints the cake's information in the format
                    <q>This is a <c>color</c>, <c>diameter</c> inch diameter cake with/without icing.</q> If <c>name</c> does not
                    have the value <q>n/a</q>, <c>printCakeInfo</c> prints out <q>Happy birthday <c>name</c>! Your cake is <c>color</c>,
                    has a <c>diameter</c> inch diameter, and comes with/without icing.</q> Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_9_AC_2q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

struct Cake {
    string name;
    string color;
    double diameter;
    bool has_icing;
};

// Write your code for the printCakeInfo function here.

int main() {
    Cake c1 = { "n/a", "red", 12.5, true };
    printCakeInfo(c1);
    Cake c2 = { "Tom", "white", 10, false };
    printCakeInfo(c2);
}
        ]]></code>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_9_AC_2q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Write the function <c>printCakeInfo</c>, which prints the cake's information in the format
                    <q>This is a <c>color</c>, <c>diameter</c> inch diameter cake with/without icing.</q> If <c>name</c> does not
                    have the value <q>n/a</q>, <c>printCakeInfo</c> prints out <q>Happy birthday <c>name</c>! Your cake is <c>color</c>,
                    has a <c>diameter</c> inch diameter, and comes with/without icing.</q> Use the lines to construct the code,
                    then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="7">
            <choice correct="yes">
              <cline>void printCakeInfo(Cake c) {</cline>
            </choice>
            <choice>
              <cline>string printCakeInfo(Cake c) { </cline>
            </choice>
          </block>
          <block order="1">
            <cline>    if (c.name == "n/a") {</cline>
          </block>
          <block order="4">
            <cline>        if (c.has_icing) {</cline>
            <cline><![CDATA[            cout << "This is a " << c.color << "," << c.diameter << " inch diameter cake with icing." << endl;]]></cline>
            <cline>        }</cline>
          </block>
          <block order="9">
            <cline>        else {</cline>
            <cline><![CDATA[            cout << "This is a " << c.color << "," << c.diameter << " inch diameter cake without icing." << endl;]]></cline>
            <cline>        }</cline>
          </block>
          <block order="3">
            <cline>    }</cline>
          </block>
          <block order="10">
            <cline>    else {</cline>
          </block>
          <block order="2">
            <cline>        if (c.has_icing) {</cline>
            <cline><![CDATA[            cout << "Happy birthday " << c.name << "! Your cake is " << c.color << ", has a " << c.diameter << " inch diameter, and comes with icing." << endl;]]></cline>
            <cline>        }</cline>
          </block>
          <block order="5">
            <cline>        else {</cline>
            <cline><![CDATA[            cout << "Happy birthday " << c.name << "! Your cake is " << c.color << ", has a " << c.diameter << " inch diameter, and comes without icing." << endl;]]></cline>
            <cline>        }</cline>
          </block>
          <block order="8">
            <cline>    }</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_9_AC_4q">
        <statement>
          <p>Write the function <c>changeCakeDiameter</c>, which takes a <c>Cake</c> and a <c>double</c> as a parameter.
                    <c>changeCakeDiameter</c> then multiplies the original diameter by the double and modifies the cake
                    to have this new diameter. Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_9_AC_4q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

struct Cake {
    string name;
    string color;
    double diameter;
    bool has_icing;
};

void printCakeInfo(Cake c);
Cake makeCake();

// Write your code for the changeCakeDiameter function here.

int main() {
    Cake original = { "John", "green", 8.5, true };
    changeCakeDiameter(original, 2);
    printCakeInfo(original);
}
        ]]></code>
          <tests>
void printCakeInfo(Cake c) {
    if (c.name == "n/a") {
        if (c.has_icing) {
            cout &lt;&lt; "This is a " &lt;&lt; c.color &lt;&lt; "," &lt;&lt; c.diameter &lt;&lt; " inch diameter cake with icing." &lt;&lt; endl;
        }
        else {
            cout &lt;&lt; "This is a " &lt;&lt; c.color &lt;&lt; "," &lt;&lt; c.diameter &lt;&lt; " inch diameter cake without icing." &lt;&lt; endl;
        }
    }
    else {
        if (c.has_icing) {
            cout &lt;&lt; "Happy birthday " &lt;&lt; c.name &lt;&lt; "! Your cake is " &lt;&lt; c.color &lt;&lt; ", has a " &lt;&lt; c.diameter &lt;&lt; " inch diameter, and comes with icing." &lt;&lt; endl;
        }
        else {
            cout &lt;&lt; "Happy birthday " &lt;&lt; c.name &lt;&lt; "! Your cake is " &lt;&lt; c.color &lt;&lt; ", has a " &lt;&lt; c.diameter &lt;&lt; " inch diameter, and comes without icing." &lt;&lt; endl;
        }
    }
}

Cake makeCake() {
    Cake input;
    string name, color;
    double diameter;
    char icing;
    cout &lt;&lt; "Name: ";
    cin &gt;&gt; name;
    input.name = name;
    cout &lt;&lt; "Color: ";
    cin &gt;&gt; color;
    input.color = color;
    cout &lt;&lt; "Diameter: ";
    cin &gt;&gt; diameter;
    input.diameter = diameter;
    cout &lt;&lt; "Icing? (y/n) ";
    cin &gt;&gt; icing;
    if (icing == 'y') {
        input.has_icing = true;
    }
    else {
        input.has_icing = false;
    }
    return input;
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_9_AC_4q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Write the function <c>changeCakeDiameter</c>, which takes a <c>Cake</c> and a <c>double</c> as a parameter.
                    <c>changeCakeDiameter</c> then multiplies the original diameter by the double and modifies the cake
                    to have this new diameter. Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="1">
            <choice correct="yes">
              <cline>void changeCakeDiameter(Cake &amp;c, double scale) {</cline>
            </choice>
            <choice>
              <cline>void changeCakeDiameter(Cake c, double scale) { </cline>
            </choice>
          </block>
          <block order="3">
            <cline>string changeCakeDiameter(Cake c, double scale) { </cline>
          </block>
          <block order="5">
            <cline>    c.diameter *= scale;</cline>
          </block>
          <block order="4" correct="no">
            <cline>    c.diameter; </cline>
          </block>
          <block order="7" correct="no">
            <cline>    c.diameter = c.diameter * 2; </cline>
          </block>
          <block order="6">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_9_AC_6q">
        <statement>
          <p>Write the struct <c>Shirt</c>, which has the instance variables color and size.
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_9_AC_6q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

// Write your code for the struct Shirt here.

int main() {
    Shirt t = { "blue", 'L' };
}
        ]]></code>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_9_AC_6q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Write the struct <c>Shirt</c>, which has the instance variables color and size.
                    Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="4">
            <cline>struct Shirt {</cline>
          </block>
          <block order="3">
            <cline>    string color;</cline>
          </block>
          <block order="5">
            <cline>    char size;</cline>
          </block>
          <block order="2" correct="no">
            <cline>    string size; </cline>
          </block>
          <block order="6">
            <cline>};</cline>
          </block>
          <block order="1" correct="no">
            <cline>} </cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_9_AC_8q">
        <statement>
          <p>Write the struct <c>Outfit</c>, which is a nested structure that has a <c>Shirt</c>, <c>Pants</c>, and has_hat.
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_9_AC_8q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

struct Pants {
    char size;
    string material;
};

struct Shirt {
    string color;
    char size;
};
// Write your code for the struct Outfit here.

int main() {
    Shirt t = { "blue", 'L' };
    Pants p = { 'S', "denim" };
    Outfit o = { t, p, true };
}
        ]]></code>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_9_AC_8q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Write the struct <c>Outfit</c>, which is a nested structure that has a <c>Shirt</c>, <c>Pants</c>, and has_hat.
                    Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="4">
            <cline>struct Outfit {</cline>
          </block>
          <block order="1">
            <cline>    Shirt s;</cline>
          </block>
          <block order="2">
            <cline>    Pants p;</cline>
          </block>
          <block order="3">
            <cline>    bool has_hat;</cline>
          </block>
          <block order="6" correct="no">
            <cline>    int has_hat; </cline>
          </block>
          <block order="5">
            <cline>};</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_9_AC_10q">
        <statement>
          <p>Write the <c>changeShirts</c> and <c>changePants</c> functions, which both take an <c>Outfit</c> as a parameter. <c>changeShirts</c> also
                    takes a <c>Shirt</c> as a parameter and <c>changePants</c> also takes a <c>Pants</c> as a parameter. Each function modifies the <c>Outfit</c>
                    and changes the shirt or pants to the new input. Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_9_AC_10q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

void printOutfit(Outfit o);

struct Shirt {
    string color;
    char size;
};

struct Pants {
    char size;
    string material;
};

struct Outfit {
    Shirt s;
    Pants p;
    bool has_hat;
};

// Write your code for the changeShirts function here.

// Write your code for the changePants function here.

int main() {
    Shirt t = { "blue", 'L' };
    Pants p = { 'S', "denim" };
    Outfit o = { t, p, true };
    printOutfit(o);
    Shirt newShirt = { "red", 'M' };
    Pants newPants = { 'M', "khakis" };
    changeShirts(o, newShirt);
    changePants(o, newPants);
    printOutfit(o);
}
        ]]></code>
          <tests>
void printOutfit(Outfit o) {
    cout &lt;&lt; "Shirt: " &lt;&lt; o.s.color &lt;&lt; " and " &lt;&lt; o.s.size &lt;&lt; "; Pants: " &lt;&lt; o.p.size &lt;&lt; " and " &lt;&lt; o.p.material &lt;&lt; "; ";
    if (o.has_hat) {
        cout &lt;&lt; "has hat" &lt;&lt; endl;
    }
    else {
        cout &lt;&lt; "does not have hat" &lt;&lt; endl;
    }
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_9_AC_10q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Write the <c>changeShirts</c> and <c>changePants</c> functions, which both take an <c>Outfit</c> as a parameter. <c>changeShirts</c> also
                    takes a <c>Shirt</c> as a parameter and <c>changePants</c> also takes a <c>Pants</c> as a parameter. Each function modifies the <c>Outfit</c>
                    and changes the shirt or pants to the new input. Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="2">
            <cline>// changeShirts function</cline>
            <cline>void changeShirts(Outfit &amp;outfit, Shirt shirt) {</cline>
          </block>
          <block order="6">
            <cline>    outfit.s = shirt;</cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
          <block order="1">
            <cline>// changePants function</cline>
            <cline>void changePants(Outfit &amp;outfit, Pants p) {</cline>
          </block>
          <block order="4">
            <cline>    outfit.p = pants;</cline>
          </block>
          <block order="3">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
</section>
