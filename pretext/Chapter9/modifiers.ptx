<?xml version="1.0"?>
<section xml:id="chapter9_modifiers">
  <title>Modifiers</title>
  <p>Of course, sometimes you <em>want</em> to modify one of the arguments.
            Functions that do are called modifiers.</p>
  <p>As an example of a modifier, consider <c>increment</c>, which adds a given
            number of seconds to a <c>Time</c> object. Again, a rough draft of this
            function looks like:</p>
  <program>void increment (Time&amp; time, double secs) {
  time.second += secs;

  if (time.second &gt;= 60.0) {
    time.second -= 60.0;
    time.minute += 1;
  }
  if (time.minute &gt;= 60) {
    time.minute -= 60;
    time.hour += 1;
  }
}</program>
  <p>The first line performs the basic operation; the remainder deals with
            the special cases we saw before.</p>
  <p>Is this function correct? What happens if the argument <c>secs</c> is much
            greater than 60? In that case, it is not enough to subtract 60 once; we
            have to keep doing it until <c>second</c> is below 60. We can do that by
            replacing the <c>if</c> statements with <c>while</c> statements:</p>
  <listing label="modifiers_AC_1">
    <caption>
      This active code uses the <c>increment</c> function. Run the active code to
            see what the output is!
    </caption>
    <program xml:id="modifiers_AC_1_editor" interactive="activecode" line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

struct Time {
    int hour, minute;
    double second;
};

void printTime(Time& t) {
    cout << t.hour << ":" << t.minute << ":" << t.second << endl;
}

void increment (Time& time, double secs) {
    time.second += secs;
    while (time.second >= 60.0) {
        time.second -= 60.0;
        time.minute += 1;
    }
    while (time.minute >= 60) {
        time.minute -= 60;
        time.hour += 1;
    }
}

int main() {
    Time currentTime = { 9, 14, 30.0 };
    increment(currentTime, 60.0);
    printTime(currentTime);
}
        ]]></code>
    </program>
  </listing>
  <exercise label="modifiers_AC_2">
    <statement>
      <p>The solution above is correct, but not very efficient. Can you think of a
            solution that does not require iteration? Try writing a more efficient version
            of <c>increment</c> in the commented section of this active code. If you get stuck,
            you can reveal the extra problem at the end for help.</p>
    </statement>
    <program xml:id="modifiers_AC_2_editor" interactive="activecode" line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

struct Time {
    int hour, minute;
    double second;
};

void printTime(Time& t) {
    cout << t.hour << ":" << t.minute << ":" << t.second << endl;
}

void increment (Time& time, double secs) {
    // Write your implementation here.
}

int main() {
    Time t1 = { 9, 14, 30.0 };
    increment(t1, 60.0);
    // Should output "9:15:30"
    printTime(t1);

    Time t2 = { 9, 59, 45.0 };
    increment(t2, 120.0);
    // Should output "10:1:45"
    printTime(t2);
}
        ]]></code>
    </program>
  </exercise>
  <exercises line="109" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Problem&quot;', 'subchapter': 'modifiers', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': '9_6_1', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/f/Programming/Runestone2PreTeXt/book/_sources/Chapter9/modifiers.rst">
    <exercise label="modifiers_1" numbered="yes" adaptive="yes" indentation="hide">
      <statement>
        <p>Let's write the code for the <c>increment</c> function. <c>increment</c>
                adds a number of seconds to a <c>Time</c> object and updates the values
                of the object.</p>
      </statement>
      <blocks>
        <block order="4">
          <choice correct="yes">
            <cline>void increment (Time&amp; time, double secs) {</cline>
          </choice>
          <choice>
            <cline>void increment(const Time&amp; time, double secs) {                         </cline>
          </choice>
        </block>
        <block order="7">
          <choice correct="yes">
            <cline>   int mins = (time.second + secs) / 60;</cline>
          </choice>
          <choice>
            <cline>   int mins = (time.second + secs) % 60;                        </cline>
          </choice>
        </block>
        <block order="11">
          <choice correct="yes">
            <cline>   time.second = time.second + secs - 60 * mins;</cline>
          </choice>
          <choice>
            <cline>   time.second = time.second + secs;                        </cline>
          </choice>
        </block>
        <block order="5">
          <choice correct="yes">
            <cline>   int hours = (time.minute + mins) / 60;</cline>
          </choice>
          <choice>
            <cline>   int hours = (time.second + second) / 60;                        </cline>
          </choice>
        </block>
        <block order="8">
          <choice correct="yes">
            <cline>   time.minute = time.minute + mins - 60 * hours;</cline>
          </choice>
          <choice>
            <cline>   time.second = time.minute + mins - 60 * hours;                        </cline>
          </choice>
        </block>
        <block order="2">
          <cline>   time.hour += hours;</cline>
          <cline>}</cline>
        </block>
      </blocks>
    </exercise>
  </exercises>
</section>
