<?xml version="1.0"?>
<section xml:id="chapter9_fill-in-functions">
  <title>Fill-in functions</title>
  <p>Occasionally you will see functions like <c>addTime</c> written with a different interface (different
    arguments and return values). Instead of creating a new object every time <c>addTime</c> is called, we
    could require the caller to provide an <q>empty</q> object where <c>addTime</c> can store the result.
    Compare the following with the previous version:</p>
  <program>void addTimeFill(const Time&amp; t1, const Time&amp; t2, Time&amp; sum) {
  sum.hour = t1.hour + t2.hour;
  sum.minute = t1.minute + t2.minute;
  sum.second = t1.second + t2.second;

  if (sum.second &gt;= 60.0) {
    sum.second -= 60.0;
    sum.minute += 1;
  }
  if (sum.minute &gt;= 60) {
    sum.minute -= 60;
    sum.hour += 1;
  }
}</program>
  <p>One advantage of this approach is that the caller has the option of
    reusing the same object repeatedly to perform a series of additions.
    This can be slightly more efficient, although it can be confusing enough
    to cause subtle errors. For the vast majority of programming, it is
    worth a spending a little run time to avoid a lot of debugging time.</p>
  <listing label="fillin_functions_AC_1">
    <caption>
      This active code uses the fill-in version of the <c>addTime</c> function. Feel free to modify the
        code!
    </caption>
    <program xml:id="fillin_functions_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

struct Time {
    int hour, minute;
    double second;
};

void printTime(Time& t) {
    cout << t.hour << ":" << t.minute << ":" << t.second << endl;
}

void addTimeFill(const Time& t1, const Time& t2, Time& sum) {
    sum.hour = t1.hour + t2.hour;
    sum.minute = t1.minute + t2.minute;
    sum.second = t1.second + t2.second;

    if (sum.second >= 60.0) {
        sum.second -= 60.0;
        sum.minute += 1;
    }
    if (sum.minute >= 60) {
        sum.minute -= 60;
        sum.hour += 1;
    }
}

int main() {
    Time currentTime = { 5, 45, 30.0 };
    Time bakingTime = {0, 55, 0.0 };
    Time finishedTime; // We'll store the sum in this variable
    addTimeFill (currentTime, bakingTime, finishedTime);
    cout << "The bread will be ready at ";
    printTime(finishedTime);
}
        ]]></code>
    </program>
  </listing>
  <exercise label="fillin_functions_1">
    <statement>
      <p>Which parameter is not declared as a <c>const</c>?</p>
      <program line-numbers="yes">
        <code>
void addTimeFill(const Time&amp; t1, const Time&amp; t2, Time&amp; sum) {
  sum.hour = t1.hour + t2.hour;
  sum.minute = t1.minute + t2.minute;
  sum.second = t1.second + t2.second;

  if (sum.second &gt;= 60.0) {
    sum.second -= 60.0;
    sum.minute += 1;
  }
  if (sum.minute &gt;= 60) {
    sum.minute -= 60;
    sum.hour += 1;
  }
}
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Time&amp; t1</p>
        </statement>
        <feedback>
          <p>Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Time&amp; t2</p>
        </statement>
        <feedback>
          <p>Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Time&amp; sum</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>