<?xml version="1.0"?>
<section xml:id="chapter9_activecode-exercises">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to
            assess what you have learned in this chapter.</p>
  <exercise label="XXX">
    <statement>
      <p>Let's write the code for the struct definition of <c>Movie</c>.
                    The Movie structure will have the instance variables title,
                    director, and releaseYear in that order.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_9_1_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to define the Movie struct.

    
    <program xml:id="mucp_9_1_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Movie {
    string title;
    string director;
    int releaseYear;
};
        ]]></code></program>

            

<exercise label="mucp_9_1_ac_a"><statement><p>Below is one way to define the <c>Movie</c> struct.</p></statement><program xml:id="mucp_9_1_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Movie {
    string title;
    string director;
    int releaseYear;
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the code for the <c>printMovie</c> function.
                    printMovie should print the information about a movie
                    in the following format: <q>title</q> directed by director (releaseYear).</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_9_2_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the printMovie function.

    
    <program xml:id="mucp_9_2_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Movie {
    string title;
    string director;
    int releaseYear;
};

void printMovie(const Movie& m) {
    cout << "\"" << m.title << "\" directed by ";
    cout << m.director << " (" << m.releaseYear << ")" << endl;
}
        ]]></code></program>

            

<exercise label="mucp_9_2_ac_a"><statement><p>Below is one way to write the <c>printMovie</c> function.</p></statement><program xml:id="mucp_9_2_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Movie {
    string title;
    string director;
    int releaseYear;
};

void printMovie(const Movie& m) {
    cout << "\"" << m.title << "\" directed by ";
    cout << m.director << " (" << m.releaseYear << ")" << endl;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the code for the <c>movieAge</c> function.
                    movieAge should take a Movie and currentYear as a parameter and
                    return how many years it has been since the releaseYear.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_9_3_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the movieAge function.

    
    <program xml:id="mucp_9_3_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Movie {
    string title;
    string director;
    int releaseYear;
};

int movieAge(const Movie& m, int currentYear) {
    return currentYear - m.releaseYear;
}
        ]]></code></program>

            

<exercise label="mucp_9_3_ac_a"><statement><p>Below is one way to write the <c>movieAge</c> function.</p></statement><program xml:id="mucp_9_3_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Movie {
    string title;
    string director;
    int releaseYear;
};

int movieAge(const Movie& m, int currentYear) {
    return currentYear - m.releaseYear;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the code for the struct definition of <c>Date</c>.
                    The Date structure will have three integer instance variables: day,
                    month, and year in that order.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_9_4_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to define the Date structure.

    
    <program xml:id="mucp_9_4_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Date {
    int day;
    int month;
    int year;
};
        ]]></code></program>

            

<exercise label="mucp_9_4_ac_a"><statement><p>Below is one way to define the <c>Date</c> structure.</p></statement><program xml:id="mucp_9_4_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Date {
    int day;
    int month;
    int year;
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the code for the <c>printDate</c> function.
                    printDate should print the date in the following format:
                    month/date/year.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_9_5_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the printDate function.

    
    <program xml:id="mucp_9_5_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Date {
    int day;
    int month;
    int year;
};

void printDate(const Date& d) {
    cout << d.month << "/" << d.day << "/" << d.year << endl;
}
        ]]></code></program>

            

<exercise label="mucp_9_5_ac_a"><statement><p>Below is one way to write the <c>printDate</c> function.</p></statement><program xml:id="mucp_9_5_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Date {
    int day;
    int month;
    int year;
};

void printDate(const Date& d) {
    cout << d.month << "/" << d.day << "/" << d.year << endl;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the code for the <c>nextMonth</c> function.
                    nextMonth should change the date to one month later.
                    For example, 3/4/2020 gets modified to 4/4/2020, and 12/3/2020
                    gets modified to 1/3/2021.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_9_6_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the nextMonth function.

    
    <program xml:id="mucp_9_6_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Date {
    int day;
    int month;
    int year;
};

void nextMonth (Date& d) {
    if (d.month == 12) {
        d.month = 1;
        d.year++;
        d.year = 1;
    }
    else {
        d.month++;
    }
}
        ]]></code></program>

            

<exercise label="mucp_9_6_ac_a"><statement><p>Below is one way to write the nextMonth function.</p></statement><program xml:id="mucp_9_6_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Date {
    int day;
    int month;
    int year;
};

void nextMonth (Date& d) {
    if (d.month == 12) {
        d.month = 1;
        d.year++;
        d.year = 1;
    }
    else {
        d.month++;
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the code for the struct definition of <c>Length</c>.
                    Length should have the instance variables inches, feet, and yard.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_9_7_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to defiine the Length structure.

    
    <program xml:id="mucp_9_7_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Length {
    int inches;
    int feet;
    int yards;
};
        ]]></code></program>

            

<exercise label="mucp_9_7_ac_a"><statement><p>Below is one way to defiine the <c>Length</c> structure.</p></statement><program xml:id="mucp_9_7_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Length {
    int inches;
    int feet;
    int yards;
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the code for the <c>printLength</c> function.
                    printLength should print the date in the following format:
                    yards yds, feet ft, inches in.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_9_8_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the printLength function.

    
    <program xml:id="mucp_9_8_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Length {
    int inches;
    int feet;
    int yards;
};

void printLength(const Length& l) {
    cout << l.yards << " yds, " << l.feet << " feet, " << l.inches << " in" << endl;
}
        ]]></code></program>

            

<exercise label="mucp_9_8_ac_a"><statement><p>Below is one way to write the <c>printLength</c> function.</p></statement><program xml:id="mucp_9_8_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Length {
    int inches;
    int feet;
    int yards;
};

void printLength(const Length& l) {
    cout << l.yards << " yds, " << l.feet << " feet, " << l.inches << " in" << endl;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the code for the <c>allInches</c> function.
                    printLength should modify a Length object to convert all
                    feet and yards to inches. For example, a Length with 1 yard, 2 feet, and 3
                    inches is converted into a Length with 0 yards, 0 feet, and 63 inches.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_9_9_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the allInches function.

    
    <program xml:id="mucp_9_9_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Length {
    int inches;
    int feet;
    int yards;
};

void allInches (Length& l) {
    l.inches += 36 * l.yards + 12 * l.feet;
}
        ]]></code></program>

            

<exercise label="mucp_9_9_ac_a"><statement><p>Below is one way to write the <c>allInches</c> function.</p></statement><program xml:id="mucp_9_9_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Length {
    int inches;
    int feet;
    int yards;
};

void allInches (Length& l) {
    l.inches += 36 * l.yards + 12 * l.feet;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's write the code for the <c>addLengths</c> function.
                    addLengths should take three Lengths as parameters.
                    It should then add the first two Lengths and store the result
                    in the third Length. If there is over 12 inches or over 3 feet,
                    convert it to the proper amound of feet and yards (13 inches becomes 1 foot and 1 inch).</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_9_10_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the addLengths function.

    
    <program xml:id="mucp_9_10_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Length {
    int inches;
    int feet;
    int yards;
};

void addLengths(const Length& first, const Length& second, Length& total) {
    total.inches = first.inches + second.inches;
    total.feet = first.feet + second.feet;
    total.yards = first.yards + second.yards;
    if (total.inches >= 12) {
        int addFeet = total.inches % 12;
        total.feet += addFeet;
        total.inches = total.inches - addFeet * 12;
    }
    if (total.feet >= 3) {
        int addYards = total.feet % 3;
        total.yards += addYards;
        total.feet = total.feet - addYards * 3;
    }
}
        ]]></code></program>

            

<exercise label="mucp_9_10_ac_a"><statement><p>Below is one way to write the <c>addLengths</c> function.</p></statement><program xml:id="mucp_9_10_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

struct Length {
    int inches;
    int feet;
    int yards;
};

void addLengths(const Length& first, const Length& second, Length& total) {
    total.inches = first.inches + second.inches;
    total.feet = first.feet + second.feet;
    total.yards = first.yards + second.yards;
    if (total.inches >= 12) {
        int addFeet = total.inches % 12;
        total.feet += addFeet;
        total.inches = total.inches - addFeet * 12;
    }
    if (total.feet >= 3) {
        int addYards = total.feet % 3;
        total.yards += addYards;
        total.feet = total.feet - addYards * 3;
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
</section>
