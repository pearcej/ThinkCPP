<?xml version="1.0"?>
<section xml:id="chapter9_incremental-development-versus-planning">
  <title>Incremental development versus planning</title>
  <p>In this chapter I have demonstrated an approach to program development I refer to as <term>rapid
    prototyping with iterative improvement</term>. In each case, I wrote a rough draft (or
    prototype) that performed the basic calculation, and then tested it on a few cases, correcting
    flaws as I found them.</p>
  <p>Although this approach can be effective, it can lead to code that is
    unnecessarily complicated&#x2014;since it deals with many special cases&#x2014;and
    unreliable&#x2014;since it is hard to know if you have found all the errors.</p>
  <p>An alternative is high-level planning, in which a little insight into the problem can make the
    programming much easier. In this case the insight is that a <c>Time</c> is really a three-digit
    number in base 60! The <c>second</c> is the <q>ones column,</q> the <c>minute</c> is the <q>60's
      column</q>, and the <c>hour</c> is the <q>3600's column.</q></p>
  <p>When we wrote <c>addTime</c> and <c>increment</c>, we were effectively doing addition in base 60, which is why
    we had to <q>carry</q> from one column to the next.</p>
  <p>Thus an alternate approach to the whole problem is to convert <c>Time</c>s into <c>double</c>s and take
    advantage of the fact that the computer already knows how to do arithmetic with <c>double</c>s. Here
    is a function that converts a <c>Time</c> into a <c>double</c>:</p>
  <program>double convertToSeconds(const Time&amp; t) {
  int minutes = t.hour * 60 + t.minute;
  double seconds = minutes * 60 + t.second;
  return seconds;
}</program>
  <p>Now all we need is a way to convert from a <c>double</c> to a <c>Time</c> object:</p>
  <program>Time makeTime(double secs) {
  Time time;
  time.hour = int(secs / 3600.0);
  secs -= time.hour * 3600.0;
  time.minute = int(secs / 60.0);
  secs -= time.minute * 60;
  time.second = secs;
  return time;
}</program>
  <p>You might have to think a bit to convince yourself that the technique I am using to convert
    from one base to another is correct. Assuming you are convinced, we can use these functions to
    rewrite <c>addTime</c>:</p>
  <program>Time addTime(const Time&amp; t1, const Time&amp; t2) {
  double seconds = convertToSeconds(t1) + convertToSeconds(t2);
  return makeTime(seconds);
}</program>
  <listing label="incremental_development_AC_1">
    <caption>
      This active code uses the <c>convertToSeconds</c> and <c>makeTime</c> functions.
    </caption>
    <program xml:id="incremental_development_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

struct Time {
    int hour, minute;
    double second;
};

void printTime(Time& t) {
    cout << t.hour << ":" << t.minute << ":" << t.second << endl;
}

double convertToSeconds(const Time& t) {
    int minutes = t.hour * 60 + t.minute;
    double seconds = minutes * 60 + t.second;
    return seconds;
}

Time makeTime(double secs) {
    Time time;
    time.hour = int(secs / 3600.0);
    secs -= time.hour * 3600.0;
    time.minute = int(secs / 60.0);
    secs -= time.minute * 60;
    time.second = secs;
    return time;
}

Time addTime(const Time& t1, const Time& t2) {
    double seconds = convertToSeconds(t1) + convertToSeconds(t2);
    return makeTime(seconds);
}

int main() {
    Time currentTime = { 9, 14, 30.0 };
    Time otherTime = { 10, 32, 15.2 };
    Time doneTime = addTime(currentTime, otherTime);
    printTime(doneTime);
}
        ]]></code>
    </program>
  </listing>
  <p>This is much shorter than the original version, and it is much easier to demonstrate that it is
    correct (assuming, as usual, that the functions it calls are correct). As an exercise, rewrite <c>increment</c>
    the same way.</p>
  <listing label="incremental_development_AC_2">
    <caption>
      Write your implementation of <c>increment</c> in the commented area of the active code below. If you
        get stuck, you can reveal the extra problem at the end for help.
    </caption>
    <program xml:id="incremental_development_AC_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

struct Time {
    int hour, minute;
    double second;
};

void printTime(Time& t) {
    cout << t.hour << ":" << t.minute << ":" << t.second << endl;
}

double convertToSeconds(const Time& t) {
    int minutes = t.hour * 60 + t.minute;
    double seconds = minutes * 60 + t.second;
    return seconds;
}

Time makeTime(double secs) {
    Time time;
    time.hour = int(secs / 3600.0);
    secs -= time.hour * 3600.0;
    time.minute = int(secs / 60.0);
    secs -= time.minute * 60;
    time.second = secs;
    return time;
}

Time addTime(const Time& t1, const Time& t2) {
    double seconds = convertToSeconds(t1) + convertToSeconds(t2);
    return makeTime(seconds);
}

void increment (Time& time, double secs) {
    // This version of ``increment`` should use ``convertToSeconds``
    // and ``makeTime``. Write your implementation here.
}

int main() {
    Time t1 = { 9, 14, 30.0 };
    increment(t1, 60.0);
    // Should output "9:15:30"
    printTime(t1);

    Time t2 = { 9, 59, 45.0 };
    increment(t2, 120.0);
    // Should output "10:1:45"
    printTime(t2);
}
        ]]></code>
    </program>
  </listing>
  <exercises line="174"
             runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Problem&quot;', 'subchapter': 'incremental_development', 'chapter': 'Chapter9', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'divid': '9_9_1', 'instructoronly': '', 'is_dynamic': 'True'}"
             source="/mnt/f/Programming/Runestone2PreTeXt/book/_sources/Chapter9/incremental_development.rst">
    <exercise label="incremental_development_1"
              numbered="yes"
              adaptive="yes"
              indentation="hide">
      <statement>
        <p>Let's write the code for the updated version of the <c>increment</c> function. <c>increment</c> adds a
          number of seconds to a <c>Time</c> object and updates the values of the object. This version
          should use <c>convertToSeconds</c> and <c>makeTime</c>.</p>
      </statement>
      <blocks>
        <block order="2">
          <choice correct="yes">
            <cline>void increment (Time&amp; time, double secs) {</cline>
          </choice>
          <choice>
            <cline>Time increment (Time&amp; time, double secs) {                         </cline>
          </choice>
        </block>
        <block order="6">
          <choice correct="yes">
            <cline>   double seconds = convertToSeconds(time) + secs;</cline>
          </choice>
          <choice>
            <cline>   double seconds = convertToSeconds(time);                        </cline>
          </choice>
        </block>
        <block order="3">
          <choice correct="yes">
            <cline>   time = makeTime(seconds);</cline>
            <cline>}</cline>
          </choice>
          <choice>
            <cline>   return makeTime(seconds)                        </cline>
            <cline>}</cline>
          </choice>
        </block>
      </blocks>
    </exercise>
  </exercises>
</section>