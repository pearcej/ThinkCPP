<?xml version="1.0"?>
<section xml:id="chapter9_const-parameters">
  <title><c>const</c> parameters</title>
  <p>You might have noticed that the parameters for <c>after</c> and <c>addTime</c> are being passed by
    reference. Since these are pure functions, they do not modify the parameters they receive, so I
    could just as well have passed them by value.</p>
  <p>The advantage of passing by value is that the calling function and the
    callee are appropriately encapsulated&#x2014;it is not possible for a change in
    one to affect the other, except by affecting the return value.</p>
  <p>On the other hand, passing by reference usually is more efficient, because it avoids copying
    the argument. Furthermore, there is a nice feature in C++, called <c>const</c>, that can make
    reference parameters just as safe as value parameters.</p>
  <p>If you are writing a function and you do not intend to modify a parameter, you can declare that
    it is a <term>constant reference
      parameter</term>. The syntax looks like this:</p>
  <program>void printTime(const Time&amp; time) ...
Time addTime(const Time&amp; t1, const Time&amp; t2) ...</program>
  <p>I've included only the first line of the functions. If you tell the
    compiler that you don't intend to change a parameter, it can help remind
    you. If you try to change one, you should get a compiler error, or at
    least a warning.</p>
  <exercise label="const_parameters_1">
    <statement>
      <p>Match the action to a benefit of its use.</p>
    </statement>
    <feedback>
      <p>Try again.</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>passing by value</premise>
        <response>the calling function and the callee are appropriately encapsulated&#x2014;it is
          not possible for a change in one to affect the other, except by affecting the return
          value.</response>
      </match>
      <match order="2">
        <premise>passing by reference</premise>
        <response>more efficient, because it avoids copying the argument</response>
      </match>
    </matches>
  </exercise>
  <exercise label="const_parameters_2">
    <statement>
      <p>Which statement does NOT describe the <c>const</c> as a parameter feature in C++?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Makes reference parameters just as safe as value parameters.</p>
        </statement>
        <feedback>
          <p>This is true.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Can be used when you intend to modify a parameter.</p>
        </statement>
        <feedback>
          <p>It is used when you are writing a function and you do not intend to modify a parameter.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The syntax can look like this: void printTime(const Time&amp; time)...</p>
        </statement>
        <feedback>
          <p>This is true</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>