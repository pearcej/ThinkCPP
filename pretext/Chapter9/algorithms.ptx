<?xml version="1.0"?>
<section xml:id="chapter9_algorithms">
  <title>Algorithms</title>
  <p>When you write a general solution for a class of problems, as opposed to
            a specific solution to a single problem, you have written an
            <term>algorithm</term>. I mentioned this word in Chapter 1, but did not define it
            carefully. It is not easy to define, so I will try a couple of
            approaches.</p>
  <p>First, consider something that is not an algorithm. When you learned to
            multiply single-digit numbers, you probably memorized the multiplication
            table. In effect, you memorized 100 specific solutions. That kind of
            knowledge is not really algorithmic.</p>
  <p>But if you were <q>lazy,</q> you probably cheated by learning a few tricks.
            For example, to find the product of <m>n</m> and 9, you can write
            <m>n-1</m> as the first digit and <m>10-n</m> as the second digit.
            This trick is a general solution for multiplying any single-digit number
            by 9. That's an algorithm!</p>
  <p>Similarly, the techniques you learned for addition with carrying,
            subtraction with borrowing, and long division are all algorithms. One of
            the characteristics of algorithms is that they do not require any
            intelligence to carry out. They are mechanical processes in which each
            step follows from the last according to a simple set of rules.</p>
  <p>In my opinion, it is embarrassing that humans spend so much time in
            school learning to execute algorithms that, quite literally, require no
            intelligence.</p>
  <p>On the other hand, the process of designing algorithms is interesting,
            intellectually challenging, and a central part of what we call
            programming.</p>
  <p>Some of the things that people do naturally, without difficulty or
            conscious thought, are the most difficult to express algorithmically.
            Understanding natural language is a good example. We all do it, but so
            far no one has been able to explain <em>how</em> we do it, at least not in the
            form of an algorithm.</p>
  <p>Later in this book, you will have the opportunity to design simple
            algorithms for a variety of problems. If you take the next class in the
            Computer Science sequence, Data Structures, you will see some of the
            most interesting, clever, and useful algorithms computer science has
            produced.</p>
  <exercise label="algorithms_1">
    <statement>
      <p>When you write a general solution for a class of problems, as opposed to a specific solution to a single problem, you have written an ____. <var/>  </p>
    </statement>
    <setup>
      <var case="insensitive">
        <condition string="^\s*algorithm\s*$">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Try again!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
</section>
