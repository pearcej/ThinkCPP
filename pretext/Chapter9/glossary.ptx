<?xml version="1.0"?>
<section xml:id="chapter9_glossary">
  <title>Glossary</title>
  <dl>
    <li>
      <title>instance:</title>
      <p>An example from a category. My cat is an instance of the category <q>feline things.</q>
        Every object is an instance of some type.</p>
    </li>
    <li>
      <title>instance variable:</title>
      <p>One of the named data items that make up an structure. Each structure
        has its own copy of the instance variables for its type.</p>
    </li>
    <li>
      <title>constant reference parameter:</title>
      <p>A parameter that is passed by reference but that cannot be modified.</p>
    </li>
    <li>
      <title>pure function:</title>
      <p>A function whose result depends only on its parameters, and that has
        so effects other than returning a value.</p>
    </li>
    <li>
      <title>functional programming style:</title>
      <p>A style of program design in which the majority of functions are
        pure.</p>
    </li>
    <li>
      <title>modifier:</title>
      <p>A function that changes one or more of the objects it receives as parameters, and usually
        returns <c>void</c>.</p>
    </li>
    <li>
      <title>fill-in function:</title>
      <p>A function that takes an <q>empty</q> object as a parameter and fills in its instance
        variables instead of generating a return value.</p>
    </li>
    <li>
      <title>algorithm:</title>
      <p>A set of instructions for solving a class of problems by a
        mechanical, unintelligent process.</p>
    </li>
  </dl>
  <exercise label="chapter_nine_glossary_one">
    <statement>
      <p>Match the definition to the term.</p>
    </statement>
    <feedback>
      <p>Try again!</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>instance</premise>
        <response>An example from a category. My cat is an instance of the category <q>feline
          things.</q> Every object is an instance of some type.</response>
      </match>
      <match order="2">
        <premise>instance variable</premise>
        <response>One of the named data items that make up an structure. Each structure has its own
          copy of the instance variables for its type.</response>
      </match>
      <match order="3">
        <premise>constant reference parameter</premise>
        <response>A parameter that is passed by reference but that cannot be modified.</response>
      </match>
      <match order="4">
        <premise>pure function</premise>
        <response>A function whose result depends only on its parameters, and that has so effects
          other than returning a value.</response>
      </match>
    </matches>
  </exercise>
  <exercise label="chapter_nine_glossary_two">
    <statement>
      <p>Match the definition to the term.</p>
    </statement>
    <feedback>
      <p>Try again!</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>functional programming style</premise>
        <response>A style of program design in which the majority of functions are pure.</response>
      </match>
      <match order="2">
        <premise>modifier</premise>
        <response>A function that changes one or more of the objects it receives as parameters, and
          usually returns void.</response>
      </match>
      <match order="3">
        <premise>fill-in function</premise>
        <response>A function that takes an <q>empty</q> object as a parameter and fills it its
          instance variables instead of generating a return value.</response>
      </match>
      <match order="4">
        <premise>algorithm</premise>
        <response>A set of instructions for solving a class of problems by a mechanical,
          unintelligent process.</response>
      </match>
    </matches>
  </exercise>
</section>