<?xml version="1.0"?>
<section xml:id="chapter9_mixed-up-code-practice">
  <title>Mixed Up Code Practice</title>
  <exercise label="mucp_9_1" numbered="yes" adaptive="yes" indentation="show">
    <statement>
      <p>Let's write the code for the struct definition of Movie.
            The Movie structure will have the instance variables title,
            director, and releaseYear in that order.
            Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>struct Movie {</cline>
      </block>
      <block order="4" correct="no">
        <cline>struct movie {  </cline>
      </block>
      <block order="7" correct="no">
        <cline>struct Movie (  </cline>
      </block>
      <block order="11">
        <cline>   string title;</cline>
      </block>
      <block order="2">
        <cline>   string director;</cline>
      </block>
      <block order="5">
        <cline>   int releaseYear;</cline>
      </block>
      <block order="9" correct="no">
        <cline>   string releaseYear;  </cline>
      </block>
      <block order="6" correct="no">
        <cline>   char title;  </cline>
      </block>
      <block order="8">
        <cline>};</cline>
      </block>
      <block order="1" correct="no">
        <cline>} </cline>
      </block>
      <block order="10" correct="no">
        <cline>) </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_9_2" numbered="yes" adaptive="yes" indentation="show">
    <statement>
      <p>Let's write the code for the printMovie function.
            printMovie should print the information about a movie
            in the following format: <q>title</q> directed by director (releaseYear).
            Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="9">
        <choice correct="yes">
          <cline>void printMovie(const Movie&amp; m) {</cline>
        </choice>
        <choice>
          <cline>void printMovie (&amp;Movie m const) {  </cline>
        </choice>
      </block>
      <block order="5">
        <cline>Movie printMovie (Movie m) {  </cline>
      </block>
      <block order="1">
        <cline><![CDATA[   cout << "\"" << m.title << "\" directed by ";]]></cline>
      </block>
      <block order="6">
        <cline><![CDATA[   cout << m.director << " (" << m.releaseYear << ")" << endl;]]></cline>
      </block>
      <block order="4" correct="no">
        <cline><![CDATA[   cout << title << director << releaseYear;  ]]></cline>
      </block>
      <block order="2" correct="no">
        <cline><![CDATA[   cout << "\"" << title << "\" directed by ";  ]]></cline>
      </block>
      <block order="8" correct="no">
        <cline><![CDATA[   cout << """ << m.title << "" directed by ";  ]]></cline>
      </block>
      <block order="10" correct="no">
        <cline><![CDATA[   cout << director << " (" << releaseYear << ")" << endl;  ]]></cline>
      </block>
      <block order="7">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_9_3" numbered="yes" adaptive="yes" indentation="show">
    <statement>
      <p>Let's write the code for the movieAge function.
            movieAge should take a Movie and currentYear as a parameter and
            return how many years it has been since the releaseYear.
            Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>int movieAge(const Movie&amp; m, int currentYear) {</cline>
      </block>
      <block order="5" correct="no">
        <cline>void movieAge(const Movie&amp; m, int currentYear) {  </cline>
      </block>
      <block order="6">
        <cline>   return currentYear - m.releaseYear;</cline>
      </block>
      <block order="1" correct="no">
        <cline>   return currentYear - releaseYear;  </cline>
      </block>
      <block order="2" correct="no">
        <cline>   return m.releaseYear - currentYear;  ;</cline>
      </block>
      <block order="3">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_9_4" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Let's write the code for the struct definition of Date.
            The Date structure will have three integer instance variables: day,
            month, and year in that order.
            Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="9">
        <cline>struct Date {</cline>
      </block>
      <block order="12" correct="no">
        <cline>struct date {  </cline>
      </block>
      <block order="8" correct="no">
        <cline>struct Date (  </cline>
      </block>
      <block order="2">
        <cline>   int day;</cline>
      </block>
      <block order="3">
        <cline>   int month;</cline>
      </block>
      <block order="7">
        <cline>   int year;</cline>
      </block>
      <block order="1" correct="no">
        <cline>   string day;  </cline>
      </block>
      <block order="5" correct="no">
        <cline>   string month;  </cline>
      </block>
      <block order="6" correct="no">
        <cline>   string year;  </cline>
      </block>
      <block order="4">
        <cline>};</cline>
      </block>
      <block order="10" correct="no">
        <cline>} </cline>
      </block>
      <block order="11" correct="no">
        <cline>) </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_9_5" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Let's write the code for the printDate function.
            printDate should print the date in the following format:
            month/date/year.
            Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="6">
        <choice correct="yes">
          <cline>void printDate(const Date&amp; d) {</cline>
        </choice>
        <choice>
          <cline>void printDate (&amp;Date d) {  </cline>
        </choice>
      </block>
      <block order="2">
        <cline>Date printDate (Date d) {  </cline>
      </block>
      <block order="4">
        <cline><![CDATA[   cout << d.month << "/" << d.day << "/" << d.year << endl;]]></cline>
      </block>
      <block order="5" correct="no">
        <cline><![CDATA[   cout << month << "/" << day << "/" << year << endl;  ]]></cline>
      </block>
      <block order="3" correct="no">
        <cline><![CDATA[   cout << d.day << "/" << d.month << "/" << d.year << endl;  ]]></cline>
      </block>
      <block order="7">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_9_6" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Let's write the code for the nextMonth function.
            nextMonth should change the date to one month later.
            For example, 3/4/2020 gets modified to 4/4/2020, and 12/3/2020
            gets modified to 1/3/2021.
            Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="7">
        <choice correct="yes">
          <cline>void nextMonth (Date&amp; d) {</cline>
        </choice>
        <choice>
          <cline>void nextMonth(const Date d) {  </cline>
        </choice>
      </block>
      <block order="6">
        <cline>Date nextMonth (Date&amp; d) {  </cline>
      </block>
      <block order="11">
        <cline>   if (d.month == 12) {</cline>
      </block>
      <block order="14" correct="no">
        <cline>   if (d.month = 12) {  </cline>
      </block>
      <block order="5" correct="no">
        <cline>   if (d.month == 1) {  </cline>
      </block>
      <block order="2">
        <cline>      d.month = 1;</cline>
      </block>
      <block order="3">
        <cline>      d.year++;</cline>
      </block>
      <block order="10">
        <cline>      d.year = 1;</cline>
      </block>
      <block order="9">
        <cline>   }</cline>
      </block>
      <block order="13">
        <cline>   else {</cline>
      </block>
      <block order="1">
        <cline>      d.month++;</cline>
      </block>
      <block order="4">
        <cline>   }</cline>
      </block>
      <block order="8">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_9_7" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Let's write the code for the struct definition of Length.
            Length should have the instance variables inches, feet, and yard.
            Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="12">
        <cline>struct Length {</cline>
      </block>
      <block order="8" correct="no">
        <cline>struct length {  </cline>
      </block>
      <block order="4" correct="no">
        <cline>struct Length (  </cline>
      </block>
      <block order="11">
        <cline>   int inches;</cline>
      </block>
      <block order="3">
        <cline>   int feet;</cline>
      </block>
      <block order="5">
        <cline>   int yards;</cline>
      </block>
      <block order="6" correct="no">
        <cline>   double inches;  </cline>
      </block>
      <block order="7" correct="no">
        <cline>   string feet;  </cline>
      </block>
      <block order="9" correct="no">
        <cline>   double yards;  </cline>
      </block>
      <block order="1">
        <cline>};</cline>
      </block>
      <block order="10" correct="no">
        <cline>} </cline>
      </block>
      <block order="2" correct="no">
        <cline>) </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_9_8" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Let's write the code for the printLength function.
            printLength should print the date in the following format:
            yards yds, feet ft, inches in.
            Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="3">
        <choice correct="yes">
          <cline>void printLength(const Length&amp; l) {</cline>
        </choice>
        <choice>
          <cline>void printLength(length l) {  </cline>
        </choice>
      </block>
      <block order="6">
        <cline>string printLength(Length l) {  </cline>
      </block>
      <block order="7">
        <cline><![CDATA[   cout << l.yards << " yds, " << l.feet << " feet, " << l.inches << " in" endl;]]></cline>
      </block>
      <block order="5" correct="no">
        <cline><![CDATA[   cout << yards << " yds, " << feet << " feet, " << inches << " in" endl;  ]]></cline>
      </block>
      <block order="2" correct="no">
        <cline><![CDATA[   cout << l.inches << " in, " << l.feet << " feet, " << l.yards << " yds" endl;  ]]></cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_9_9" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Let's write the code for the allInches function.
            printLength should modify a Length object to convert all
            feet and yards to inches. For example, a Length with 1 yard, 2 feet, and 3
            inches is converted into a Length with 0 yards, 0 feet, and 63 inches.
            Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="3">
        <choice correct="yes">
          <cline>void allInches (Length&amp; l) {</cline>
        </choice>
        <choice>
          <cline>void allInches(const length l) {  </cline>
        </choice>
      </block>
      <block order="1">
        <cline>Length allInches(Length l const) {  </cline>
      </block>
      <block order="4">
        <cline>   l.inches += 36 * l.yards + 12 * l.feet;</cline>
      </block>
      <block order="2" correct="no">
        <cline>   l.inches = 36 * l.yards + 12 * l.feet;  </cline>
      </block>
      <block order="6" correct="no">
        <cline>   int feetToInches = 12 * l.feet;  </cline>
      </block>
      <block order="5" correct="no">
        <cline>   double yardToInches = 36 * yards;  </cline>
      </block>
      <block order="8">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_9_10" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Let's write the code for the addLengths function.
            addLengths should take three Lengths as parameters.
            It should then add the first two Lengths and store the result
            in the third Length. If there is over 12 inches or over 3 feet,
            convert it to the proper amound of feet and yards (13 inches becomes 1 foot and 1 inch).
            Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="10">
        <choice correct="yes">
          <cline>void addLengths(const Length&amp; first, const Length&amp; second, Length&amp; total) {</cline>
        </choice>
        <choice>
          <cline>void addLengths (Length&amp; first, Length&amp; second, const Length&amp; total) {  </cline>
        </choice>
      </block>
      <block order="15">
        <choice correct="yes">
          <cline>void addLengths(Length first, Length second, Length total) {  </cline>
        </choice>
        <choice>
          <cline>Length addLengths (Length&amp; first, Length&amp; second, Length&amp; total) {  </cline>
        </choice>
      </block>
      <block order="3">
        <cline>   total.inches = first.inches + second.inches;</cline>
      </block>
      <block order="8">
        <cline>   total.feet = first.feet + second.feet;</cline>
      </block>
      <block order="5">
        <cline>   total.yards = first.yards + second.yards;</cline>
      </block>
      <block order="12">
        <cline>   if (total.inches &gt;= 12) {</cline>
      </block>
      <block order="6">
        <cline>      int addFeet = total.inches % 12;</cline>
      </block>
      <block order="11">
        <cline>      total.feet += addFeet;</cline>
      </block>
      <block order="7">
        <cline>      total.inches = total.inches - addFeet * 12;</cline>
      </block>
      <block order="9">
        <cline>   }</cline>
      </block>
      <block order="13">
        <cline>   if (total.feet &gt;= 3) {</cline>
      </block>
      <block order="4">
        <cline>      int addYards = total.feet % 3;</cline>
      </block>
      <block order="14">
        <cline>      total.yards += addYards;</cline>
      </block>
      <block order="16">
        <cline>      total.feet = total.feet - addYards * 3;</cline>
      </block>
      <block order="17">
        <cline>   }</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>
