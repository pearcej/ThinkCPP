<?xml version="1.0"?>
<section xml:id="chapter8_point-objects">
  <title><c>Point</c> objects</title>
  <p>As a simple example of a compound structure, consider the concept of a mathematical point. At
    one level, a point is two numbers (coordinates) that we treat collectively as a single object.
    In mathematical notation, points are often written in parentheses, with a comma separating the
    coordinates. For example, <m>(0, 0)</m> indicates the origin, and <m>(x, y)</m> indicates the
    point <m>x</m> units to the right and <m>y</m> units up from the origin.</p>
  <p>A natural way to represent a point in C++ is with two <c>double</c>s. The question, then, is how to
    group these two values into a compound object, or structure. The answer is a <c>struct</c> definition:</p>
  <program>struct Point {
  double x, y;
};</program>
  <p><c>struct</c> definitions appear outside of any function definition, usually at the beginning of the
    program (after the <c>include</c> statements).</p>
  <p>This definition indicates that there are two elements in this structure, named <c>x</c> and <c>y</c>.
    These elements are called <term>instance variables</term>, for reasons I will explain a little
    later.</p>
  <warning>
    <p>It is a common error to leave off the semi-colon at the end of a
      structure definition. It might seem odd to put a semi-colon after a
      squiggly-brace, but you'll get used to it.</p>
  </warning>
  <p>Once you have defined the new structure, you can create variables with
    that type:</p>
  <program>Point blank;
blank.x = 3.0;
blank.y = 4.0;</program>
  <p>The first line is a conventional variable declaration: <c>blank</c> has type <c>Point</c>. The next two
    lines initialize the instance variables of the structure. The <q>dot notation</q> used here is
    similar to the syntax for invoking a function on an object, as in <c>fruit.length()</c>. Of course, one
    difference is that function names are always followed by an argument list, even if it is empty.</p>
  <p>The result of these assignments is shown in the following state diagram:</p>
  <figure align="center">
    <image source="Chapter8/Images/8.2stackdiagram.png"
           width="50%"
           alt="'blank' names a box with two halves. One is 'x: 3' the other is 'y: 4'."/>
  </figure>
  <p>As usual, the name of the variable <c>blank</c> appears outside the box and its value appears inside
    the box. In this case, that value is a compound object with two named instance variables.</p>
  <exercise label="point_objects_1">
    <statement>
      <p>Which of the following would be the correct way to initialize the <c>x</c> instance variable
        of the <c>Point</c> object?</p>
      <program line-numbers="yes">
        <code>
struct Point() {
  double x, y;
};

int main() {
  Point nice;
}
</code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>blank.x = 3.0;</p>
        </statement>
        <feedback>
          <p>This declaration would not work for the specific code block below.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Point.x = 3.0;</p>
        </statement>
        <feedback>
          <p>The specific name of the structure should be used, not its type.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>nice.x = 3.0;</p>
        </statement>
        <feedback>
          <p>Yes, we can access and modify the instance variables using the dot operator.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>nice.x( ) = 3.0;</p>
        </statement>
        <feedback>
          <p>You are not calling a function therefore brackets for an argument list aren't required.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="point_objects_2"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a block of code that correctly creates variables of a certain structure's type.</p>
    </statement>
    <blocks>
      <block order="1"
             correct="no">
        <cline>struct Point {</cline>
        <cline>   double x, y;</cline>
        <cline>};</cline>
        <cline>int main() {</cline>
        <cline>   Point blue;</cline>
        <cline>   blue.x = 3.0;</cline>
        <cline>   Point.x = 3.0; </cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="point_objects_3">
    <statement>
      <p><c>struct</c> definitions occur&#x2026;</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>outside of any function definition, usually at the beginning of the program</p>
        </statement>
        <feedback>
          <p>Read over the other answer choices as well.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>after the main function</p>
        </statement>
        <feedback>
          <p>The struct cannot be defined after the main function or else it can't be used in the
            program.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>after the include statements</p>
        </statement>
        <feedback>
          <p>Read over the other answer choices as well.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>both a and c</p>
        </statement>
        <feedback>
          <p>Yes, structs are usually defined after the include statements and before the main
            function.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>