<exercises xml:id="chapter8_coding-practice">
  <title>Coding Practice</title>

  <exercise label="cp_8_1">
    <statement>
      <p>Write the function <c>rectangleInfo</c> which prompts the user for the width and height of a rectangle.
        Then <c>rectangleInfo</c> prints out the area and perimeter of the rectangle.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_8_AC_1q">
        <code>
#include &lt;iostream&gt;
using namespace std;

void rectangleInfo() {
    // Write your implementation here.
}

int main() {
    rectangleInfo();
}
        </code>
        <stdin>4 6</stdin>
    </program>
    <solution><p>Below is one way to implement the program. We prompt the user for input using <c>cin</c>
      before printing the area and perimeter.</p> Below is one way to implement the program. We
      prompt the user for input using cin before printing the area and perimeter. <program xml:id="cp_8_AC_1a">
        <code>
#include &lt;iostream&gt;
using namespace std;

void rectangleInfo() {
    int height, width;
    cout &lt;&lt; "Please enter the height and width of a rectangle separated by spaces: ";
    cin &gt;&gt; height &gt;&gt; width;
    cout &lt;&lt; "The area of the rectangle is " &lt;&lt; height * width &lt;&lt; endl;
    cout &lt;&lt; "The perimeter of the rectangle is " &lt;&lt; 2 * (height + width) &lt;&lt; endl;
}

int main() {
    rectangleInfo();
}
        </code>
    </program>
    </solution>
  </exercise>

  <exercise label="cp_8_2">
    <statement>
      <p>Write a simple function called <c>greetUser</c> which prompts the user for their full name. Then the
        function outputs &#8220;Hello <c>fullName</c>!&#8221;. Check the hint below for help with the
        construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_8_AC_2q_editor">
        <code>
#include &lt;iostream&gt;
using namespace std;

void greetUser () {
    // Write your implementation here.
}

int main() {
    greetUser ();
}
        </code>
    </program>
    <hint>
      <activity label="cp_8_AC_2q_pp">
        <statement>
          <p>Write a simple function called <c>greetUser</c> which prompts the user for their full name. Then
            the function outputs &#8220;Hello <c>fullName</c>!&#8221;. Use the lines to construct the code,
            then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="4">
            <cline>void greetUser () {</cline>
          </block>
          <block order="7">
            <cline>    string fullName;</cline>
          </block>
          <block order="5"
                 correct="no">
            <cline>    string fullName = "Captain America"; </cline>
          </block>
          <block order="3">
            <cline>    cout &lt;&lt; "Please enter your full name!" &lt;&lt; endl;</cline>
          </block>
          <block order="1">
            <choice correct="yes">
              <cline>    getline(cin, fullName);</cline>
            </choice>
            <choice>
              <cline>    cin &lt;&lt; fullName; </cline>
            </choice>
          </block>
          <block order="8">
            <cline>    cout &lt;&lt; "Hello " &lt;&lt; fullName &lt;&lt; "!" &lt;&lt; endl;</cline>
          </block>
          <block order="6">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_8_3">
    <statement>
      <p>In the not so distant future, robots have replaced humans to do any kind of imaginable work
        or chore. Define the <c>Robot</c> structure, which has instance variables <c>string name</c>, <c>string model</c>, <c>int serialNumber</c>
        , <c>int batteryLevelPercentage</c>, and <c>string task</c> in that order. Then write the <c>printRobotData</c> function, which takes a <c>Robot</c>
        as a parameter and prints out the robot&#8217;s data in the following format: <c>name</c> (<c>model</c> <c>serialNumber</c>)
        has <c>batteryLevelPercentage</c> percent battery and is currently executing the task &#8220;<c>task</c>&#8221;.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_8_AC_3q">
        <code>
#include &lt;iostream&gt;
using namespace std;

// Write your code for the struct Robot here.

// Write your code for the function printRobotData here.

int main() {
    Robot rob = { "Rob", "XLV", 9800, 45, "washing dishes" };
    cout &lt;&lt; "Your output:" &lt;&lt; endl;
    printRobotData (rob);
    cout &lt;&lt; "Correct output:" &lt;&lt; endl;
    cout &lt;&lt; "Rob (XLV 9800) has 45 percent battery and is currently executing the task \"washing dishes\"";
}
        </code>
    </program>
    <solution><p>Below is one way to implement the program. First we declare the instance variables
      in the <c>struct</c> definition. Next, we use dot notation to access the instance variables and
      output them using <c>cout</c>.</p> Below is one way to implement the program. First we declare the
      instance variables in the struct definition. Next, we use dot notation to access the instance
      variables and output them using cout. <program xml:id="cp_8_AC_3a">
        <code>
#include &lt;iostream&gt;
using namespace std;

struct Robot {
    string name;
    string model;
    int serialNumber;
    int batteryLevelPercentage;
    string task;
};

void printRobotData (Robot r) {
     cout &lt;&lt; r.name &lt;&lt; " (" &lt;&lt; r.model &lt;&lt; " " &lt;&lt; r.serialNumber
          &lt;&lt; ") has " &lt;&lt; r.batteryLevelPercentage
          &lt;&lt; " percent battery and is currently executing the task \""
          &lt;&lt; r.task &lt;&lt; "\"" &lt;&lt; endl;
}

int main() {
    Robot rob = { "Rob", "XLV", 9800, 45, "washing dishes" };
    cout &lt;&lt; "Your output:" &lt;&lt; endl;
    printRobotData (rob);
    cout &lt;&lt; "Correct output:" &lt;&lt; endl;
    cout &lt;&lt; "Rob (XLV 9800) has 45 percent battery and is currently executing the task \"washing dishes\"";
}
        </code>
    </program>
    </solution>
  </exercise>

  <exercise label="cp_8_4">
    <statement>
      <p>Robots will naturally deplete their charge as they carry out tasks. Write a function called <c>chargeRobot</c>
        which takes a <c>Robot</c> as a parameter and charges the robot to 100 percent. Then output the
        statement &#8220;Robot <c>name</c> is fully charged!&#8221;. Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_8_AC_4q_editor">
        <code>
#include &lt;iostream&gt;
using namespace std;

struct Robot {
    string name;
    string model;
    int serialNumber;
    int batteryLevelPercentage;
    string task;
};

void printRobotData (Robot r);

// Write your code for the function chargeRobot here.

int main() {
    Robot bob = { "Bob", "MKZ", 143, 65, "sweeping floors" };
    chargeRobot(bob);
    cout &lt;&lt; "Your output:" &lt;&lt; endl;
    printRobotData (bob);
    cout &lt;&lt; "Correct output:" &lt;&lt; endl;
    cout &lt;&lt; "Bob (MKZ 143) has 100 percent battery and is currently executing the task \"sweeping floors\"";
}
        </code>
<tests>
void printRobotData (Robot r) {
    cout &lt;&lt; r.name &lt;&lt; " (" &lt;&lt; r.model &lt;&lt; " " &lt;&lt; r.serialNumber
            &lt;&lt; ") has " &lt;&lt; r.batteryLevelPercentage
            &lt;&lt; " percent battery and is currently executing the task \""
            &lt;&lt; r.task &lt;&lt; "\"" &lt;&lt; endl;
}
</tests>

    </program>
    <hint>
      <activity label="cp_8_AC_4q_pp">
        <statement>
          <p>Robots will naturally deplete their charge as they carry out tasks. Write a function
            called <c>chargeRobot</c> which takes a <c>Robot</c> as a parameter and charges the robot to 100
            percent. Then output the statement &#8220;Robot <c>name</c> is fully charged!&#8221;. Use
            the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="3">
            <choice correct="yes">
              <cline>void chargeRobot(Robot &amp;r) {</cline>
            </choice>
            <choice>
              <cline>void chargeRobot(Robot r) { </cline>
            </choice>
          </block>
          <block order="5">
            <cline>    r.batteryLevelPercentage = 100;</cline>
          </block>
          <block order="4"
                 correct="no">
            <cline>    r.batteryLevelPercentage = 100%; </cline>
          </block>
          <block order="1">
            <cline>    cout &lt;&lt; "Robot " &lt;&lt; r.name &lt;&lt; " is fully charged!" &lt;&lt; endl;</cline>
          </block>
          <block order="2">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_8_5">
    <statement>
      <p>In case a robot malfunctions, let&#8217;s write the function <c>resetRobot</c>. <c>resetRobot</c> takes a <c>Robot</c>
        as a parameter and resets its name to &#8220;EnterAName&#8221;, recharges the battery to 100
        percent, and resets the task to &#8220;Idle&#8221;.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_8_AC_5q">
        <code>
#include &lt;iostream&gt;
using namespace std;

struct Robot {
    string name;
    string model;
    int serialNumber;
    int batteryLevelPercentage;
    string task;
};

void printRobotData (Robot r);

// Write your code for the function resetRobot here.

int main() {
    Robot a = { "Bot", "RSO", 1985, 32, "gardening" };
    resetRobot(a);
    cout &lt;&lt; "Your output:" &lt;&lt; endl;
    printRobotData (a);
    cout &lt;&lt; "Correct output:" &lt;&lt; endl;
    cout &lt;&lt; "EnterAName (RSO 1985) has 100 percent battery and is currently executing the task \"Idle\"";
}
        </code>
<tests>
void printRobotData (Robot r) {
     cout &lt;&lt; r.name &lt;&lt; " (" &lt;&lt; r.model &lt;&lt; " " &lt;&lt; r.serialNumber
          &lt;&lt; ") has " &lt;&lt; r.batteryLevelPercentage
          &lt;&lt; " percent battery and is currently executing the task \""
          &lt;&lt; r.task &lt;&lt; "\"" &lt;&lt; endl;
}
</tests>

    </program>
    <solution><p>Below is one way to implement the program. We can create another <c>Robot</c> with the
      settings after being reset. Then we set <c>r</c> equal to the new <c>Robot</c> we created. Notice we
      use dot notation to ensure that the <c>model</c> and <c>serialNumber</c> are the same.</p> Below is one way to
      implement the program. We can create another Robot with the settings after being reset. Then
      we set r equal to the new Robot we created. Notice we use dot notation to ensure that the
      model and serialNumber are the same. <program xml:id="cp_8_AC_5a">
        <code>
#include &lt;iostream&gt;
using namespace std;

struct Robot {
    string name;
    string model;
    int serialNumber;
    int batteryLevelPercentage;
    string task;
};

void printRobotData (Robot r);

void resetRobot(Robot&amp; r) {
    Robot reset = { "EnterAName", r.model, r.serialNumber, 100, "Idle" };
    r = reset;
}

int main() {
    Robot a = { "Bot", "RSO", 1985, 32, "gardening" };
    resetRobot(a);
    cout &lt;&lt; "Your output:" &lt;&lt; endl;
    printRobotData (a);
    cout &lt;&lt; "Correct output:" &lt;&lt; endl;
    cout &lt;&lt; "EnterAName (RSO 1985) has 100 percent battery and is currently executing the task \"Idle\"";
}
        </code>
<tests>
void printRobotData (Robot r) {
     cout &lt;&lt; r.name &lt;&lt; " (" &lt;&lt; r.model &lt;&lt; " " &lt;&lt; r.serialNumber
          &lt;&lt; ") has " &lt;&lt; r.batteryLevelPercentage
          &lt;&lt; " percent battery and is currently executing the task \""
          &lt;&lt; r.task &lt;&lt; "\"" &lt;&lt; endl;
}
</tests>

    </program>
    </solution>
  </exercise>

  <exercise label="cp_8_6">
    <statement>
      <p>Write the <c>Pokemon</c> structure, which has instance variables <c>string pokeName</c>, <c>string type</c>, <c>int level</c>, and <c>int healthPercentage</c>
        in that order. Next, write the function <c>printPokeInfo</c>, which takes a <c>Pokemon</c> as a parameter and
        outputs the Pokemon&#8217;s info in the following format: <c>pokeName</c> (Lv. <c>level</c>, <c>healthPercentage</c>%
        HP). Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_8_AC_6q_editor">
        <code>
#include &lt;iostream&gt;
using namespace std;

// Write your code for the struct Pokemon here.

// Write your code for the function printPokeInfo here.

int main() {
    Pokemon magikarp = { "Magikarp", "Water", 12, 100 };
    cout &lt;&lt; "Your output:" &lt;&lt; endl;
    printPokeInfo(magikarp);
    cout &lt;&lt; "Correct output:" &lt;&lt; endl;
    cout &lt;&lt; "Magikarp (Lv. 12, 100% HP)";
}
        </code>
    </program>
    <hint>
      <activity label="cp_8_AC_6q_pp">
        <statement>
          <p>Write the <c>Pokemon</c> structure, which has instance variables <c>string pokeName</c>, <c>string type</c>, <c>int level</c>,
            and <c>int healthPercentage</c> in that order. Next, write the function <c>printPokeInfo</c>, which takes a <c>Pokemon</c> as a
            parameter and outputs the Pokemon&#8217;s info in the following format: <c>pokeName</c> (Lv. <c>level</c>
            , <c>healthPercentage</c>% HP). Use the lines to construct the code, then go back to complete the
            Activecode.</p>
        </statement>
        <blocks>
          <block order="7">
            <cline>// Pokemon struct creation</cline>
            <cline>struct Pokemon {</cline>
          </block>
          <block order="6">
            <cline>    string pokeName;</cline>
          </block>
          <block order="10">
            <cline>    string type;</cline>
          </block>
          <block order="9">
            <cline>    int level;</cline>
          </block>
          <block order="1">
            <cline>    int healthPercentage;</cline>
          </block>
          <block order="8">
            <cline>};</cline>
          </block>
          <block order="4">
            <choice correct="yes">
              <cline>// printPokeInfo function creation</cline>
              <cline>void printPokeInfo(Pokemon p) {</cline>
            </choice>
            <choice>
              <cline>string printPokeInfo(Pokemon p) { </cline>
            </choice>
          </block>
          <block order="3">
            <cline>    cout &lt;&lt; p.pokeName &lt;&lt; " (Lv. " &lt;&lt; p.level &lt;&lt; ", " &lt;&lt; p.healthPercentage &lt;&lt; "% HP)" &lt;&lt; endl;</cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_8_7">
    <statement>
      <p>Now write the <c>Trainer</c> structure, which has instance variables <c>string trainerName</c>, <c>char gender</c>, <c>int numBadges</c>,
        and six <c>Pokemon</c> objects named <c>first</c>, <c>second</c>, etc., in that order. Then, write the
        function <c>printTrainerInfo</c>, which takes a <c>Trainer</c> as a parameter and outputs the trainer&#8217;s info.
        For example, the code below should print:</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_8_AC_7q">
        <code>
#include &lt;iostream&gt;
using namespace std;

struct Pokemon {
    string pokeName;
    string type;
    int level;
    int healthPercentage;
};

// Write your code for the struct Trainer here.

void printPokeInfo(Pokemon p);

// Write your code for the function printTrainerInfo here.

int main() {
    Pokemon pikachu = { "Pikachu", "Electric", 81, 100 };
    Pokemon espeon = { "Espeon", "Psychic", 72, 100 };
    Pokemon snorlax = { "Snorlax", "Normal", 75, 100 };
    Pokemon venusaur = { "Venusaur", "Grass &amp; Poison", 77, 100 };
    Pokemon charizard = { "Charizard", "Fire &amp; Flying", 77, 100 };
    Pokemon blastoise = { "Blastoise", "Water", 77, 100 };
    Trainer red = { "Red", 'M', 8, pikachu, espeon, snorlax, venusaur, charizard, blastoise };
    printTrainerInfo(red);
}
        </code>
<tests>
void printPokeInfo(Pokemon p) {
    cout &lt;&lt; p.pokeName &lt;&lt; " (Lv. " &lt;&lt; p.level &lt;&lt; ", " &lt;&lt; p.healthPercentage &lt;&lt; "% HP)" &lt;&lt; endl;
}
</tests>

    </program>
    <solution><p>Below is one way to implement the program. First we declare the instance variables
      in the <c>struct</c> definition. Next, we call <c>printPokeInfo</c> on each <c>Pokemon</c> in <c>Trainer</c> and output the
      trainer&#8217;s info in the correct format.</p> Below is one way to implement the program.
      First we declare the instance variables in the struct definition. Next, we call printPokeInfo
      on each Pokemon in Trainer and output the trainer&#8217;s info in the correct format. <program xml:id="cp_8_AC_7a">
        <code>
#include &lt;iostream&gt;
using namespace std;

struct Pokemon {
    string pokeName;
    string type;
    int level;
    int healthPercentage;
};

struct Trainer {
    string trainerName;
    char gender;
    int numBadges;
    Pokemon first, second, third, fourth, fifth, sixth;
};

void printPokeInfo(Pokemon p);

void printTrainerInfo(Trainer t) {
    cout &lt;&lt; "Trainer " &lt;&lt; t.trainerName &lt;&lt; " has " &lt;&lt; t.numBadges
         &lt;&lt; " badges and " &lt;&lt; t.trainerName &lt;&lt; "'s team consists of " &lt;&lt; endl;
    printPokeInfo(t.first);
    printPokeInfo(t.second);
    printPokeInfo(t.third);
    printPokeInfo(t.fourth);
    printPokeInfo(t.fifth);
    printPokeInfo(t.sixth);
}

int main() {
    Pokemon pikachu = { "Pikachu", "Electric", 81, 100 };
    Pokemon espeon = { "Espeon", "Psychic", 72, 100 };
    Pokemon snorlax = { "Snorlax", "Normal", 75, 100 };
    Pokemon venusaur = { "Venusaur", "Grass &amp; Poison", 77, 100 };
    Pokemon charizard = { "Charizard", "Fire &amp; Flying", 77, 100 };
    Pokemon blastoise = { "Blastoise", "Water", 77, 100 };
    Trainer red = { "Red", 'M', 8, pikachu, espeon, snorlax, venusaur, charizard, blastoise };
    printTrainerInfo(red);
}
        </code>
<tests>
void printPokeInfo(Pokemon p) {
    cout &lt;&lt; p.pokeName &lt;&lt; " (Lv. " &lt;&lt; p.level &lt;&lt; ", " &lt;&lt; p.healthPercentage &lt;&lt; "% HP)" &lt;&lt; endl;
}
</tests>

    </program>
    </solution>
  </exercise>

  <exercise label="cp_8_8">
    <statement>
      <p>When Pokemon are injured, they can be healed up at the Pokemon Center. Write the function <c>healPokemon</c>,
        which takes a <c>Trainer</c> as a parameter and heals the Trainer&#8217;s Pokemon to 100 percent
        health. Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_8_AC_8q_editor">
        <code>
#include &lt;iostream&gt;
using namespace std;

struct Pokemon {
    string pokeName;
    string type;
    int level;
    int healthPercentage;
};

struct Trainer {
    string trainerName;
    char gender;
    int numBadges;
    Pokemon first, second, third, fourth, fifth, sixth;
};

void printPokeInfo(Pokemon p);
void printTrainerInfo(Trainer t);

// Write your code for the function healPokemon here.

int main() {
    Pokemon exeggutor = {"Exeggutor", "Grass &amp; Psychic", 58, 78};
    Pokemon alakazam = {"Alakazam", "Psychic", 54, 0};
    Pokemon arcanine = {"Arcanine", "Fire", 58, 24};
    Pokemon rhydon = {"Rhydon", "Ground &amp; Rock", 56, 55};
    Pokemon gyarados = {"Gyarados", "Water &amp; Flying", 58, 100};
    Pokemon pidgeot = {"Pidgeot", "Normal &amp; Flying", 56, 35};
    Trainer blue = {"Blue", 'M', 8, exeggutor, alakazam, arcanine, rhydon, gyarados, pidgeot};
    printTrainerInfo(blue);
    healPokemon(blue);
    printTrainerInfo(blue);  // Pokemon should now all be healed to 100% health
}
        </code>
<tests>
void printPokeInfo(Pokemon p) {
    cout &lt;&lt; p.pokeName &lt;&lt; " (Lv. " &lt;&lt; p.level &lt;&lt; ", " &lt;&lt; p.healthPercentage &lt;&lt; "% HP)" &lt;&lt; endl;
}

void printTrainerInfo(Trainer t) {
    cout &lt;&lt; "Trainer " &lt;&lt; t.trainerName &lt;&lt; " has " &lt;&lt; t.numBadges
        &lt;&lt; " badges and " &lt;&lt; t.trainerName &lt;&lt; "'s team consists of " &lt;&lt; endl;
    printPokeInfo(t.first);
    printPokeInfo(t.second);
    printPokeInfo(t.third);
    printPokeInfo(t.fourth);
    printPokeInfo(t.fifth);
    printPokeInfo(t.sixth);
}
</tests>

    </program>
    <hint>
      <activity label="cp_8_AC_8q_pp">
        <statement>
          <p>When Pokemon are injured, they can be healed up at the Pokemon Center. Write the
            function <c>healPokemon</c>, which takes a <c>Trainer</c> as a parameter and heals the Trainer&#8217;s
            Pokemon to 100 percent health. Use the lines to construct the code, then go back to
            complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="3">
            <choice correct="yes">
              <cline>void healPokemon (Trainer &amp;t) {</cline>
            </choice>
            <choice>
              <cline>void healPokemon (Trainer t) { </cline>
            </choice>
          </block>
          <block order="1">
            <cline>    t.first.healthPercentage = 100;</cline>
          </block>
          <block order="8">
            <cline>    t.second.healthPercentage = 100;</cline>
          </block>
          <block order="6">
            <cline>    t.third.healthPercentage = 100;</cline>
          </block>
          <block order="4">
            <cline>    t.fourth.healthPercentage = 100;</cline>
          </block>
          <block order="2">
            <cline>    t.fifth.healthPercentage = 100;</cline>
          </block>
          <block order="7">
            <cline>    t.sixth.healthPercentage = 100;</cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_8_9">
    <statement>
      <p>Now write the function <c>pokeCenter</c> which takes a <c>Trainer</c> as a parameter and prompts the user if
        they&#8217;d like to heal their Pokemon. Below are the possible outputs (y, n, or an invalid
        input). If user inputs &#8216;y&#8217;, call <c>healPokemon</c> and output the correct dialogue. If
        user inputs &#8216;n&#8217;, don&#8217;t call <c>healPokemon</c> and output the correct dialogue. If
        user inputs an invalid character, output the error message.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_8_AC_9q">
        <code>
#include &lt;iostream&gt;
using namespace std;

struct Pokemon {
    string pokeName;
    string type;
    int level;
    int healthPercentage;
};

struct Trainer {
    string trainerName;
    char gender;
    int numBadges;
    Pokemon first, second, third, fourth, fifth, sixth;
};

void printPokeInfo(Pokemon p);
void printTrainerInfo(Trainer t);
void healPokemon(Trainer&amp; t);

// Write your code for the function pokeCenter here.

int main() {
    Pokemon exeggutor = {"Exeggutor", "Grass &amp; Psychic", 58, 78};
    Pokemon alakazam = {"Alakazam", "Psychic", 54, 0};
    Pokemon arcanine = {"Arcanine", "Fire", 58, 24};
    Pokemon rhydon = {"Rhydon", "Ground &amp; Rock", 56, 55};
    Pokemon gyarados = {"Gyarados", "Water &amp; Flying", 58, 100};
    Pokemon pidgeot = {"Pidgeot", "Normal &amp; Flying", 56, 35};
    Trainer blue = {"Blue", 'M', 8, exeggutor, alakazam, arcanine, rhydon, gyarados, pidgeot};
    printTrainerInfo(blue);
    pokeCenter(blue);
    printTrainerInfo(blue);  // Pokemon should now all be healed to 100% health
}
        </code>
<tests>
void printPokeInfo(Pokemon p) {
    cout &lt;&lt; p.pokeName &lt;&lt; " (Lv. " &lt;&lt; p.level &lt;&lt; ", " &lt;&lt; p.healthPercentage &lt;&lt; "% HP)" &lt;&lt; endl;
}

void printTrainerInfo(Trainer t) {
    cout &lt;&lt; "Trainer " &lt;&lt; t.trainerName &lt;&lt; " has " &lt;&lt; t.numBadges
         &lt;&lt; " badges and " &lt;&lt; t.trainerName &lt;&lt; "'s team consists of " &lt;&lt; endl;
    printPokeInfo(t.first);
    printPokeInfo(t.second);
    printPokeInfo(t.third);
    printPokeInfo(t.fourth);
    printPokeInfo(t.fifth);
    printPokeInfo(t.sixth);
}

void healPokemon(Trainer&amp; t) {
    t.first.healthPercentage = 100;
    t.second.healthPercentage = 100;
    t.third.healthPercentage = 100;
    t.fourth.healthPercentage = 100;
    t.fifth.healthPercentage = 100;
    t.sixth.healthPercentage = 100;
}
</tests>

    </program>
    <solution><p>Below is one way to implement the program. We use conditionals to perform
        the correct output and operation depending on the user&#8217;s input.</p> Below is one way
      to implement the program. We use conditionals to perform the correct output and operation
      depending on the user&#8217;s input. <program xml:id="cp_8_AC_9a">
        <code>
#include &lt;iostream&gt;
using namespace std;

struct Pokemon {
    string pokeName;
    string type;
    int level;
    int healthPercentage;
};

struct Trainer {
    string trainerName;
    char gender;
    int numBadges;
    Pokemon first, second, third, fourth, fifth, sixth;
};

void printPokeInfo(Pokemon p);
void printTrainerInfo(Trainer t);
void healPokemon(Trainer&amp; t);

void pokeCenter(Trainer&amp; t) {
    char response;
    cout &lt;&lt; "Welcome to the Pok&#233;mon Center. Would you like me to take your Pok&#233;mon? (y/n) ";
    cin &gt;&gt; response;
    if (response == 'y') {
        cout &lt;&lt; "Okay, I'll take your Pok&#233;mon for a few seconds." &lt;&lt; endl;
        healPokemon(t);
        cout &lt;&lt; "Your Pok&#233;mon are now healed. We hope to see you again." &lt;&lt; endl;
    }
    else if (response == 'n') {
        cout &lt;&lt; "We hope to see you again." &lt;&lt; endl;
    }
    else {
        cout &lt;&lt; "Sorry, not a valid input." &lt;&lt; endl;
    }
}

int main() {
    Pokemon exeggutor = {"Exeggutor", "Grass &amp; Psychic", 58, 78};
    Pokemon alakazam = {"Alakazam", "Psychic", 54, 0};
    Pokemon arcanine = {"Arcanine", "Fire", 58, 24};
    Pokemon rhydon = {"Rhydon", "Ground &amp; Rock", 56, 55};
    Pokemon gyarados = {"Gyarados", "Water &amp; Flying", 58, 100};
    Pokemon pidgeot = {"Pidgeot", "Normal &amp; Flying", 56, 35};
    Trainer blue = {"Blue", 'M', 8, exeggutor, alakazam, arcanine, rhydon, gyarados, pidgeot};
    printTrainerInfo(blue);
    pokeCenter(blue);
    printTrainerInfo(blue);  // Pokemon should now all be healed to 100% health
}
        </code>
<tests>
void printPokeInfo(Pokemon p) {
    cout &lt;&lt; p.pokeName &lt;&lt; " (Lv. " &lt;&lt; p.level &lt;&lt; ", " &lt;&lt; p.healthPercentage &lt;&lt; "% HP)" &lt;&lt; endl;
}

void printTrainerInfo(Trainer t) {
    cout &lt;&lt; "Trainer " &lt;&lt; t.trainerName &lt;&lt; " has " &lt;&lt; t.numBadges
         &lt;&lt; " badges and " &lt;&lt; t.trainerName &lt;&lt; "'s team consists of " &lt;&lt; endl;
    printPokeInfo(t.first);
    printPokeInfo(t.second);
    printPokeInfo(t.third);
    printPokeInfo(t.fourth);
    printPokeInfo(t.fifth);
    printPokeInfo(t.sixth);
}

void healPokemon(Trainer&amp; t) {
    t.first.healthPercentage = 100;
    t.second.healthPercentage = 100;
    t.third.healthPercentage = 100;
    t.fourth.healthPercentage = 100;
    t.fifth.healthPercentage = 100;
    t.sixth.healthPercentage = 100;
}
</tests>

    </program>
    </solution>
  </exercise>

  <exercise label="cp_8_10">
    <statement>
      <p>Ever wanted to know how much you&#8217;d weigh on each planet? Write the <c>convertWeight</c> function,
        which takes a <c>double earthWeight</c> and <c>int planet</c> as parameters. First, in <c>main</c>, prompt the user to enter
        their weight in pounds and a number corresponding to a planet (Mercury is 1, Venus is 2,
        etc.). Next, call the <c>convertWeight</c> function using the user&#8217;s input. Finally, print out
        their weight on that planet. If the user inputs an invalid planet, print out an error
        message. The weight conversion are as follows (multiply the number by <c>earthWeight</c> to get the
        weight on that planet): Mercury - 0.38, Venus - 0.91, Earth - 1.00, Mars - 0.38, Jupiter -
        2.34, Saturn - 1.06, Uranus - 0.92, and Neptune - 1.19. Check the hint below for help with the construction of the code. Below are some examples.</p>
      <pre>Please enter your weight in pounds: 145.6
Please select a planet: 3
Your weight on Earth is 145.6 pounds.

or

Please enter your weight in pounds: 170
Please select a planet: 1
Your weight on Mercury is 64.6 pounds.

or

Please enter your weight in pounds: 170
Please select a planet: 23
Error, not a valid planet.</pre>

    </statement>
    <program interactive="activecode"
             xml:id="cp_8_AC_10q_editor">
        <code>
#include &lt;iostream&gt;
using namespace std;

// Write your code for the function convertWeight here.

int main() {
    // Write your implementation here.
}
        </code>
    </program>
    <hint>
      <activity label="cp_8_AC_10q_pp">
        <statement>
          <p>Ever wanted to know how much you&#8217;d weigh on each planet? Write the <c>convertWeight</c>
            function, which takes a <c>double earthWeight</c> and <c>int planet</c> as parameters. First, in <c>main</c>, prompt the
            user to enter their weight in pounds and a number corresponding to a planet (Mercury is
            1, Venus is 2, etc.). Next, call the <c>convertWeight</c> function using the user&#8217;s input.
            Finally, print out their weight on that planet. If the user inputs an invalid planet,
            print out an error message. The weight conversion are as follows (multiply the number by <c>earthWeight</c>
            to get the weight on that planet): Mercury - 0.38, Venus - 0.91, Earth - 1.00, Mars -
            0.38, Jupiter - 2.34, Saturn - 1.06, Uranus - 0.92, and Neptune - 1.19. Use the lines to
            construct the code, then go back to complete the Activecode. Below are some
            examples.</p>
          <p>
            <pre>Please enter your weight in pounds: 145.6
  Please select a planet: 3
  Your weight on Earth is 145.6 pounds.

  or

  Please enter your weight in pounds: 170
  Please select a planet: 1
  Your weight on Mercury is 64.6 pounds.

  or

  Please enter your weight in pounds: 170
  Please select a planet: 23
  Error, not a valid planet.</pre>
          </p>
        </statement>
        <blocks>
          <block order="9">
            <cline>// convertWeight function creation</cline>
            <cline>void convertWeight (double earthWeight, int planet) {</cline>
          </block>
          <block order="13">
            <cline>    if (planet== 1) {</cline>
            <cline>        cout &lt;&lt; "Your weight on Mercury is " &lt;&lt; earthWeight * .38 &lt;&lt; " pounds." &lt;&lt; endl;</cline>
            <cline>    }</cline>
          </block>
          <block order="4">
            <cline>    else if(planet == 2) {</cline>
            <cline>        cout &lt;&lt; "Your weight on Venus is " &lt;&lt; earthWeight * .91 &lt;&lt; " pounds." &lt;&lt; endl;</cline>
            <cline>    }</cline>
          </block>
          <block order="6">
            <cline>    else if (planet == 3) {</cline>
            <cline>        cout &lt;&lt; "Your weight on Earth is " &lt;&lt; earthWeight * 1 &lt;&lt; " pounds." &lt;&lt; endl;</cline>
            <cline>    }</cline>
          </block>
          <block order="5">
            <cline>    else if(planet == 4) {</cline>
            <cline>        cout &lt;&lt; "Your weight on Mars is " &lt;&lt; earthWeight * .38 &lt;&lt; " pounds." &lt;&lt; endl;</cline>
            <cline>    }</cline>
          </block>
          <block order="15">
            <cline>    else if(planet == 5) {</cline>
            <cline>        cout &lt;&lt; "Your weight on Jupiter is " &lt;&lt; earthWeight * 2.34 &lt;&lt; " pounds." &lt;&lt; endl;</cline>
            <cline>    }</cline>
          </block>
          <block order="10">
            <cline>    else if(planet == 6) {</cline>
            <cline>        cout &lt;&lt; "Your weight on Saturn is " &lt;&lt; earthWeight * 1.06 &lt;&lt; " pounds." &lt;&lt; endl;</cline>
            <cline>    }</cline>
          </block>
          <block order="11">
            <cline>    else if(planet == 7) {</cline>
            <cline>        cout &lt;&lt; "Your weight on Uranus is " &lt;&lt; earthWeight * .92 &lt;&lt; " pounds." &lt;&lt; endl;</cline>
            <cline>    }</cline>
          </block>
          <block order="16">
            <cline>    else if(planet == 8) {</cline>
            <cline>        cout &lt;&lt; "Your weight on Neptune is " &lt;&lt; earthWeight * 1.19 &lt;&lt; " pounds." &lt;&lt; endl;</cline>
            <cline>    }</cline>
          </block>
          <block order="18">
            <cline>    else {</cline>
            <cline>        cout &lt;&lt; "Error, not a valid planet." &lt;&lt; endl;</cline>
            <cline>    }</cline>
          </block>
          <block order="1">
            <cline>}</cline>
          </block>
          <block order="3">
            <cline>// main implementation</cline>
            <cline>int main() {</cline>
          </block>
          <block order="14">
            <cline>    double earthWeight;</cline>
          </block>
          <block order="17">
            <cline>    int planet;</cline>
          </block>
          <block order="8">
            <cline>    cout &lt;&lt; "Please enter your weight in pounds: ";</cline>
            <cline>    cin &gt;&gt; earthWeight;</cline>
            <cline>    cout &lt;&lt; earthWeight &lt;&lt; endl;</cline>
          </block>
          <block order="12">
            <cline>    cout &lt;&lt; "Please select a planet: ";</cline>
            <cline>    cin &gt;&gt; planet;</cline>
            <cline>    cout &lt;&lt; planet &lt;&lt; endl;</cline>
          </block>
          <block order="2">
            <cline>    convertWeight(earthWeight, planet);</cline>
          </block>
          <block order="7">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

</exercises>