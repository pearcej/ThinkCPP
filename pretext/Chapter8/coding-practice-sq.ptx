<?xml version="1.0"?>
<section xml:id="chapter8_coding-practice-1">
  <title>Coding Practice</title>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter8', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_8_AC_2q">
        <statement>
          <p>Write a simple function called <c>greetUser</c> which prompts the user
                    for their full name. Then the function outputs <q>Hello <c>fullName</c>!</q>.
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_8_AC_2q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

void greetUser() {
    // Write your implementation here.
}

int main() {
    greetUser();
}
        ]]></code>
        </program>
        <stdin>Jane Doe</stdin>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter8', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_8_AC_2q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Write a simple function called <c>greetUser</c> which prompts the user
                    for their full name. Then the function outputs <q>Hello <c>fullName</c>!</q>.
                    Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="4">
            <cline>void greetUser() {</cline>
          </block>
          <block order="7">
            <cline>    string fullName;</cline>
          </block>
          <block order="5" correct="no">
            <cline>    string fullName = "Captain America"; </cline>
          </block>
          <block order="3">
            <cline><![CDATA[    cout << "Please enter your full name!" << endl;]]></cline>
          </block>
          <block order="1">
            <choice correct="yes">
              <cline>    getline(cin, fullName);</cline>
            </choice>
            <choice>
              <cline><![CDATA[    cin << fullName; ]]></cline>
            </choice>
          </block>
          <block order="8">
            <cline><![CDATA[    cout << "Hello " << fullName << "!" << endl;]]></cline>
          </block>
          <block order="6">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter8', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_8_AC_4q">
        <statement>
          <p>Robots will naturally deplete their charge as they carry out tasks.
                    Write a function called <c>chargeRobot</c> which takes a <c>Robot</c> as
                    a parameter and charges the robot to 100 percent. Then output the statement
                    <q>Robot <c>name</c> is fully charged!</q>. Check the hint below for help with
                    the construction of the code.</p>
        </statement>
        <program xml:id="cp_8_AC_4q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

struct Robot {
    string name;
    string model;
    int serialNumber;
    int batteryLevelPercentage;
    string task;
};

void printRobotData(Robot r);

// Write your code for the function chargeRobot here.

int main() {
    Robot bob = { "Bob", "MKZ", 143, 65, "sweeping floors" };
    chargeRobot(bob);
    cout << "Your output:" << endl;
    printRobotData (bob);
    cout << "Correct output:" << endl;
    cout << "Bob (MKZ 143) has 100 percent battery and is currently executing the task \"sweeping floors\"";
}
        ]]></code>
          <tests>
void printRobotData(Robot r) {
    cout &lt;&lt; r.name &lt;&lt; " (" &lt;&lt; r.model &lt;&lt; " " &lt;&lt; r.serialNumber
            &lt;&lt; ") has " &lt;&lt; r.batteryLevelPercentage
            &lt;&lt; " percent battery and is currently executing the task \""
            &lt;&lt; r.task &lt;&lt; "\"" &lt;&lt; endl;
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter8', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_8_AC_4q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Robots will naturally deplete their charge as they carry out tasks.
                    Write a function called <c>chargeRobot</c> which takes a <c>Robot</c> as
                    a parameter and charges the robot to 100 percent. Then output the statement
                    <q>Robot <c>name</c> is fully charged!</q>. Use the lines to construct the code, then
                    go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="3">
            <choice correct="yes">
              <cline>void chargeRobot(Robot &amp;r) {</cline>
            </choice>
            <choice>
              <cline>void chargeRobot(Robot r) { </cline>
            </choice>
          </block>
          <block order="5">
            <cline>    r.batteryLevelPercentage = 100;</cline>
          </block>
          <block order="4" correct="no">
            <cline>    r.batteryLevelPercentage = 100%; </cline>
          </block>
          <block order="1">
            <cline><![CDATA[    cout << "Robot " << r.name << " is fully charged!" << endl;]]></cline>
          </block>
          <block order="2">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter8', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_8_AC_6q">
        <statement>
          <p>Write the <c>Pokemon</c> structure, which has instance variables <c>string pokeName</c>,
                    <c>string type</c>, <c>int level</c>, and <c>int healthPercentage</c> in that order.
                    Next, write the function <c>printPokeInfo</c>, which takes a <c>Pokemon</c> as a parameter and outputs the
                    Pokemon's info in the following format: <c>pokeName</c> (Lv. <c>level</c>, <c>healthPercentage</c>% HP).
                    Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_8_AC_6q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

// Write your code for the struct Pokemon here.

// Write your code for the function printPokeInfo here.

int main() {
    Pokemon magikarp = { "Magikarp", "Water", 12, 100 };
    cout << "Your output:" << endl;
    printPokeInfo(magikarp);
    cout << "Correct output:" << endl;
    cout << "Magikarp (Lv. 12, 100% HP)";
}
        ]]></code>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter8', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_8_AC_6q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Write the <c>Pokemon</c> structure, which has instance variables <c>string pokeName</c>,
                    <c>string type</c>, <c>int level</c>, and <c>int healthPercentage</c> in that order.
                    Next, write the function <c>printPokeInfo</c>, which takes a <c>Pokemon</c> as a parameter and outputs the
                    Pokemon's info in the following format: <c>pokeName</c> (Lv. <c>level</c>, <c>healthPercentage</c>% HP).
                    Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="7">
            <cline>// Pokemon struct creation</cline>
            <cline>struct Pokemon {</cline>
          </block>
          <block order="6">
            <cline>    string pokeName;</cline>
          </block>
          <block order="10">
            <cline>    string type;</cline>
          </block>
          <block order="9">
            <cline>    int level;</cline>
          </block>
          <block order="1">
            <cline>    int healthPercentage;</cline>
          </block>
          <block order="8">
            <cline>};</cline>
          </block>
          <block order="4">
            <choice correct="yes">
              <cline>// printPokeInfo function creation</cline>
              <cline>void printPokeInfo(Pokemon p) {</cline>
            </choice>
            <choice>
              <cline>string printPokeInfo(Pokemon p) { </cline>
            </choice>
          </block>
          <block order="3">
            <cline><![CDATA[    cout << p.pokeName << " (Lv. " << p.level << ", " << p.healthPercentage << "% HP)" << endl;]]></cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter8', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_8_AC_8q">
        <statement>
          <p>When Pokemon are injured, they can be healed up at the Pokemon Center.
                    Write the function <c>healPokemon</c>, which takes a <c>Trainer</c> as a parameter
                    and heals the Trainer's Pokemon to 100 percent health. Check the hint below for help with the construction of the code.</p>
        </statement>
        <program xml:id="cp_8_AC_8q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

struct Pokemon {
    string pokeName;
    string type;
    int level;
    int healthPercentage;
};

struct Trainer {
    string trainerName;
    char gender;
    int numBadges;
    Pokemon first, second, third, fourth, fifth, sixth;
};

void printPokeInfo(Pokemon p);
void printTrainerInfo(Trainer t);

// Write your code for the function healPokemon here.

int main() {
    Pokemon exeggutor = {"Exeggutor", "Grass & Psychic", 58, 78};
    Pokemon alakazam = {"Alakazam", "Psychic", 54, 0};
    Pokemon arcanine = {"Arcanine", "Fire", 58, 24};
    Pokemon rhydon = {"Rhydon", "Ground & Rock", 56, 55};
    Pokemon gyarados = {"Gyarados", "Water & Flying", 58, 100};
    Pokemon pidgeot = {"Pidgeot", "Normal & Flying", 56, 35};
    Trainer blue = {"Blue", 'M', 8, exeggutor, alakazam, arcanine, rhydon, gyarados, pidgeot};
    printTrainerInfo(blue);
    healPokemon(blue);
    printTrainerInfo(blue);  // Pokemon should now all be healed to 100% health
}
        ]]></code>
          <tests>
void printPokeInfo(Pokemon p) {
    cout &lt;&lt; p.pokeName &lt;&lt; " (Lv. " &lt;&lt; p.level &lt;&lt; ", " &lt;&lt; p.healthPercentage &lt;&lt; "% HP)" &lt;&lt; endl;
}

void printTrainerInfo(Trainer t) {
    cout &lt;&lt; "Trainer " &lt;&lt; t.trainerName &lt;&lt; " has " &lt;&lt; t.numBadges
        &lt;&lt; " badges and " &lt;&lt; t.trainerName &lt;&lt; "'s team consists of " &lt;&lt; endl;
    printPokeInfo(t.first);
    printPokeInfo(t.second);
    printPokeInfo(t.third);
    printPokeInfo(t.fourth);
    printPokeInfo(t.fifth);
    printPokeInfo(t.sixth);
}
</tests>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter8', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_8_AC_8q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>When Pokemon are injured, they can be healed up at the Pokemon Center.
                    Write the function <c>healPokemon</c>, which takes a <c>Trainer</c> as a parameter
                    and heals the Trainer's Pokemon to 100 percent health. Use the lines to construct
                    the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="3">
            <choice correct="yes">
              <cline>void healPokemon(Trainer &amp;t) {</cline>
            </choice>
            <choice>
              <cline>void healPokemon(Trainer t) { </cline>
            </choice>
          </block>
          <block order="1">
            <cline>    t.first.healthPercentage = 100;</cline>
          </block>
          <block order="8">
            <cline>    t.second.healthPercentage = 100;</cline>
          </block>
          <block order="6">
            <cline>    t.third.healthPercentage = 100;</cline>
          </block>
          <block order="4">
            <cline>    t.fourth.healthPercentage = 100;</cline>
          </block>
          <block order="2">
            <cline>    t.fifth.healthPercentage = 100;</cline>
          </block>
          <block order="7">
            <cline>    t.sixth.healthPercentage = 100;</cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
  <exercise label="XXX">
    <TabNode tabname="Activecode" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter8', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Activecode'}">
      <exercise label="cp_8_AC_10q">
        <statement>
          <p>Ever wanted to know how much you'd weigh on each planet? Write the <c>convertWeight</c>
                    function, which takes a <c>double earthWeight</c> and <c>int planet</c> as parameters. First,
                    in <c>main</c>, prompt the user to enter their weight in pounds and a number corresponding to
                    a planet (Mercury is 1, Venus is 2, etc.). Next, call the <c>convertWeight</c> function using
                    the user's input. Finally, print out their weight on that planet.
                    If the user inputs an invalid planet, print out an error message.
                    The weight conversion are as follows (multiply the number by <c>earthWeight</c> to get the weight on that planet):
                    Mercury - 0.38, Venus - 0.91, Earth - 1.00, Mars - 0.38, Jupiter - 2.34, Saturn - 1.06, Uranus - 0.92, and Neptune - 1.19.
                    Check the hint below for help with the construction of the code.
                    Below are some examples.</p>
          <program>Please enter your weight in pounds: 145.6
Please select a planet: 3
Your weight on Earth is 145.6 pounds.

or

Please enter your weight in pounds: 170
Please select a planet: 1
Your weight on Mercury is 64.6 pounds.

or

Please enter your weight in pounds: 170
Please select a planet: 23
Error, not a valid planet.</program>
        </statement>
        <program xml:id="cp_8_AC_10q_editor" interactive="activecode" line-numbers="yes">
          <code><![CDATA[
#include <iostream>
using namespace std;

// Write your code for the function convertWeight here.

int main() {
    // Write your implementation here.
}
        ]]></code>
        </program>
      </exercise>
    </TabNode>
    <TabNode tabname="Parsonsprob" tabnode_options="{'subchapter': 'coding_practice_sq', 'chapter': 'Chapter8', 'basecourse': 'thinkcpp', 'optional': '', 'optclass': '', 'tabname': 'Parsonsprob'}">
      <exercise label="cp_8_AC_10q_pp" numbered="yes" adaptive="yes" indentation="hide">
        <statement>
          <p>Ever wanted to know how much you'd weigh on each planet? Write the <c>convertWeight</c>
                    function, which takes a <c>double earthWeight</c> and <c>int planet</c> as parameters. First,
                    in <c>main</c>, prompt the user to enter their weight in pounds and a number corresponding to
                    a planet (Mercury is 1, Venus is 2, etc.). Next, call the <c>convertWeight</c> function using
                    the user's input. Finally, print out their weight on that planet.
                    If the user inputs an invalid planet, print out an error message.
                    The weight conversion are as follows (multiply the number by <c>earthWeight</c> to get the weight on that planet):
                    Mercury - 0.38, Venus - 0.91, Earth - 1.00, Mars - 0.38, Jupiter - 2.34, Saturn - 1.06, Uranus - 0.92, and Neptune - 1.19.
                    Use the lines to construct the code, then go back to complete the Activecode.
                    Below are some examples.</p>
          <program>Please enter your weight in pounds: 145.6
Please select a planet: 3
Your weight on Earth is 145.6 pounds.

or

Please enter your weight in pounds: 170
Please select a planet: 1
Your weight on Mercury is 64.6 pounds.

or

Please enter your weight in pounds: 170
Please select a planet: 23
Error, not a valid planet.</program>
        </statement>
        <blocks>
          <block order="9">
            <cline>// convertWeight function creation</cline>
            <cline>void convertWeight(double earthWeight, int planet) {</cline>
          </block>
          <block order="13">
            <cline>    if (planet== 1) {</cline>
            <cline><![CDATA[        cout << "Your weight on Mercury is " << earthWeight * .38 << " pounds." << endl;]]></cline>
            <cline>    }</cline>
          </block>
          <block order="4">
            <cline>    else if(planet == 2) {</cline>
            <cline><![CDATA[        cout << "Your weight on Venus is " << earthWeight * .91 << " pounds." << endl;]]></cline>
            <cline>    }</cline>
          </block>
          <block order="6">
            <cline>    else if (planet == 3) {</cline>
            <cline><![CDATA[        cout << "Your weight on Earth is " << earthWeight * 1 << " pounds." << endl;]]></cline>
            <cline>    }</cline>
          </block>
          <block order="5">
            <cline>    else if(planet == 4) {</cline>
            <cline><![CDATA[        cout << "Your weight on Mars is " << earthWeight * .38 << " pounds." << endl;]]></cline>
            <cline>    }</cline>
          </block>
          <block order="15">
            <cline>    else if(planet == 5) {</cline>
            <cline><![CDATA[        cout << "Your weight on Jupiter is " << earthWeight * 2.34 << " pounds." << endl;]]></cline>
            <cline>    }</cline>
          </block>
          <block order="10">
            <cline>    else if(planet == 6) {</cline>
            <cline><![CDATA[        cout << "Your weight on Saturn is " << earthWeight * 1.06 << " pounds." << endl;]]></cline>
            <cline>    }</cline>
          </block>
          <block order="11">
            <cline>    else if(planet == 7) {</cline>
            <cline><![CDATA[        cout << "Your weight on Uranus is " << earthWeight * .92 << " pounds." << endl;]]></cline>
            <cline>    }</cline>
          </block>
          <block order="16">
            <cline>    else if(planet == 8) {</cline>
            <cline><![CDATA[        cout << "Your weight on Neptune is " << earthWeight * 1.19 << " pounds." << endl;]]></cline>
            <cline>    }</cline>
          </block>
          <block order="18">
            <cline>    else {</cline>
            <cline><![CDATA[        cout << "Error, not a valid planet." << endl;]]></cline>
            <cline>    }</cline>
          </block>
          <block order="1">
            <cline>}</cline>
          </block>
          <block order="3">
            <cline>// main implementation</cline>
            <cline>int main() {</cline>
          </block>
          <block order="14">
            <cline>    double earthWeight;</cline>
          </block>
          <block order="17">
            <cline>    int planet;</cline>
          </block>
          <block order="8">
            <cline><![CDATA[    cout << "Please enter your weight in pounds: ";]]></cline>
            <cline>    cin &gt;&gt; earthWeight;</cline>
            <cline><![CDATA[    cout << earthWeight << endl;]]></cline>
          </block>
          <block order="12">
            <cline><![CDATA[    cout << "Please select a planet: ";]]></cline>
            <cline>    cin &gt;&gt; planet;</cline>
            <cline><![CDATA[    cout << planet << endl;]]></cline>
          </block>
          <block order="2">
            <cline>    convertWeight(earthWeight, planet);</cline>
          </block>
          <block order="7">
            <cline>}</cline>
          </block>
        </blocks>
      </exercise>
    </TabNode>
  </exercise>
</section>
