<?xml version="1.0"?>
<section xml:id="chapter10_random-seeds">
  <title>Random seeds</title>
  <p>If you have run the code in this chapter a few times, you might have noticed that you are
    getting the same <q>random</q> values every time. That's not very random!</p>
  <p>One of the properties of pseudorandom number generators is that if they start from the same
    place they will generate the same sequence of values. The starting place is called a <term>seed</term>;
    by default, C++ uses the same seed every time you run the program.</p>
  <p>While you are debugging, it is often helpful to see the same sequence
    over and over. That way, when you make a change to the program you can
    compare the output before and after the change.</p>
  <p>If you want to choose a different seed for the random number generator, you can use the <c>srand</c>
    function from the <c>cstdlib</c> library. It takes a single argument, which is an integer between 0 and <c>RAND_MAX</c>
    .</p>
  <p>For many applications, like games, you want to see a different random sequence every time the
    program runs. A common way to do that is to use a library function like <c>time</c> from the <c>ctime</c>
    library to generate something reasonably unpredictable and unrepeatable, like the number of
    seconds on the system clock.</p>
  <note>
    <p>If you are trying to work with times, there are better modern libraries for doing so. This
      sample uses <c>ctime</c> as the syntax to do so is simpler.</p>
  </note>

  <listing label="random-seeds-demo">
    <caption>Try this program - it should print a different sequence of numbers each time you run
      it. If you remove the srand call, it will generate the same sequence each time.</caption>
    <program interactive="activecode">
#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;
using namespace std;

int main() {
    srand(gettimeofday(NULL));

    for (int i = 0; i &lt; 4; i++) {
        int x = random();
        cout &lt;&lt; x &lt;&lt; endl;
    }
}
      </program>
  </listing>

  <note>
    <p>Notice how <c>srand</c> is used once at the start of the program. You generally only want to seed
      the number generator one time or you will keep resetting the seed and may generate the same
      "random" number over and over. If you move <c>srand</c> into the loop, that is what you should see
      happen.</p>
  </note>

  <exercise label="random_seeds_1">
    <statement>
      <p>If we wanted to generate a random number between 0 and 12, and we have previously declared
        int <c>int x = random ();</c>, what should be our next line of code?</p>
    </statement>
    <choices>
      <choice>
        <statement id="random_seeds_1_opt_a">
          <p>Calling the <c>random()</c> function with no arguments.</p>
        </statement>
        <feedback id="random_seeds_1_opt_a">
          <p>This always generates the same set of values, using the default seed in C++.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="random_seeds_1_opt_b">
          <p>Calling <c>srand()</c> on a integer seed.</p>
        </statement>
        <feedback id="random_seeds_1_opt_b">
          <p>This always generates the same set of values, using the specified seed.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="random_seeds_1_opt_c">
          <p>Running the <c>gettimeofday()</c> function, and calling srand() on the result.</p>
        </statement>
        <feedback id="random_seeds_1_opt_c">
          <p><c>gettimeofday()</c> will generate something reasonably random, which you can then use as a random
            seed.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>