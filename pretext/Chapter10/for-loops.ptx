<?xml version="1.0"?>
<section xml:id="chapter10_for-loops">
  <title><c>for</c> loops</title>
  <p>The loops we have written so far have a number of elements in common.
    All of them start by initializing a variable; they have a test, or
    condition, that depends on that variable; and inside the loop they do
    something to that variable, like increment it.</p>
  <p>This type of loop is so common that there is an alternate loop statement, called <c>for</c>, that
    expresses it more concisely. The general syntax looks like this:</p>
  <program>for (INITIALIZER; CONDITION; INCREMENTOR) {
  BODY
}</program>
  <p>This statement is exactly equivalent to</p>
  <program>INITIALIZER;
while (CONDITION) {
  BODY
  INCREMENTOR
}</program>
  <p>except that it is more concise and, since it puts all the loop-related
    statements in one place, it is easier to read. For example:</p>
  <program>int i;
for (i = 0; i &lt; 4; i++) {
  cout &lt;&lt; count[i] &lt;&lt; endl;
}</program>
  <p>is equivalent to</p>
  <program>int i = 0;
while (i &lt; 4) {
  cout &lt;&lt; count[i] &lt;&lt; endl;
  i++;
}</program>
  <listing label="for_loops_AC_1">
    <caption>
      Run this active code, which uses a <c>for</c> loop.
    </caption>
    <program xml:id="for_loops_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> count = {1,2,3,4};
    int i;
    for (i = 0; i < 4; i++) {
        cout << count[i] << endl;
    }
}
        ]]></code>
    </program>
  </listing>
  <listing label="for_loops_AC_2">
    <caption>
      Run this active code, which uses a <c>while</c> loop.
    </caption>
    <program xml:id="for_loops_AC_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> count = {1,2,3,4};
    int i = 0;
    while (i < 4) {
        cout << count[i] << endl;
        i++;
    }
}
        ]]></code>
    </program>
  </listing>

  <p>The <c>INCREMENTOR</c> does not have to do <c>++</c> to a variable. It can be any statement you like, but it should do something to modify the looping variable. If you want to count down, you could use <c>i--</c> as your <c>INCREMENTOR</c>.</p>
  <listing label="for_loops_AC_3">
    <caption>
      Run this active code, which uses a <c>for</c> loop with a negative change in the <q>
        INCREMENTOR</q>.
    </caption>
    <program xml:id="for_loops_AC_3_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> count = {1,2,3,4};
    int i;
    for (i = 3; i > -1; i--) {
       cout << count[i] << endl;
    }
}
        ]]></code>
    </program>
  </listing>


  <exercise label="for_loops_1">
    <statement>
      <p>How many times would the following loop execute? <c><![CDATA[for (int i = 1; i < 4; i++)]]></c> <var/>
      </p>
    </statement>
    <setup>
      <var>
        <condition number="3">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition number="4">
          <feedback>
            <p>Incorrect! The loop does not execute when i = 4.</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Incorrect!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="for_loops_2">
    <statement>
      <p>Where are the incrementors in <c>for</c> loops and <c>while</c>?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>in the BODIES of both loops</p>
        </statement>
        <feedback>
          <p>Incorrect!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>in the BODY of a for loop, and in the statement of a while loop</p>
        </statement>
        <feedback>
          <p>Incorrect!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>in the statement of a for loop, and in the BODY of a while loop</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>in the statements of both loops</p>
        </statement>
        <feedback>
          <p>Incorrect!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question10_4_3"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct the <c>half_life()</c> function that prints the first num half lives of the initial amount.</p>
    </statement>
    <blocks>
      <block order="9">
        <choice correct="yes">
          <cline>void half_life(int initial_amount, int num) {</cline>
        </choice>
        <choice>
          <cline>int half_life(int initial_amount, int num) {                         </cline>
        </choice>
      </block>
      <block order="5">
        <cline>   int new_amount = initial_amount;</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>   for (int i = 0; i &lt; num; i++) {</cline>
        </choice>
        <choice>
          <cline>   for (int i = 0; i &lt;= num; i++) {                         </cline>
        </choice>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline>      new_amount = new_amount / 2;</cline>
        </choice>
        <choice>
          <cline>      new_amount / 2;                         </cline>
        </choice>
      </block>
      <block order="3">
        <cline><![CDATA[      cout << new_amount << endl;]]></cline>
      </block>
      <block order="7"
             correct="no">
        <cline>   return new_amount;                         </cline>
      </block>
      <block order="8">
        <cline>   }</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>