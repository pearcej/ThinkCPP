<?xml version="1.0"?>
<section xml:id="chapter10_vectors">
  <title>Vectors</title>
  <p>A <term>vector</term> is a set of values where each value is identified by a number (called an
    index). An <c>string</c> is similar to a vector, since it is made up of an indexed set of characters.
    The nice thing about vectors is that they can be made up of any type of element, including basic
    types like <c>int</c>s and <c>double</c>s, and user-defined types like <c>Point</c> and <c>Time</c>.</p>
  <note>
    <p>All elements of a vector must have the same type.</p>
  </note>
  <p>The <c>vector</c> type is defined in the C++ Standard Template Library (STL). In order to use it, you
    have to include the header file <c>vector</c>; again, the details of how to do that depend on your
    programming environment.</p>
  <p>You can create a vector the same way you create other variable types:</p>
  <program>vector&lt;int&gt; count;
vector&lt;double&gt; doubleVector;</program>
  <p>The type that makes up the vector appears in angle brackets (<c>&lt;</c> and <c>&gt;</c>). The first
    line creates a vector of integers named <c>count</c>; the second creates a vector of <c>double</c>s.
    Although these statements are legal, they are not very useful because they create vectors that
    have no elements (their size is zero). It is more common to specify the size of the vector in
    parentheses:</p>
  <program>
vector&lt;int&gt; count (4);
</program>
  <p>The syntax here is a little odd; it looks like a combination of a variable declarations and a
    function call. In fact, that's exactly what it is. The function we are invoking is an <c>vector</c>
    constructor. A <term>constructor</term> is a special function that creates new objects and
    initializes their instance variables. In this case, the constructor takes a single argument,
    which is the size of the new vector.</p>
  <p>The following figure shows how vectors are represented in state
    diagrams:</p>
  <figure align="center">
    <image source="Chapter10/Images/10.1state_diagram.png"
           width="50%"
           alt="'count' names a box. In it is a row of 4 boxes labeled 0 through 3. Each numbered box has 0 inside.'"/>
  </figure>
  <p>The large numbers inside the boxes are the <term>elements</term> of the vector. The small
    numbers outside the boxes are the indices used to identify each box. When you allocate a new
    vector, the elements are not initialized. They could contain any values.</p>
  <p>There is another constructor for <c>vector</c>s that takes two parameters; the second is a <q>fill
    value,</q> the value that will be assigned to each of the elements.</p>
  <program>
vector&lt;int&gt; count (4, 0);
</program>
  <p>This statement creates a vector of four elements and initializes all of
    them to zero.</p>
  <exercise label="vectors_1">
    <statement>
      <p>How would you create a vector of five words and initialize all of them to empty strings?</p>
    </statement>
    <choices>
      <choice>
        <statement id="vectors_1_opt_a">
          <p>
            <c><![CDATA[vector<string> words ("", 5);]]></c>
          </p>
        </statement>
        <feedback id="vectors_1_opt_a">
          <p>Incorrect! Vector parameters are in the wrong order.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_1_opt_b">
          <p>
            <c><![CDATA[vector<string> words (5);]]></c>
          </p>
        </statement>
        <feedback id="vectors_1_opt_b">
          <p>Correct! Vector elements are default constructed to empty strings.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_1_opt_c">
          <p>
            <c><![CDATA[vector<string> words (5, "");]]></c>
          </p>
        </statement>
        <feedback id="vectors_1_opt_c">
          <p>Correct! We made a vector of strings with 5 elements, initialized to empty strings.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_1_opt_d">
          <p>
            <c><![CDATA[vector<char> words (5, '');]]></c>
          </p>
        </statement>
        <feedback id="vectors_1_opt_d">
          <p>Incorrect! words should be a vector of strings.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_2">
    <statement>
      <p><term>Multiple Response</term> Which of the following could be an element of <term>words</term>
        ?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>Incorrect! This is an integer, not a string.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>"a"</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>'a'</p>
        </statement>
        <feedback>
          <p>Incorrect! This is a character, not a string.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>"word"</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>"1"</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_3">
    <statement>
      <p>What do you call a function that creates an instance of a new object and initializes its
        instance variables?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>initializer</p>
        </statement>
        <feedback>
          <p>Incorrect! Go back and read to find the answer!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>constructor</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>creator</p>
        </statement>
        <feedback>
          <p>Incorrect! Go back and read to find the answer!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>instance function</p>
        </statement>
        <feedback>
          <p>Incorrect! Go back and read to find the answer!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_4">
    <statement>
      <p>What are the values of <c>number</c>'s elements after this declaration?</p>
      <program>
vector&lt;int&gt; numbers(6);
</program>
    </statement>
    <choices>
      <choice>
        <statement id="vectors_4_opt_a">
          <p>undefined (we don't know the values)</p>
        </statement>
        <feedback id="vectors_4_opt_a">
          <p>Integers are default constructed to a known value.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_4_opt_b">
          <p>0</p>
        </statement>
        <feedback id="vectors_4_opt_b">
          <p>Integers are default constructed to a zero value.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_4_opt_c">
          <p>6</p>
        </statement>
        <feedback id="vectors_4_opt_c">
          <p>6 is the size we want the vector to be.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>