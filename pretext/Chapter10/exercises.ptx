<?xml version="1.0"?>
<exercises xml:id="chapter10_multiple-choice-exercises">
  <title>Multiple Choice Exercises</title>
  <p>Answer the following <term>Multiple Choice</term> questions to assess what you have learned in
    this chapter.</p>
  <exercise label="vectors_mc1">
    <statement>
      <p>Suppose you are collecting data for a science experiment. You are to perform three trials
        of eight temperature readings measured in degrees fahrenheit to the nearest hundredth and
        initialized to <em>freezing</em>. Choose the vector that has the proper amount of storage
        for this scenario.</p>
    </statement>
    <choices>
      <choice>
        <statement id="vectors_mc1_opt_a">
          <p>
            <c><![CDATA[vector<int> temps (24, 32.00);]]></c>
          </p>
        </statement>
        <feedback id="vectors_mc1_opt_a">
          <p>We can't declare the vector as an integer type because all temperature readings
            will be truncated.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc1_opt_b">
          <p>
            <c><![CDATA[vector<double> temps (24, 32.00);]]></c>
          </p>
        </statement>
        <feedback id="vectors_mc1_opt_b">
          <p>First comes the vector size, <em>then</em> the initial values.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc1_opt_c">
          <p>
            <c><![CDATA[vector<double> temps (0.00, 24);]]></c>
          </p>
        </statement>
        <feedback id="vectors_mc1_opt_c">
          <p>Freezing is 32 degrees fahrenheit. The order of parameters is incorrect.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc1_opt_d">
          <p>
            <c><![CDATA[vector<double> temps (32, 24.00);]]></c>
          </p>
        </statement>
        <feedback id="vectors_mc1_opt_d">
          <p>This statement creates a vector size 32 with elements initialized to 24.00 degress
            fahrenheit.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_mc2">
    <statement>
      <p>Suppose the following code is run:</p>
      <program>
vector&lt;string&gt; lauren = {"happy", "to", "you", "September", "birthday", "girl"}
</program>
      <p>How would you save the string <c>"birthday"</c> from <c>lauren</c> to the variable <c>nurse</c>?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="vectors_mc2_opt_a">
          <p>
            <c>nurse = lauren[4]</c>
          </p>
        </statement>
        <feedback id="vectors_mc2_opt_a">
          <p>Vectors are zero-indexed, so the fifth element is the fourth index.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc2_opt_b">
          <p>
            <c>nurse = lauren[5]</c>
          </p>
        </statement>
        <feedback id="vectors_mc2_opt_b">
          <p>Remember, vectors are zero-indexed!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc2_opt_c">
          <p>
            <c>nurse = lauren[6]</c>
          </p>
        </statement>
        <feedback id="vectors_mc2_opt_c">
          <p>Remember, vectors are zero-indexed!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc2_opt_d">
          <p>
            <c>nurse = lauren(4)</c>
          </p>
        </statement>
        <feedback id="vectors_mc2_opt_d">
          <p>This is not proper vector indexing.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc2_opt_e">
          <p>
            <c>nurse = lauren(5)</c>
          </p>
        </statement>
        <feedback id="vectors_mc2_opt_e">
          <p>This is not proper vector indexing. Also, vectors are zero-indexed.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_mc3">
    <statement>
      <p>What gets printed when the following code is run:</p>
      <program>vector&lt;string&gt; chant = {"Hail", "to", "the", "victors", "valiant"};
chant[0]=chant[3];
chant[3]=chant[0];
chant[1]=chant[0];

for ( size_t i = 0; i &lt; chant.size(); i++ ) {
     cout &lt;&lt; chant[1][i] &lt;&lt; "  ";
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="vectors_mc3_opt_a">
          <p>victors victors the victors valiant</p>
        </statement>
        <feedback id="vectors_mc3_opt_a">
          <p>Although this is the final version of <c>chant</c>, we are not printing <c>chant</c>!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc3_opt_b">
          <p>error! we run into an error somewhere in the execution due to an out of bounds access.</p>
        </statement>
        <feedback id="vectors_mc3_opt_b">
          <p>Remember, <c>chant</c> at index 1 is no longer <q>hail</q>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc3_opt_c">
          <p>v i c t o r s</p>
        </statement>
        <feedback id="vectors_mc3_opt_c">
          <p>You are thinking of the correct word but consider upto what index we print.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc3_opt_d">
          <p>v i c t o</p>
        </statement>
        <feedback id="vectors_mc3_opt_d">
          <p>Correct! we print the first 5 letters of the string at index 1 which is <q>victo</q>.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_mc4">
    <statement>
      <p>Select all of the following statments that correctly make a copy of <c>lauren</c>.</p>
      <program>
vector&lt;string&gt; lauren = {"happy", "to", "you", "September", "birthday", "girl"}
</program>
      <p>How would you save the string <c>"birthday"</c> from <c>lauren</c> to the variable <c>nurse</c>?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="vectors_mc4_opt_a">
          <p>
            <c><![CDATA[vector<string> harry (lauren)]]></c>
          </p>
        </statement>
        <feedback id="vectors_mc4_opt_a">
          <p>This syntax is correct, but isn't used often.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc4_opt_b">
          <p>
            <c><![CDATA[vector<string> lauren (ella)]]></c>
          </p>
        </statement>
        <feedback id="vectors_mc4_opt_b">
          <p>You make a copy of the vector in parentheses.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc4_opt_c">
          <p>
            <c><![CDATA[vector<string> lauren = mariah]]></c>
          </p>
        </statement>
        <feedback id="vectors_mc4_opt_c">
          <p>Remember how assignment statements work!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc4_opt_d">
          <p>
            <c><![CDATA[vector<katie> string = lauren]]></c>
          </p>
        </statement>
        <feedback id="vectors_mc4_opt_d">
          <p>This is not proper syntax.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc4_opt_e">
          <p>
            <c><![CDATA[vector<string> mariah = lauren]]></c>
          </p>
        </statement>
        <feedback id="vectors_mc4_opt_e">
          <p>This is the most common syntax.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_mc5">
    <statement>
      <p>What is the value of nums after the following code executes?</p>
      <program>int main() {
    vector&lt;int&gt; nums = {0, 8, 5, 1, 4, 3};
    for (int i = 0; i &lt; 6; i++) {
        if (nums[i] % 2 == 0) {
           nums[i]--;
        }
        nums[i] = nums[i] * 2;
    }
    cout &lt;&lt; nums[1];
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="vectors_mc5_opt_a">
          <p>{0, 8, 5, 1, 4, 3}</p>
        </statement>
        <feedback id="vectors_mc5_opt_a">
          <p><c>nums</c> is modified inside of the loop.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc5_opt_b">
          <p>{0, 16, 10, 2, 8, 6}</p>
        </statement>
        <feedback id="vectors_mc5_opt_b">
          <p>Take a look at the conditional.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc5_opt_c">
          <p>{0, 16, 8, 0, 8, 4}</p>
        </statement>
        <feedback id="vectors_mc5_opt_c">
          <p>Take a closer look at the conditional.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc5_opt_d">
          <p>{-2, 14, 10, 2, 6, 6}</p>
        </statement>
        <feedback id="vectors_mc5_opt_d">
          <p>All even numbers were decremeneted, then all numbers were multiplied by 2.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc5_opt_e">
          <p>{2, 18, 10, 2, 10, 6}</p>
        </statement>
        <feedback id="vectors_mc5_opt_e">
          <p>Take a closer look at what happens inside of the conditional.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_mc6">
    <statement>
      <p><term>Multiple Response</term> Select all ways to print out the contents of <c>ryan</c> without
        going out of bounds.</p>
      <program>
vector&lt;int&gt; ryan = {2, 3, 1, 5, 6, 0, 0, 5, 4};
</program>
    </statement>
    <choices>
      <choice>
        <statement id="vectors_mc6_opt_a">
          <program>for (int i = 0; i &lt; ryan.size(); ++i) {
    cout &lt;&lt; ryan[i] &lt;&lt; " ";
}</program>
        </statement>
        <feedback id="vectors_mc6_opt_a">
          <p>When we deal with the <c>size</c> function, we can't use type <c>int</c>.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc6_opt_b">
          <program>for (size_t j = 0; j &lt; ryan.size(); j++) {
    cout &lt;&lt; ryan[j] &lt;&lt; " ";
}</program>
        </statement>
        <feedback id="vectors_mc6_opt_b">
          <p>When we deal with the <c>size</c> function, we must use type <c>size_t</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc6_opt_c">
          <program>for (int k = 0; k &lt; 8; ++k) {
    cout &lt;&lt; ryan[k] &lt;&lt; " ";
}</program>
        </statement>
        <feedback id="vectors_mc6_opt_c">
          <p>There are 9 elements, numbered 0 through 8, but here we only iterate through 8 of them.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc6_opt_d">
          <program>for (int n = 0; n &lt; 9; n++) {
    cout &lt;&lt; ryan[n] &lt;&lt; " ";
}</program>
        </statement>
        <feedback id="vectors_mc6_opt_d">
          <p>There are 9 elements numbered 0 through 8, and this statement iterates over all of
            them.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc6_opt_e">
          <program>for (int m = 0; m &lt;= 8; ++m) {
    cout &lt;&lt; ryan[m] &lt;&lt; " ";
}</program>
        </statement>
        <feedback id="vectors_mc6_opt_e">
          <p>There are 9 elements numbered 0 through 8, and this statement iterates over all of
            them.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_mc7">
    <statement>
      <p>Suppose you want <c>ryan</c> to have the value</p>
      <program>
vector&lt;int&gt; ryan = {2, 3, 1, 5, 6, 7, 8, 9};
</program>
      <p>What vector functions will you use to achieve this, and how many times will you use them?
        Keep in mind, <c>ryan</c> is currently the following vector of integers.</p>
      <program>
vector&lt;int&gt; ryan = {2, 3, 1, 5, 6, 0, 0, 5, 4};
</program>
    </statement>
    <choices>
      <choice>
        <statement id="vectors_mc7_opt_a">
          <p>Use <c>push_back</c> 4 times with no arguments to get rid of the last 4 elements, then use <c>push_back</c>
            3 times with arguments to specify which values you want to add to the end.</p>
        </statement>
        <feedback id="vectors_mc7_opt_a">
          <p>You'll need to use two <em>different</em> functions to accomplish this task.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc7_opt_b">
          <p>Use <c>push_back</c> 4 times with no arguments to get rid of the last 4 elements, then use <c>pop_back</c>
            3 times with arguments to specify which values you want to add to the end.</p>
        </statement>
        <feedback id="vectors_mc7_opt_b">
          <p><c>push_back</c><em>pushes</em> new items onto the end of the vector, and <c>pop_back</c> <em>pops</em>
            old items off the end of the vector.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc7_opt_c">
          <p>Use <c>pop_back</c> 4 times with no arguments to get rid of the last 4 elements, then use <c>pop_back</c>
            3 times with arguments to specify which values you want to add to the end.</p>
        </statement>
        <feedback id="vectors_mc7_opt_c">
          <p>You'll need to use two <em>different</em> functions to accomplish this task.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc7_opt_d">
          <p>Use <c>pop_back</c> 4 times with no arguments to get rid of the last 4 elements, then use <c>push_back</c>
            3 times with arguments to specify which values you want to add to the end.</p>
        </statement>
        <feedback id="vectors_mc7_opt_d">
          <p>T``push_back`` <em>pushes</em> new items onto the end of the vector, and <c>pop_back</c> <em>
            pops</em> old items off the end of the vector.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_mc8">
    <statement>
      <p>Suppose you are randomly assigning students to discussions 1-8. How would you do this
        correctly? Assume
        you have alreay implemented the following code.</p>
      <program>
int x = random();
</program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement id="vectors_mc8_opt_a">
          <program>int y = x % 7;
y = y + 1;</program>
        </statement>
        <feedback id="vectors_mc8_opt_a">
          <p>The first part creates a random number between 0 and 7 (8 numbers) and the second part
            adds 1 so that
            our random number is actually between 1 and 8.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc8_opt_b">
          <program>int y = x % 8;
y = y + 1;</program>
        </statement>
        <feedback id="vectors_mc8_opt_b">
          <p>The first part creates a random number between 0 and 8 (9 numbers). This is too many.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc8_opt_c">
          <program>
int y = x % 7;
</program>
        </statement>
        <feedback id="vectors_mc8_opt_c">
          <p>This creates a random number between 0 and 7 (8 numbers), which are not the numbers we
            are looking for.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc8_opt_d">
          <program>
int y = x % 8;
</program>
        </statement>
        <feedback id="vectors_mc8_opt_d">
          <p>The first part creates a random number between 0 and 8 (9 numbers). This is too many,
            and not the numbers we are looking for.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_mc9">
    <statement>
      <p>Suppose you have defined the <c>fizzBuzz</c> function as the following</p>
      <program>int fizzBuzz(const vector&lt;int&gt; &amp; vec, int num1, int num2) {
    int count = 0;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        if (vec[i] % num1 == 0 &amp;&amp; vec[i] % num2 == 0) {
            count++;
        }
    }
    return count;
}</program>
      <p>What would be printed in the following case?</p>
      <program>vector&lt;int&gt; numbers = {6, 8, 14, 21, 28, 35, 36, 42, 49, 70, 81, 98};
cout &lt;&lt; fizzBuzz(numbers, 2, 7);</program>
    </statement>
    <choices>
      <choice>
        <statement id="vectors_mc9_opt_a">
          <p>1</p>
        </statement>
        <feedback id="vectors_mc9_opt_a">
          <p>14 is 7 * 2. Don't forget about the other multiples of 7 and 2.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc9_opt_b">
          <p>2</p>
        </statement>
        <feedback id="vectors_mc9_opt_b">
          <p>See if you can find the other multiples of 7 and 2.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc9_opt_c">
          <p>3</p>
        </statement>
        <feedback id="vectors_mc9_opt_c">
          <p>See if you can find the other multiples of 7 and 2.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc9_opt_d">
          <p>4</p>
        </statement>
        <feedback id="vectors_mc9_opt_d">
          <p>See if you can find the other multiples of 7 and 2.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc9_opt_e">
          <p>5</p>
        </statement>
        <feedback id="vectors_mc9_opt_e">
          <p>14, 28, 42, 70, and 98 are all multiples of 7 and 2 and are counted by <c>fizzBuzz</c>.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_mc10">
    <statement>
      <p>Suppose you have defined the <c>startsWith</c> function as the following</p>
      <program>int startsWith(const vector&lt;string&gt; &amp; vec, char c) {
    int count = 0;
    int pos = 0;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        pos = vec[i].find(" ");
        if (vec[i][pos + 1] == c) {
            count++;
        }
    }
    return count;
}</program>
      <p>What would be printed in the following case?</p>
      <program>vector&lt;string&gt; names = {"Ross Meldrum", "Monica Morrissey", "Maria Geller", "Marty Bing"};
cout &lt;&lt; howMany(names, 'M');</program>
    </statement>
    <choices>
      <choice>
        <statement id="vectors_mc10_opt_a">
          <p>1</p>
        </statement>
        <feedback id="vectors_mc10_opt_a">
          <p>Is the function counting how many first and last <c>names</c> begin with <c>"M"</c>?</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc10_opt_b">
          <p>2</p>
        </statement>
        <feedback id="vectors_mc10_opt_b">
          <p>The function is counting how many last names begin with <c>"M"</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc10_opt_c">
          <p>3</p>
        </statement>
        <feedback id="vectors_mc10_opt_c">
          <p>Is the function counting how many first <c>names</c> begin with <c>"M"</c>?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc10_opt_d">
          <p>4</p>
        </statement>
        <feedback id="vectors_mc10_opt_d">
          <p>Is the function counting how many elements in <c>names</c> contain <c>"M"</c>?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc10_opt_e">
          <p>5</p>
        </statement>
        <feedback id="vectors_mc10_opt_e">
          <p>Is the function counting how many times <c>"M"</c> appears in <c>names</c>?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_mc11">
    <statement>
      <p>Suppose you have defined the <c>howMany</c> function as the following</p>
      <program>int howMany(const vector&lt;string&gt;&amp; vec, char let) {
    int count = 0;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        for (size_t c = 0; c &lt; vec[i].size(); c++) {
            if (vec[i][c] == let) {
                count++;
            }
        }
    }
    return count;
}</program>
      <p>What is the value of counts after the following code is run?</p>
      <program>vector&lt;string&gt; snacks = {"cheetos", "ruffles", "jalepeno chips", "oreos", "m&amp;ms"};
vector&lt;char&gt; letters = {'a', 'e', 'i', 'o', 'u'};
vector&lt;int&gt; counts = {};
for (int i = 0; i &lt; letters.size(); ++i) {
    counts.push_back(howMany(snacks, letters[i]));
}</program>
    </statement>
    <choices>
      <choice>
        <statement id="vectors_mc11_opt_a">
          <p>{1, 6, 2, 6, 2}</p>
        </statement>
        <feedback id="vectors_mc11_opt_a">
          <p>What is being counted in <c>counts</c>?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc11_opt_b">
          <p>{1, 4, 1, 3, 1}</p>
        </statement>
        <feedback id="vectors_mc11_opt_b">
          <p><c>counts</c> isn't a count of how many words each vowel appers in inside <c>snacks</c>.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc11_opt_c">
          <p>{1, 6, 1, 4, 1}</p>
        </statement>
        <feedback id="vectors_mc11_opt_c">
          <p><c>counts</c> contains a count of how many times each vowel appers in <c>snacks</c>.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc11_opt_d">
          <p>{1, 6, 2, 3, 2}</p>
        </statement>
        <feedback id="vectors_mc11_opt_d">
          <p>What is being counted in <c>counts</c>?</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc11_opt_e">
          <p>Error!</p>
        </statement>
        <feedback id="vectors_mc11_opt_e">
          <p>There isn't anything wrong with the code that would cause an error.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vectors_mc12">
    <statement>
      <p>Suppose you have defined the <c>repeater</c> function as the following</p>
      <program>int repeater(const vector&lt;int&gt;&amp; vec) {
    int count = 0;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        for (size_t j = 0; j &lt; vec.size(); j++) {
            if ((vec[j] == vec[i]) &amp;&amp; (i != j)) {
                count++;
            }
        }
    }
    return count;
}</program>
      <p>What is the value of counter after the following code is run?</p>
      <program>vector&lt;int&gt; vals = {1,1,3,2,2,3,3,4,5,6,7,4,4,5};
int counter = repeater(vals);</program>
    </statement>
    <choices>
      <choice>
        <statement id="vectors_mc12_opt_a">
          <p>169</p>
        </statement>
        <feedback id="vectors_mc12_opt_a">
          <p>What is being counted by <c>repeater</c> in each iteration of the outer loop? Definitely not
            everything!</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc12_opt_b">
          <p>32</p>
        </statement>
        <feedback id="vectors_mc12_opt_b">
          <p><c>repeater</c> does count repeats but does it consider values at the same indexes repeats?</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="vectors_mc12_opt_c">
          <p>18</p>
        </statement>
        <feedback id="vectors_mc12_opt_c">
          <p><c>repeater</c> considers the number of times each index shares a value with any of the other
            indices.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="vectors_mc12_opt_d">
          <p>13</p>
        </statement>
        <feedback id="vectors_mc12_opt_d">
          <p><c>repeater</c> dosen't simply count the number of elements.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</exercises>