<?xml version="1.0"?>
<section xml:id="chapter10_accessing-elements">
  <title>Accessing elements</title>
  <p>The <c>[]</c> operator reads and writes the elements of a vector in much the same way it accesses
    the characters in an <c>string</c>. This is called <term>vector indexing</term>. As with <c>string</c>s, the
    indices start at zero, so <c>count[0]</c> refers to the <q>zeroeth</q> element of the vector, and <c>count[1]</c>
    refers to the <q>oneth</q> element. You can use the <c>[]</c> operator anywhere in an expression:</p>
  <program>count[0] = 7;
count[1] = count[0] * 2;
count[2]++;
count[3] -= 60;</program>
  <p>All of these are legal assignment statements. Here is the effect of this
    code fragment:</p>
  <figure align="center">
    <image source="Chapter10/Images/10.2count_diagram.png"
           width="50%"
           alt="'count' names a box. In it is a row of 4 boxes labeled 0 through 3. Each numbered box has 0 inside.'"/>
  </figure>
  <warning>
    <p>Since elements of this vector are numbered from 0 to 3, there is no element with the index 4.
      It is a common error to go beyond the bounds of a vector, which causes a run-time error. The
      program outputs an error message like <q>Illegal vector index</q>, and then quits.</p>
  </warning>
  <p>You can use any expression as an <term>index</term>, as long as it has type <c>int</c>. One of the
    most common ways to index a vector is with a loop variable. For example:</p>
  <program>int i = 0;
while (i &lt; 4) {
  cout &lt;&lt; count[i] &lt;&lt; endl;
  i++;
}</program>
  <p>This <c>while</c> loop counts from 0 to 4; when the loop variable <c>i</c> is 4, the condition fails
    and the loop terminates. Thus, the body of the loop is only executed when <c>i</c> is 0, 1, 2 and
    3.</p>
  <p>Each time through the loop we use <c>i</c> as an index into the vector, outputting the <c>i</c>th
    element. This type of vector traversal is very common. Vectors and loops go together like fava
    beans and a nice Chianti.</p>
  <listing label="accessing_elements_AC_1">
    <caption>
      Take a look at this active code. We can modify the vectors by accessing
        its elements.
    </caption>
    <program xml:id="accessing_elements_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

void print_vec(vector<int> vec) {
    cout << "[";
    for (size_t i = 0; i < vec.size() - 1; ++i) {
        cout <<  vec[i] << ",";
    }
    cout << vec[vec.size()-1];
    cout << "]" << endl;
}

int main() {
    vector<int> count = {1,2,3,4};
    cout << "Before we make any changes, count = "; print_vec(count);
    count[0] = 7;
    count[1] = count[0] * 2;
    count[2]++;
    count[3] -= 60;
    cout << "After we made the above changes, count = "; print_vec(count);
}
        ]]></code>
    </program>
  </listing>
  <exercise label="accessing_elements_1">
    <statement>
      <p><term>Multiple Response</term> How would you increment the third element of <c>vector&lt;int&gt; vec</c> by one?</p>
    </statement>
    <choices>
      <choice>
        <statement id="accessing_elements_1_opt_a">
          <p>
            <c>vec[3] = vec[3]++;</c>
          </p>
        </statement>
        <feedback id="accessing_elements_1_opt_a">
          <p>Incorrect! This is actually incrementing the 4th element of <term>vec</term>, since
            vectors are zero indexed.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="accessing_elements_1_opt_b">
          <p>
            <c>vec(3) = vec(3) + 1;</c>
          </p>
        </statement>
        <feedback id="accessing_elements_1_opt_b">
          <p>Incorrect! This is not proper syntax.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="accessing_elements_1_opt_c">
          <p>
            <c>vec[2]++;</c>
          </p>
        </statement>
        <feedback id="accessing_elements_1_opt_c">
          <p><c>vec[2]</c> is the third element and we increment it by using the <c>++</c> operator.</p>
        </feedback>
      </choice>
      <choice>
        <statement id="accessing_elements_1_opt_d">
          <p>
            <c>vec(2) = vec(2)++;</c>
          </p>
        </statement>
        <feedback id="accessing_elements_1_opt_d">
          <p>This is not proper syntax.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="accessing_elements_1_opt_e">
          <p>
            <c>vec[2] = vec[2] + 1</c>
          </p>
        </statement>
        <feedback id="accessing_elements_1_opt_e">
          <p><c>vec[2]</c> is the third element and we increment it by adding 1.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="accessing_elements_2">
    <statement>
      <p>What is the highest index reached by <c>while(i &lt; 7)</c>? <var/>
      </p>
    </statement>
    <setup>
      <var>
        <condition number="6">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition number="7">
          <feedback>
            <p>The loop runs 7 times, but vectors are zero indexed, so the loop never reaches the
              7th index!</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Incorrect!</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
</section>