<exercises xml:id="chapter10_activecode-exercises">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to assess what you have learned in this
    chapter.</p>
  <exercise label="vectors_a1">
    <statement>
      <p>Fix the code below so that it creates a vector with 5 elements initialized to 1, and
        changes
        the third element of that vector to a 2.</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a1q_editor">

        <code>
#include &lt;iostream&gt;


using namespace std;

int main () {
    vector&lt;int&gt; nums (5) = 1;
    nums[3] = 2;
}
        </code>
<tests>


</tests>

    </program>
    <solution>
      <statement>
        <p>Below is one way to fix the program. You must always include the <c>&lt;vector&gt;</c> header when
          dealing with vectors. Furthermore, to initialize a vector&#8217;s elements to a certain
          value, you must include that value as a second argument to the size. Finally, vectors are
          zero-indexed.</p>

      </statement>
      <program xml:id="vectors_a1a_editor">

        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

int main () {
    vector&lt;int&gt; nums (5, 1);
    nums[2] = 2;
}
        </code>
<tests>


</tests>

    </program>
    </solution>
  </exercise>


  <exercise label="vectors_a2_q">
    <statement>
      <p>Fix the function below so that it returns how many even numbers are in <c>nums</c>. Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a2_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

int evenCount(const vector&lt;int&gt; &amp;vec) {
    for (size_t i = 0; i &lt; vec.size(); i++) {
        if (i % 2 == 0) {
            count++;
        }
    }
    return count;
}

int main() {
    vector&lt;int&gt; vec{1,2,3,4};
    cout &lt;&lt; evenCount(vec) &lt;&lt; endl;
}
        </code>
    </program>
    <hint>
      <activity label="vectors_a2_pp">
        <statement>
          <p>Fix the function below so that it returns how many even numbers are in <c>nums</c>. Use the
            lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="7">
            <cline>int evenCount (const vector&lt;int&gt; &amp;vec) {</cline>
          </block>
          <block order="11">
            <cline>    int count = 0;</cline>
          </block>
          <block order="1"
                 correct="no">
            <cline>    int count; </cline>
          </block>
          <block order="5">
            <cline>    for (size_t i = 0; i &lt; vec.size(); i++) {</cline>
          </block>
          <block order="8">
            <choice correct="yes">
              <cline>        if (vec[i] % 2 == 0) {</cline>
            </choice>
            <choice>
              <cline>        if (vec[i] % 2 != 0) { </cline>
            </choice>
          </block>
          <block order="4">
            <cline>            count++;</cline>
          </block>
          <block order="6">
            <cline>        }</cline>
          </block>
          <block order="3">
            <cline>    }</cline>
          </block>
          <block order="2">
            <cline>    return count;</cline>
          </block>
          <block order="10">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>


  <exercise label="vectors_a3">
    <statement>
      <p>Fix the function below so that it creates a vector of all of the words in <c>words</c> that end
        with the passed character.</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a3q_editor">

        <code>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

int endsWith(const vector&lt;string&gt;&amp; vec, char c) {
    int count;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        size_t last = vec.size() - 1;
        if (vec[last] == c) {
            count++;
        }
    }
    return count;
}
        </code>
<tests>


</tests>

    </program>
    <solution>
      <statement>
        <p>Below is one way to fix the function. You must initialize <c>count</c> to zero. You also must
          initialize <c>last</c> as an integer. To access a string <em>inside</em> of <c>vec</c>, we use <c>vec[i]</c>.
          To get the last character, we must index the string to the last index, which is one less
          than the length of the string.</p>

      </statement>
      <program xml:id="vectors_a3a_editor">

        <code>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

int endsWith(const vector&lt;string&gt;&amp; vec, char c) {
    int count = 0;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        size_t  last = vec[i].size() - 1;
        if (vec[i][last] == c) {
            count++;
        }
    }
    return count;
}
        </code>
<tests>


</tests>

    </program>
    </solution>
  </exercise>

  <exercise label="vectors_a4_q">
    <statement>
      <p>Someone could have COVID-19 if their temperature is above 99.9 degrees Fahrenheit.
        Finish
        the code below so that it counts and prints how many students in the class may have
        been exposed.
        Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a4_editor">
        <code>
#include &lt;iostream&gt;


using namespace std;

int main () {
    vector&lt;double&gt; temps = {98.6, 97.8, 100.3, 97.2, 98.7, 97.8, 99.8, 96.9, 98.2, 99.1, 99.9};

    int covid_count = 0;
    for (size_t i = 0; i &lt; temps.size(); i++) {


    }
}
        </code>
    </program>
    <hint>
      <activity label="vectors_a4_pp">
        <statement>
          <p>Someone could have COVID-19 if their temperature is above 99.9 degrees
            Fahrenheit. Finish
            the code below so that it counts and prints how many students in the class
            may have been exposed.
            Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="10">
            <cline>#include &lt;iostream&gt;</cline>
            <cline>#include &lt;vector&gt;</cline>
            <cline>using namespace std;</cline>
          </block>
          <block order="4">
            <cline>int main() {</cline>
          </block>
          <block order="9">
            <cline>    vector&lt;double&gt; temps = {98.6, 97.8, 100.3, 97.2, 98.7, 97.8, 99.8, 96.9, 98.2, 99.1, 99.9};</cline>
          </block>
          <block order="3">
            <cline>    int covid_count = 0;</cline>
          </block>
          <block order="8">
            <cline>    for (size_t i = 0; i &lt; temps.size(); i++) {</cline>
          </block>
          <block order="2">
            <cline>        if (temps[i] &gt; 99.9) {</cline>
          </block>
          <block order="1">
            <cline>            covid_count++;</cline>
          </block>
          <block order="7">
            <cline>        }</cline>
          </block>
          <block order="11">
            <cline>    }</cline>
          </block>
          <block order="5">
            <cline>    cout &lt;&lt; covid_count &lt;&lt; endl;</cline>
          </block>
          <block order="6">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="vectors_a5">
    <statement>
      <p>Finish the code below so that it creates removes elements from the end of the vector until
        it ends with <c>"stop"</c>.</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a5q_editor">

        <code>
#include &lt;iostream&gt;


using namespace std;

int main () {
    vector&lt;string&gt; words = {"roses", "are", "red", "violets", "stop", "are", "blue"}

    while(          ) {

    }

}
        </code>
<tests>


</tests>

    </program>
    <solution>
      <statement>
        <p>Below is one way to finish the program. We just use the <c>pop_back</c> function until the last
          element of the vector is <c>"stop"</c>.</p>

      </statement>
      <program xml:id="vectors_a5a_editor">

        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

int main () {
    vector&lt;string&gt; words = {"roses", "are", "red", "violets", "stop", "are", "blue"};

    while (words[words.size() - 1] != "stop"){
        words.pop_back();
    }
}
        </code>
<tests>


</tests>

    </program>
    </solution>
  </exercise>


  <exercise label="vectors_a6_q">
    <statement>
      <p>Write the function <c>endsEven</c> that takes a vector and removes elements from the end of the
        vector until it ends with an even number. Check the hint below for help with the
        construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a6_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

// Write the endsEven function here


int main() {
    vector&lt;int&gt; vec{1,2,3,4,5,6,7,7,9};
    endsEven(vec);
    for(int unsigned i = 0; i &lt; vec.size(); i++) {
        cout &lt;&lt; vec[i] &lt;&lt; endl;
    }
}
        </code>
    </program>
    <hint>
      <activity label="vectors_a6_pp">
        <statement>
          <p>Write the function <c>endsEven</c> that takes a vector and removes elements from the end of the
            vector until it ends with an even number. Use the lines to construct the code, then go
            back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="3">
            <cline>void endsEven (vector&lt;int&gt; &amp;vec) {</cline>
          </block>
          <block order="1"
                 correct="no">
            <cline>vector endsEven (vector&lt;int&gt; &amp;vec) { </cline>
          </block>
          <block order="6">
            <choice correct="yes">
              <cline>    while (vec.back() % 2 != 0) {</cline>
            </choice>
            <choice>
              <cline>    for (size_t i = 0; i &lt; vec.size(); i++) { </cline>
            </choice>
          </block>
          <block order="7">
            <cline>        vec.pop_back();</cline>
          </block>
          <block order="2">
            <cline>    }</cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="vectors_a7">
    <statement>
      <p>Write a function called <c>has_char</c> that returns a boolean of whether every string in the
        vector <c>vec</c> contains the character <c>let</c>. It should return true if all strings contain
        the <c>let</c>.</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a7q_editor">

        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
        </code>
<tests>


</tests>

    </program>
    <solution>
      <statement>
        <p>Below is one way to finish the program. We loop through the vector, and we loop through
          each string inside it. If the string has the character, it is added to <c>count</c>. We then
          check whether <c>count</c> is equal to the number of elements in <c>vec</c> and return a boolean.</p>

      </statement>
      <program xml:id="vectors_a7a_editor">

        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;


int has_char(const vector&lt;string&gt;&amp; vec, char let) {
    size_t count = 0;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        for (size_t c = 0; c &lt; vec[i].size(); c++) {
            if (vec[i][c] == let) {
                count++;
            }
        }
    }
    if (count == vec.size()) {
        return true;
    }
    return false;
}
        </code>
<tests>


</tests>

    </program>
    </solution>
  </exercise>

  <exercise label="vectors_a8_q">
    <statement>
      <p>Write the function <c>randomNums</c> that takes two integers: <c>num</c> which is the number of random
        numbers you wish to generate, and <c>max</c>, which is the maximum value of random number you
        wish to generate. Your function should return a vector of <c>num</c> integers that are between
        1 and <c>max</c>, inclusive. Check the hint below for help with the construction of the
        code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a8_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include &lt;vector&gt;
using namespace std;

// Write the randomNums function here


int main() {
    int num = 10;
    int max = 100;
    randomNums(num,max);
    for (size_t i = 0; i &lt; randomNums(num,max).size(); i++) {
        cout &lt;&lt; randomNums(num,max)[i] &lt;&lt; endl;
    }
}
        </code>
    </program>
    <hint>
      <activity label="vectors_a8_pp">
        <statement>
          <p>Write the function <c>randomNums</c> that takes two integers: <c>num</c> which is the number of
            random numbers you wish to generate, and <c>max</c>, which is the maximum value of random
            number you wish to generate. Your function should return a vector of <c>num</c> integers
            that are between 1 and <c>max</c>, inclusive. Use the lines to construct the code, then go
            back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="6">
            <cline>vector&lt;int&gt; randomNums (int num, int max) {</cline>
          </block>
          <block order="7">
            <cline>    vector&lt;int&gt; randomVec(num);</cline>
          </block>
          <block order="3">
            <choice correct="yes">
              <cline>    for (int i = 0; i &lt; num; i++) {</cline>
            </choice>
            <choice>
              <cline>    for (size_t i = 0; i &lt;= randomVec.size(); i++) { </cline>
            </choice>
          </block>
          <block order="5">
            <cline>        randomVec[i] = rand() % max + 1;</cline>
          </block>
          <block order="2">
            <cline>    }</cline>
          </block>
          <block order="4">
            <cline>    return randomVec;</cline>
          </block>
          <block order="9"
                 correct="no">
            <cline>    return randomVec[i]; </cline>
          </block>
          <block order="8">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="vectors_a9">
    <statement>
      <p>Write the function <c>mean</c> which returns the average of a vector of numbers.</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a9q_editor">

        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
        </code>
<tests>


</tests>

    </program>
    <solution>
      <statement>
        <p>Below is one way to finish the program. First we take the sum, then divide the sum by the
          number of elements in <c>nums</c>.</p>

      </statement>
      <program xml:id="vectors_a9a_editor">

        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

double mean (const vector&lt;double&gt; nums) {
    double sum = 0;
    for (size_t i = 0; i &lt; nums.size(); ++i) {
        sum = sum + nums[i];
    }
    return sum/nums.size();
}
        </code>
<tests>


</tests>

    </program>
    </solution>
  </exercise>

  <exercise label="vectors_a10_q">
    <statement>
      <p>Write the function <c>hundyBundy</c> that returns a count of all numbers in the passed vector <c>vec</c>
        that are divisible by 100. Check the hint below for help with the construction of the
        code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a10_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

// Write the hundyBundy function here


int main() {
    vector&lt;int&gt; vec{ 100,10,300,400,21,1000 };
    cout &lt;&lt; hundyBundy(vec) &lt;&lt; endl;
}
        </code>
    </program>
    <hint>
      <activity label="vectors_a10_pp">
        <statement>
          <p>Write the function <c>hundyBundy</c> that returns a count of all numbers in the passed vector <c>vec</c>
            that are divisible by 100. Use the lines to construct the code, then go back to complete
            the Activecode.</p>
        </statement>
        <blocks>
          <block order="1">
            <choice correct="yes">
              <cline>int hundyBundy (const vector&lt;int&gt; vec) {</cline>
            </choice>
            <choice>
              <cline>vector&lt;int&gt; hundyBundy (const vector&lt;int&gt; vec) { </cline>
            </choice>
          </block>
          <block order="9">
            <cline>    int count = 0;</cline>
          </block>
          <block order="11">
            <cline>    for (size_t i = 0; i &lt; vec.size(); i++) {</cline>
          </block>
          <block order="2"
                 correct="no">
            <cline>    for (size_t i = 0; i &lt; count(); i++) { </cline>
          </block>
          <block order="6">
            <cline>        if (vec[i] % 100 == 0) {</cline>
          </block>
          <block order="4">
            <cline>            count++;</cline>
          </block>
          <block order="10">
            <cline>        }</cline>
          </block>
          <block order="7">
            <cline>    }</cline>
          </block>
          <block order="8">
            <cline>    return count;</cline>
          </block>
          <block order="5">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="vectors_a11">
    <statement>
      <p>Write the function <c>make_odd</c> which subtracts 1 from every even number in a vector of
        integers. We don&#8217;t want any negative values so don&#8217;t subtract 1 from 0. (
        remember to take in the vector by reference to make changes to the actual vector! )</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a11q_editor">

        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
        </code>
<tests>


</tests>

    </program>
    <solution>
      <statement>
        <p>Below is one way to finish the program. We us the modulus operator to check for even
          numbers and decrement them.
          we keep an extra check for 0 to make sure wew are not decrementing 0.</p>

      </statement>
      <program xml:id="vectors_a11a_editor">

        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

void make_odd ( vector&lt;int&gt; &amp;nums) {
    for (size_t i = 0; i &lt; nums.size(); ++i) {

        if((nums[i] % 2 == 0) &amp;&amp; (nums[i] != 0)){
            nums[i]--;
        }

    }
}
        </code>
<tests>


</tests>

    </program>
    </solution>
  </exercise>

  <exercise label="vectors_a12_q">
    <statement>
      <p>Write the function <c>weird_print</c> that prints the first half of a vector of integers in reverse
        order and then prints the second half in the order present in the vector. If we had <c>vec = {1,2,3,4,5,6}</c>
        we would print <c>3 2 1 4 5 6</c>. You can assume the size of the vector will always be even. Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="vectors_a12_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

// Write the weird_print function here


int main() {
    vector&lt;int&gt; vec{1,2,3,4,5,6};
    weird_print(vec);
}
        </code>
    </program>
    <hint>
      <activity label="vectors_a12_pp">
        <statement>
          <p>Write the function <c>weird_print</c> that prints the first half of a vector of integers in
            reverse order and then prints the second half in the order present in the vector. If we
            had <c>vec = {1,2,3,4,5,6}</c> we would print <c>3 2 1 4 5 6</c>. You can assume the size of the vector will always be
            even. Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="6">
            <cline>void weird_print (vector&lt;int&gt; vec) {</cline>
          </block>
          <block order="2">
            <cline>    size_t half = vec.size() / 2;</cline>
          </block>
          <block order="4">
            <cline>    for (size_t i = vec.size() - 1; i &gt;= half; i--){</cline>
          </block>
          <block order="5">
            <cline>        cout &lt;&lt; vec[i-half] &lt;&lt; ' ';</cline>
          </block>
          <block order="9">
            <cline>    }</cline>
          </block>
          <block order="10">
            <cline>    for (int h = 0; h &lt; half; h++) {</cline>
          </block>
          <block order="7">
            <cline>        cout &lt;&lt; vec[h + half] &lt;&lt; ' ';</cline>
          </block>
          <block order="3">
            <cline>    }</cline>
          </block>
          <block order="8">
            <cline>    cout &lt;&lt; endl;</cline>
          </block>
          <block order="1">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

</exercises>