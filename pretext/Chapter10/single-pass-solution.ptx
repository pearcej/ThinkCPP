<?xml version="1.0"?>
<section xml:id="chapter10_a-single-pass-solution">
  <title>A single-pass solution</title>
  <p>Although this code works, it is not as efficient as it could be. Every time it calls <c>howMany</c>,
    it traverses the entire vector. In this example we have to traverse the vector ten times!</p>
  <p>It would be better to make a single pass through the vector. For each
    value in the vector we could find the corresponding counter and
    increment it. In other words, we can use the value from the vector as an
    index into the histogram. Here's what that looks like:</p>
  <program>vector&lt;int&gt; histogram(upperBound, 0);

for (int i = 0; i &lt; numValues; i++) {
  int index = vector[i];
  histogram[index]++;
}</program>
  <p>The first line initializes the elements of the histogram to zeroes. That way, when we use the
    increment operator (<c>++</c>) inside the loop, we know we are starting from zero. Forgetting to
    initialize counters is a common error.</p>

  <exercise label="single_pass_solution_1">
    <statement>
      <p>What happens if you don't initialize a counter?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Your code runs without a problem because counters are automatically initialized to
            zero.</p>
        </statement>
        <feedback>
          <p>Incorrect! Variables are not automatically initialized.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Your code might run, but it probably won't produce the output you desire.</p>
        </statement>
        <feedback>
          <p>Correct! C++ might assign unused memory to the uninitialized variable, which will allow
            the code to run, but counts may be off.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>You might get an error for using an uninitialized variable.</p>
        </statement>
        <feedback>
          <p>Correct! Depening on your compiler, you might be lucky enough to get an error message.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Your program will crash.</p>
        </statement>
        <feedback>
          <p>Incorrect! You might get a compile error, but your program will not crash.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="single_pass_solution_2"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a function called histogram that takes a vector and the range of values in the
        vector, and that returns a histogram of values in the vector.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>vector&lt;int&gt; histogram(const vector&lt;int&gt;&amp; vec, int range) {</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>   vector&lt;int&gt; histogram (range, 0);</cline>
        </choice>
        <choice>
          <cline>   vector&lt;int&gt; histogram (range);                         </cline>
        </choice>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>   for (size_t i = 0; i &lt; vec.size(); i++) {</cline>
        </choice>
        <choice>
          <cline>   for (size_t i = 0; i &lt; range; i++) {                         </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>      int index = vec[i];</cline>
        </choice>
        <choice>
          <cline>      int index = i;                         </cline>
        </choice>
      </block>
      <block order="1">
        <cline>      histogram[index]++;</cline>
      </block>
      <block order="5">
        <cline>   }</cline>
        <cline>   return histogram;</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>