<?xml version="1.0"?>
<section xml:id="chapter10_activecode-exercises-1">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to assess what you have learned in this chapter.</p>
  <exercise label="XXX">
    <statement>
      <p>Construct a block of code that changes the first element of <c>vec</c> to a 6,
                    multiplies the third element of <c>vec</c> by 2, and increments the last element
                    of <c>vec</c> by 1 (in that order).  This should work no matter what <c>vec</c> is.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="vectors_p1_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code.

    
    <program xml:id="vectors_p1_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> vec;
    vec.assign(1,10);
    vec[0] = 6;
    vec[2] = vec[2] * 2;
    int last = vec.size() - 1;
    vec[last]++;
}
        ]]></code></program>

            

<exercise label="vectors_p1_ac_a"><statement><p>Below is one way to construct the code.</p></statement><program xml:id="vectors_p1_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> vec;
    vec.assign(1,10);
    vec[0] = 6;
    vec[2] = vec[2] * 2;
    int last = vec.size() - 1;
    vec[last]++;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a block of code that creates a vector called <c>digs</c> whose elements are
                    7, 8, 7, 8.  Then access elements to change the <c>digs</c> to contain the elements
                    7, 4, 7, 4. <c>Important</c>: Change the <c>8</c>'s to <c>4</c>'s in order of
                    increasing index.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="vectors_p2_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code.

    
    <program xml:id="vectors_p2_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> digs = {7, 8, 7, 8};
    digs[1] = 4;
    digs.pop_back();
    digs.push_back(4);
}
        ]]></code></program>

            

<exercise label="vectors_p2_ac_a"><statement><p>Below is one way to construct the code.</p></statement><program xml:id="vectors_p2_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> digs = {7, 8, 7, 8};
    digs[1] = 4;
    digs.pop_back();
    digs.push_back(4);
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a block of code that creates a vector called <c>nums</c> whose elements are five <c>1</c>'s.
                    Then make a copy of this vector called <c>digits</c>, and use vector operations to change
                    digits to <c>{1, 2, 3}</c>.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="vectors_p3_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code.

    
    <program xml:id="vectors_p3_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> nums (5, 1);
    vector<int> digits = nums;
    digits.pop_back();
    digits.pop_back();
    digits[1]++;
    digits[2] = digits[2] * 3;
}
        ]]></code></program>

            

<exercise label="vectors_p3_ac_a"><statement><p>Below is one way to construct the code.</p></statement><program xml:id="vectors_p3_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> nums (5, 1);
    vector<int> digits = nums;
    digits.pop_back();
    digits.pop_back();
    digits[1]++;
    digits[2] = digits[2] * 3;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Construct a block of code that loops over a vector called <c>numbers</c>
                    and transforms the vector so each element is doubled.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="vectors_p4_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vectors>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code.

    
    <program xml:id="vectors_p4_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> numbers = {1, 2, 3, 4, 5};
    for (size_t i = 0; i < numbers.size(); i++) {
        numbers[i] = numbers[i] * 2;
    }
}
        ]]></code></program>

            

<exercise label="vectors_p4_ac_a"><statement><p>Below is one way to construct the code.</p></statement><program xml:id="vectors_p4_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> numbers = {1, 2, 3, 4, 5};
    for (size_t i = 0; i < numbers.size(); i++) {
        numbers[i] = numbers[i] * 2;
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Suppose you have the vector <c>words</c>.
                    Construct a block of code that transforms the vector to: <c><![CDATA[vector<string> words = {"cAr", "cAt", "switch", "mArio"}]]></c>.
                    Write the necessary code.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="vectors_p5_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<string> words = {"car", "cat", "switch", "princess"};
    // YOUR CODE HERE


}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code.

    
    <program xml:id="vectors_p5_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<string> words = {"car", "cat", "switch", "princess"};
    words.pop_back();
    words.push_back("mario");
    for (size_t i = 0; i < words.size(); ++i) {
        for (size_t c = 0; c < words[i].size(); ++c) {
            if (words[i][c] == 'a') {
                words[i][c] = 'A';
            }
        }
    }
}
        ]]></code></program>

            

<exercise label="vectors_p5_ac_a"><statement><p>Below is one way to construct the code.</p></statement><program xml:id="vectors_p5_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<string> words = {"car", "cat", "switch", "princess"};
    words.pop_back();
    words.push_back("mario");
    for (size_t i = 0; i < words.size(); ++i) {
        for (size_t c = 0; c < words[i].size(); ++c) {
            if (words[i][c] == 'a') {
                words[i][c] = 'A';
            }
        }
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Suppose you run Club Keno, and you are in charge of picking the 20
                    random numbered balls between 1 and 80.  Construct a block of code that
                    chooses these random numbers, then saves them to a vector called <c>keno</c>.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="vectors_p6_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code

    
    <program xml:id="vectors_p6_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> keno = {};
    for (size_t i = 0; i < 20; i++) {
        int x = random();
        int y = x % 80;
        keno.push_back(y + 1);
    }
}
        ]]></code></program>

            

<exercise label="vectors_p6_ac_a"><statement><p>Below is one way to construct the code</p></statement><program xml:id="vectors_p6_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> keno = {};
    for (size_t i = 0; i < 20; i++) {
        int x = random();
        int y = x % 80;
        keno.push_back(y + 1);
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Suppose you have the defined vector <c>album</c>. Construct a block of code that counts how many songs in <c>album</c> start with b. Write the necessary code.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="vectors_p7_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<string> album = {"imagine", "needy", "NASA", "bloodline", "fake smile", "bad idea", "make up", "ghostin", "in my head", "7 rings", "thank u, next", "break up with your girlfriend, i'm bored"};
    // YOUR CODE HERE


}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code

    
    <program xml:id="vectors_p7_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<string> album = {"imagine", "needy", "NASA", "bloodline", "fake smile", "bad idea", "make up", "ghostin", "in my head", "7 rings", "thank u, next", "break up with your girlfriend, i'm bored"};
    int count = 0;
    for (size_t i = 0; i < album.size(); i++) {
        if (album[i][0] == 'b') {
            ++count;
        }
    }
}
        ]]></code></program>

            

<exercise label="vectors_p7_ac_a"><statement><p>Below is one way to construct the code</p></statement><program xml:id="vectors_p7_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<string> album = {"imagine", "needy", "NASA", "bloodline", "fake smile", "bad idea", "make up", "ghostin", "in my head", "7 rings", "thank u, next", "break up with your girlfriend, i'm bored"};
    int count = 0;
    for (size_t i = 0; i < album.size(); i++) {
        if (album[i][0] == 'b') {
            ++count;
        }
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Suppose you have the defined vectors, <c>temps</c> and <c>precip</c>. Your family will go to the beach if the temperature at least 75 degrees and the chance
                    of precipitation is less than 50%.  Construct a block of code that counts how many days
                    your family can hit the beach on your vacation.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="vectors_p8_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<double> temps = {82.0, 76.8, 74.3, 58.8, 79.2, 73.4, 80.1};
    vector<double> precip = {0.00, 0.30, 0.60, 0.90, 0.10, 0.20, 0.80};
    // YOUR CODE HERE


}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code

    
    <program xml:id="vectors_p8_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<double> temps = {82.0, 76.8, 74.3, 58.8, 79.2, 73.4, 80.1};
    vector<double> precip = {0.00, 0.30, 0.60, 0.90, 0.10, 0.20, 0.80};
    int count = 0;
    for (int i = 0; i < 7; ++i) {
        if (temps[i] >= 75.0 && precip[i] < 0.50) {
            ++count;
        }
    }
}
        ]]></code></program>

            

<exercise label="vectors_p8_ac_a"><statement><p>Below is one way to construct the code</p></statement><program xml:id="vectors_p8_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<double> temps = {82.0, 76.8, 74.3, 58.8, 79.2, 73.4, 80.1};
    vector<double> precip = {0.00, 0.30, 0.60, 0.90, 0.10, 0.20, 0.80};
    int count = 0;
    for (int i = 0; i < 7; ++i) {
        if (temps[i] >= 75.0 && precip[i] < 0.50) {
            ++count;
        }
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Suppose you have the defined vector <c>nouns</c>. Construct a block of code that creates a vector of the <term>proper</term> nouns in <c>nouns</c>.
                    Use the <c>isupper</c> function to check if a letter is uppercase.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="vectors_p9_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<string> nouns = {"cereal", "Cocoa Puffs", "Mario", "luigi", "Aerosmith"};
    // YOUR CODE HERE


}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code. For this question, the isupper function is not defined but it returns a bool determined by an input of a string.

    
    <program xml:id="vectors_p9_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<string> nouns = {"cereal", "Cocoa Puffs", "Mario", "luigi", "Aerosmith"};
    vector<string> proper = {};
    for (size_t i = 0; i < nouns.size(); ++i) {
        if (isupper(nouns[i][0])) {
            proper.push_back(nouns[i]);
        }
    }
}
        ]]></code></program>

            

<exercise label="vectors_p9_ac_a"><statement><p>Below is one way to construct the code. For this question, the <c>isupper</c> function is not defined but it returns a bool determined by an input of a string.</p></statement><program xml:id="vectors_p9_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<string> nouns = {"cereal", "Cocoa Puffs", "Mario", "luigi", "Aerosmith"};
    vector<string> proper = {};
    for (size_t i = 0; i < nouns.size(); ++i) {
        if (isupper(nouns[i][0])) {
            proper.push_back(nouns[i]);
        }
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Suppose you have the already defined <c>howMany</c> function and <c>excl</c> vector. Construct a block of code that counts how many times <q>.</q>, <q>!</q>, and <q>?</q> occur in <c>excl</c>.
                    Save the counts to a vector with <q>.</q> count as the first element, <q>!</q> count as the second, and <q>?</q> count as the third.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="vectors_p10_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int howMany(const vector<string>& vec, char let) {
    int count = 0;
    for (size_t i = 0; i < vec.size(); i++) {
        for (size_t c = 0; c < vec[i].size(); c++) {
            if (vec[i][c] == let) {
                count++;
            }
        }
    }
    return count;
}

int main() {
    vector<string> excl = {"what?!", "how???", "fine!", "STOP.", "yay!!!!!", "ugh...!"};
    // YOUR CODE HERE


}
        ]]></code>
    </program>
    <solution>


    
                Below is one way to construct the code

    
    <program xml:id="vector_p10_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int howMany(const vector<string>& vec, char let) {
    int count = 0;
    for (size_t i = 0; i < vec.size(); i++) {
        for (size_t c = 0; c < vec[i].size(); c++) {
            if (vec[i][c] == let) {
                count++;
                }
        }
    }
    return count;
}

int main() {
    vector<string> excl = {"what?!", "how???", "fine!", "STOP.", "yay!!!!!", "ugh...!"};
    vector<char> punc = {'.', '!', '?'};
    vector<int> counts = {};
    for (int i = 0; (unsigned)i < punc.size(); ++i) {
        counts.push_back(howMany(excl, punc[i]));
    }
}
        ]]></code></program>

            

<exercise label="vector_p10_ac_a"><statement><p>Below is one way to construct the code</p></statement><program xml:id="vector_p10_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

int howMany(const vector<string>& vec, char let) {
    int count = 0;
    for (size_t i = 0; i < vec.size(); i++) {
        for (size_t c = 0; c < vec[i].size(); c++) {
            if (vec[i][c] == let) {
                count++;
                }
        }
    }
    return count;
}

int main() {
    vector<string> excl = {"what?!", "how???", "fine!", "STOP.", "yay!!!!!", "ugh...!"};
    vector<char> punc = {'.', '!', '?'};
    vector<int> counts = {};
    for (int i = 0; (unsigned)i < punc.size(); ++i) {
        counts.push_back(howMany(excl, punc[i]));
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
</section>
