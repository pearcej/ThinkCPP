<?xml version="1.0"?>
<section xml:id="chapter10_counting">
  <title>Counting</title>
  <p>A good approach to problems like this is to think of simple functions that are easy to write,
    and that might turn out to be useful. Then you can combine them into a solution. This approach
    is sometimes called <term>bottom-up design</term>. Of course, it is not easy to know ahead of
    time which functions are likely to be useful, but as you gain experience you will have a better
    idea.</p>
  <p>Also, it is not always obvious what sort of things are easy to write,
    but a good approach is to look for subproblems that fit a pattern you
    have seen before.</p>
  <p>Back in <xref ref="chapter7_looping-and-counting-loopcount"/> we looked at a
    loop that traversed a string and counted the number of times a given letter appeared. You can
    think of this program as an example of a pattern called <q>traverse and count.</q> The elements
    of this pattern are:</p>
  <p>
    <ul>
      <li>
        <p>A set or container that can be traversed, like a string or a vector.</p>
      </li>
      <li>
        <p>A test that you can apply to each element in the container.</p>
      </li>
      <li>
        <p>A counter that keeps track of how many elements pass the test.</p>
      </li>
    </ul>
  </p>
  <p>In this case, I have a function in mind called <c>howMany</c> that counts the number of elements in a
    vector that equal a given value. The parameters are the vector and the integer value we are
    looking for. The return value is the number of times the value appears.</p>
  <program>int howMany(const vector&lt;int&gt;&amp; vec, int value) {
  int count = 0;
  for (size_t i = 0; i &lt; vec.size(); i++) {
    if (vec[i] == value) count++;
  }
  return count;
}</program>
  <listing label="counting_AC_1">
    <caption>
      Take a look at this active code which uses the <c>howMany</c> function. Run the code to see how
        many times the target appears in the vector! Feel free to modify the code and experiment
        around.
    </caption>
    <program xml:id="counting_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

vector<int> randomVector(int n, int upperBound);
void printVector(const vector<int>& vec);
int howMany(const vector<int>& vec, int value);

int main() {
    int numValues = 20;
    int upperBound = 10;
    int target = 6;
    vector<int> vector = randomVector(numValues, upperBound);
    printVector(vector);
    cout << endl;
    cout << "The number " << target << " appears " << howMany(vector,target) << " times in our vector!";
}

        ]]></code>
      <tests>

int howMany(const vector&lt;int&gt;&amp; vec, int value) {
   int count = 0;
   for (size_t i = 0; i &lt; vec.size(); i++) {
      if (vec[i] == value) count++;
   }
   return count;
}

vector&lt;int&gt; randomVector(int n, int upperBound) {
   vector&lt;int&gt; vec (n);
   for (size_t i = 0; i &lt; vec.size(); i++) {
      vec[i] = random() % upperBound;
   }
   return vec;
}

void printVector(const vector&lt;int&gt;&amp; vec) {
   for (size_t i = 0; i &lt; vec.size(); i++) {
      cout &lt;&lt; vec[i] &lt;&lt; " ";
   }
}
</tests>
    </program>
  </listing>
  <exercise label="counting_1">
    <statement>
      <p>Which of the following is the best definition of bottom-up design?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>a method of programming where you write simple "helper" functions that are later
            incorporated into larger functions</p>
        </statement>
        <feedback>
          <p>Correct! Bottom-up design starts with a lot of small functions and assembles them into
            a few larger ones that accomplish a task.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>a method of programming in which you tackle the largest functions first, and save the
            simple functions for later</p>
        </statement>
        <feedback>
          <p>Incorrect! This is describing top-down design.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>a method of programming where you break the task down into smaller and smaller
            components until it cannot be simplified further</p>
        </statement>
        <feedback>
          <p>Incorrect! This is describing top-down design.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>a method of programming where you use the minimum number of functions to accomplish the
            task</p>
        </statement>
        <feedback>
          <p>Incorrect! Bottom-up design uses many simple functions rather than a few complex ones,
            so it is not minimizing the number of functions being used.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="counting_2"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a block of code that counts how many numbers are between lowerbound and
        upperbound inclusive.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline><![CDATA[int just_right(const vector<int>& vec, int lowerbound, int upperbound) {]]></cline>
      </block>
      <block order="7">
        <cline>   int count = 0;</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>   for (size_t i = 0; i &lt; vec.size(); i++) {</cline>
        </choice>
        <choice>
          <cline>   for (int i = 0; i &lt; upperbound; i++)                         </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline><![CDATA[      if (vec[i] >= lowerbound && vec[i] <= upperbound) {]]></cline>
          <cline>         count++;</cline>
        </choice>
        <choice>
          <cline><![CDATA[      if (vec[i] > lowerbound && vec[i] < upperbound) {                         ]]></cline>
          <cline>         count++;</cline>
        </choice>
      </block>
      <block order="6">
        <cline>      }</cline>
        <cline>   }</cline>
        <cline>   return count;</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>