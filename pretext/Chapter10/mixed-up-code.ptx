<?xml version="1.0"?>
<exercises xml:id="chapter10_mixed-up-code-exercises-1">
  <title>Mixed-Up Code Exercises</title>
  <p>Answer the following <term>Mixed-Up Code</term> questions to assess what you have learned in
    this chapter.</p>
  <exercise label="vectors_p1"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Construct a block of code that changes the first element of <c>vec</c> to a 6, multiplies the
        third element of <c>vec</c> by 2, and increments the last element of <c>vec</c> by 1 (in that
        order). This should work no matter what <c>vec</c> is.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>vec[0] = 6;</cline>
      </block>
      <block order="1">
        <cline>vec[2] = vec[2] * 2;</cline>
      </block>
      <block order="5">
        <cline>last = vec.size() - 1;</cline>
        <cline>vec[last]++;</cline>
      </block>
      <block order="7"
             correct="no">
        <cline>vec[1] = 6; </cline>
      </block>
      <block order="2"
             correct="no">
        <cline>vec[0] == 6; </cline>
      </block>
      <block order="6"
             correct="no">
        <cline>vec[3] = vec[3] * 2; </cline>
      </block>
      <block order="3"
             correct="no">
        <cline>last = vec.size(); </cline>
        <cline>vec[last]++;</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="vectors_p2"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Construct a block of code that creates a vector called <c>digs</c> whose elements are 7, 8, 7,
        8. Then access elements to change the <c>digs</c> to contain the elements 7, 4, 7, 4. <term>
        Important</term>: Change the 8's to 4's in order of increasing index.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline><![CDATA[vector<int> digs = {7, 8, 7, 8};]]></cline>
      </block>
      <block order="2">
        <cline>digs[1] = 4;</cline>
      </block>
      <block order="7">
        <cline>digs.pop_back();</cline>
      </block>
      <block order="6">
        <cline>digs.push_back(4);</cline>
      </block>
      <block order="1"
             correct="no">
        <cline>vector digs = {7, 8, 7, 8}; </cline>
      </block>
      <block order="3"
             correct="no">
        <cline><![CDATA[vector<int> digs = [7, 8, 7, 8]; ]]></cline>
      </block>
      <block order="8"
             correct="no">
        <cline>digs[2] = 4; </cline>
      </block>
      <block order="4"
             correct="no">
        <cline>digs.pop_back(4); </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="vectors_p3"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Construct a block of code that creates a vector called <c>nums</c> whose elements are five 1's.
        Then make a copy of this vector called <c>digits</c>, and use vector operations to change digits
        to <c>{1, 2, 3}</c>.</p>
    </statement>
    <blocks>
      <block order="8">
        <cline><![CDATA[vector<int> nums (5, 1);]]></cline>
      </block>
      <block order="1">
        <cline><![CDATA[vector<int> digits = nums;]]></cline>
      </block>
      <block order="7">
        <cline>digits.pop_back();</cline>
        <cline>digits.pop_back();</cline>
      </block>
      <block order="2">
        <cline>digits[1]++;</cline>
        <cline>digits[2] = digits[2] * 3;</cline>
      </block>
      <block order="5"
             correct="no">
        <cline>vector nums = {1, 1, 1, 1, 1}; </cline>
      </block>
      <block order="6"
             correct="no">
        <cline><![CDATA[vector<int> nums = digits; ]]></cline>
      </block>
      <block order="3"
             correct="no">
        <cline>digits.push_back(); </cline>
        <cline>digits.push_back();</cline>
      </block>
      <block order="4"
             correct="no">
        <cline>digits[2]++; </cline>
        <cline>digits[3] = digits[3] * 3;</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="vectors_p4"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Construct a block of code that loops over a vector called <c>numbers</c> and transforms the vector
        so each element is doubled.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline><![CDATA[vector<int> numbers = {1, 2, 3, 4, 5};]]></cline>
      </block>
      <block order="8">
        <cline><![CDATA[for (size_t i = 0; i < numbers.size(); i++) {]]></cline>
      </block>
      <block order="6">
        <cline> numbers[i] = numbers[i] * 2;</cline>
      </block>
      <block order="5">
        <cline>}</cline>
      </block>
      <block order="3"
             correct="no">
        <cline>vector numbers = {1, 2, 3, 4, 5}; </cline>
      </block>
      <block order="4"
             correct="no">
        <cline><![CDATA[for (size_t i = 1; i <= numbers.size(); ++i) { ]]></cline>
      </block>
      <block order="1"
             correct="no">
        <cline><![CDATA[for (int i = 0; i < numbers.size(); i++) { ]]></cline>
      </block>
      <block order="2"
             correct="no">
        <cline>numbers[i] * 2; </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="vectors_p5"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Suppose you have the vector <c><![CDATA[vector<string> words = {"car", "cat", "switch", "princess"}]]></c> Construct a block of code that transforms the vector to <c><![CDATA[vector<string> words = {"cAr", "cAt", "switch", "mArio"}]]></c></p>
    </statement>
    <blocks>
      <block order="4">
        <cline>words.pop_back();</cline>
      </block>
      <block order="10">
        <cline>words.push_back("mario");</cline>
      </block>
      <block order="7">
        <cline><![CDATA[for (size_t i = 0; i < words.size(); ++i) {]]></cline>
      </block>
      <block order="5">
        <cline><![CDATA[ for (size_t c = 0; c < words[i].size(); ++c) {]]></cline>
      </block>
      <block order="11">
        <cline>  if (words[i][c] == 'a') {</cline>
      </block>
      <block order="9">
        <cline>      words[i][c] = 'A';</cline>
      </block>
      <block order="3">
        <cline>  }</cline>
        <cline> }</cline>
        <cline>}</cline>
      </block>
      <block order="1"
             correct="no">
        <cline>words.pop_back("mario"); </cline>
      </block>
      <block order="2"
             correct="no">
        <cline><![CDATA[for (int i = 0; i < words.size(); ++i) { ]]></cline>
      </block>
      <block order="6"
             correct="no">
        <cline><![CDATA[for (int c = 0; c < words[i].size(); ++c) { ]]></cline>
      </block>
      <block order="8"
             correct="no">
        <cline>words[i][c] == 'A'; </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="vectors_p6"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Suppose you run Club Keno, and you are in charge of picking the 20 random numbered balls
        between 1 and 80. Construct a block of code that chooses these random numbers, then saves
        them to a vector called <c>keno</c>.</p>
    </statement>
    <blocks>
      <block order="8">
        <cline><![CDATA[vector<int> keno = {};]]></cline>
      </block>
      <block order="6">
        <cline><![CDATA[for (size_t i = 0; i < 20; i++) {]]></cline>
      </block>
      <block order="7">
        <cline> int x = random();</cline>
      </block>
      <block order="2">
        <cline> int y = x % 80;</cline>
      </block>
      <block order="9">
        <cline> keno.push_back(y + 1);</cline>
      </block>
      <block order="1">
        <cline>}</cline>
      </block>
      <block order="3"
             correct="no">
        <cline><![CDATA[for (int i = 0; i < 20; i++) { ]]></cline>
      </block>
      <block order="5"
             correct="no">
        <cline>int y = x % 81; </cline>
      </block>
      <block order="4"
             correct="no">
        <cline>keno.push_back(y); </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="vectors_p7"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p><![CDATA[Suppose <code>album</code> has already been defined as
            ]]><c><![CDATA[vector<string> album = {"imagine", "needy", "NASA", "bloodline", "fake smile", "bad idea", "make up", "ghostin", "in my head", "7 rings", "thank u, next", "break up with your girlfriend, i'm bored"}]]></c> Construct a block of code that counts how many songs in
        &lt;code&gt;album&lt;/code&gt; start with b.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>count = 0</cline>
      </block>
      <block order="4">
        <cline><![CDATA[for (size_t i = 0; i < album.size(); i++) {]]></cline>
      </block>
      <block order="3">
        <cline> if (album[i][0] == 'b') {</cline>
      </block>
      <block order="9">
        <cline>  ++count;</cline>
      </block>
      <block order="7">
        <cline> }</cline>
        <cline>}</cline>
      </block>
      <block order="8"
             correct="no">
        <cline><![CDATA[for (int i = 0; i < album.size(); i++) { ]]></cline>
      </block>
      <block order="1"
             correct="no">
        <cline>if (album[i] == 'b') { </cline>
      </block>
      <block order="5"
             correct="no">
        <cline>if (album[i][1] == 'b') { </cline>
      </block>
      <block order="6"
             correct="no">
        <cline>count++ </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="vectors_p8"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Suppose you have the following two vectors to describe the weekly forecast <c><![CDATA[vector<double> temps = {82.0, 76.8, 74.3, 58.8, 79.2, 73.4, 80.1}]]></c>
            <c><![CDATA[vector<double> precip = {0.00, 0.30, 0.60, 0.90, 0.10, 0.20, 0.80}]]></c>
        Your family will go to the beach if the temperature at least 75 degrees and the chance of
        precipitation is less than 50%. Construct a block of code that counts how many days your
        family can hit the beach on your vacation.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>count = 0;</cline>
      </block>
      <block order="7">
        <cline><![CDATA[for (int i = 0; i < 7; ++i) {]]></cline>
      </block>
      <block order="6">
        <cline><![CDATA[ if (temps[i] >= 75.0 && precip[i] < 0.50) {]]></cline>
      </block>
      <block order="2">
        <cline>  ++count;</cline>
      </block>
      <block order="1">
        <cline> }</cline>
        <cline>}</cline>
      </block>
      <block order="8"
             correct="no">
        <cline><![CDATA[for (size_t i = 1; i <= 7; ++i) { ]]></cline>
      </block>
      <block order="4"
             correct="no">
        <cline><![CDATA[if (temps[i] > 75.0 && precip[i] <= 0.50) { ]]></cline>
      </block>
      <block order="5"
             correct="no">
        <cline>count++ </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="vectors_p9"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Suppose you have the following vector <c>nouns</c>, <c><![CDATA[vector<string> nouns = {"cereal", "Cocoa Puffs", "Mario", "luigi", "Aerosmith"}]]></c> Construct a block of code that
        creates a vector of the <term>proper</term> nouns in <c>nouns</c>. Use the <c>isupper</c> function to
        check if a letter is uppercase.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline><![CDATA[vector<string> proper = {};]]></cline>
      </block>
      <block order="2">
        <cline><![CDATA[for (size_t i = 0; i < nouns.size(); ++i) {]]></cline>
      </block>
      <block order="6">
        <cline> if (isupper(nouns[i][0])) {</cline>
      </block>
      <block order="8">
        <cline>  proper.push_back(nouns[i]);</cline>
      </block>
      <block order="5">
        <cline> }</cline>
        <cline>}</cline>
      </block>
      <block order="9"
             correct="no">
        <cline>if (isupper(nouns[i][1])) { </cline>
      </block>
      <block order="7"
             correct="no">
        <cline>proper.push_back(nouns[i][0]); </cline>
      </block>
      <block order="4"
             correct="no">
        <cline>proper.pop_back(nouns[i]); </cline>
      </block>
      <block order="3"
             correct="no">
        <cline>vector proper = {}; </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="vectors_p10"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Suppose you have the following function <c>howMany</c> and vector <c>exclamations</c> Construct a block of
        code that counts how many times <q>.</q>, <q>!</q>, and <q>?</q> occur in <c>exclamations</c>. Save the
        counts to a vector with <q>.</q> count as the first element, <q>!</q> count as the second,
        and <q>?</q> count as the third. Put the necessary blocks of code in the correct order.</p>
      <program>int howMany(const vector&lt;string&gt;&amp; vec, char let) {
    int count = 0;
    for (size_t i = 0; i &lt; vec.size(); i++) {
        for (size_t c = 0; c &lt; vec[i].size(); c++) {
            if (vec[i][c] == let) {
                count++;
            }
        }
    }
    return count;
}

vector&lt;string&gt; excl = {"what?!", "how???", "fine!", "STOP.", "yay!!!!!", "ugh...!"};</program>
    </statement>
    <blocks>
      <block order="3">
        <cline><![CDATA[vector<char> punc = {'.', '!', '?'};]]></cline>
        <cline><![CDATA[vector<int> counts = {};]]></cline>
      </block>
      <block order="1">
        <cline><![CDATA[for (int i = 0; i < punc.size(); ++i) {]]></cline>
      </block>
      <block order="6">
        <cline> counts.push_back(howMany(excl, punc[i]));</cline>
      </block>
      <block order="5">
        <cline>}</cline>
      </block>
      <block order="4"
             correct="no">
        <cline><![CDATA[vector<string> punc = {".", "!", "?"}; ]]></cline>
        <cline><![CDATA[vector<int> counts = {};]]></cline>
      </block>
      <block order="7"
             correct="no">
        <cline><![CDATA[for (int i = 0; i < excl.size(); ++i) { ]]></cline>
      </block>
      <block order="2"
             correct="no">
        <cline>counts.push_back(howMany(excl, i)); </cline>
      </block>
    </blocks>
  </exercise>
</exercises>