<?xml version="1.0"?>
<section xml:id="chapter10_vector-functions">
  <title>Vector functions</title>
  <p>The best feature of a vector is its resizeability. A vector, once declared, can be resized from
    anywhere within the program. Suppose we have a situation where we input numbers from the user
    and store them in a vector till he inputs <c>-1</c>, and then display them. In such a case, we do
    not know the size of the vector beforehand. So we need wish add new values to the end of a
    vector as the user inputs them. We can use then vector function <c>push_back</c> for that purpose.</p>
  <listing label="vector-from-input">
    <caption>A program that reads in numbers, adding each to a vector, until the user inputs -1.</caption>
  <program>#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

int main() {
  vector&lt;int&gt; values;
  int c, i;
  size_t len;
  cin &gt;&gt; c;

  while (c != -1) {
    values.push_back(c);
    cin &gt;&gt; c;
  }
  len = values.size();
  for (i = 0; i &lt; len; i++) {
    cout &lt;&lt; values[i] &lt;&lt; endl;
  }
}</program>
</listing>
  <note>
    <p><c>push_back</c> adds a specified element to the end of the vector, <c>pop_back</c> removes element from the
      end of a vector.</p>
  </note>
  <listing label="vector_functions_AC_1">
    <caption>
      This active code uses the <c>push_back</c> function to add even numbers less than or equal to 10 to
        the vector <c>values</c>.
    </caption>
    <program xml:id="vector_functions_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

void print_vec(vector<int> vec);

int main() {
    vector<int> values;
    int i = 0;

    while (i <= 10) {
        values.push_back(i);
        i += 2;
    }
    print_vec(values);
}

        ]]></code>
      <tests>

void print_vec(vector&lt;int&gt; vec) {
   size_t i = 0;
   cout &lt;&lt; "[";
   while (i &lt; vec.size()-1) {
       cout &lt;&lt; vec[i] &lt;&lt; ",";
       i++;
   }
   cout &lt;&lt; vec[vec.size()-1];
   cout &lt;&lt; "]" &lt;&lt; endl;
}
</tests>
    </program>
  </listing>
  <exercise label="vector_functions_1">
    <statement>
      <p>Let <term>nums</term> be the vector { 0, 1, 2, 3, 4 }. If we run the command <c>nums.push_back(3)</c>, what
        will be returned by <c>nums.size()</c>?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
          <p>Incorrect! This is the size of the vector before we ran the command.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>6</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>7</p>
        </statement>
        <feedback>
          <p>Incorrect!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>8</p>
        </statement>
        <feedback>
          <p>Incorrect! We are adding the element 3 to the end of the vector, not 3 elements!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="vector_functions_2"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct the <c>make_even</c> function that loops through <c>vec</c>, adds 1 to any elements that are
        odd, and returns the new vector.</p>
    </statement>
    <blocks>
      <block order="10">
        <choice correct="yes">
          <cline><![CDATA[vector<int> make_even(vector<int> vec) {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[void make_even(vector<int> vec) {                         ]]></cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline><![CDATA[   for (size_t i = 0; i < vec.size(); i++) {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[   for (int i = 0; i < vec.size(); i++) {]]></cline>
        </choice>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>      if (vec[i] % 2 == 1) {</cline>
        </choice>
        <choice>
          <cline>      if (i % 2 == 1) {                         </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>         vec[i] += 1;</cline>
          <cline>      }</cline>
        </choice>
        <choice>
          <cline>         i += 1;                         </cline>
          <cline>      }</cline>
        </choice>
      </block>
      <block order="9"
             correct="no">
        <cline>      else {                         </cline>
        <cline>         vec[i] -= 1;</cline>
        <cline>      }</cline>
      </block>
      <block order="7">
        <cline>   }</cline>
        <cline>   return vec;</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="vector_functions_3">
    <statement>
      <p>What does the following code print?</p>
      <program line-numbers="yes">
        <code><![CDATA[
vector<int> numbers(5);
int size = 5;
for (int i = 0; i < size; i++) {
   numbers[i] = i;
}

int end = 4;

for (int i = 0; i < size; i++) {
   numbers[i] = numbers[end];
   end--;
}

for (int i = 0; i < size; i++) {
   cout << numbers[i] << "  ";
}

cout << endl;
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4 3 2 1 0</p>
        </statement>
        <feedback>
          <p>we change the numbers in the first half of the vector before we copy them to the second
            half</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>4 3 2 3 4</p>
        </statement>
        <feedback>
          <p>when <code>i</code> is 3 we copy from <code>end = 1</code> copying the values we
            already changed.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>0 1 2 3 4</p>
        </statement>
        <feedback>
          <p>we change values in the second loop.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>