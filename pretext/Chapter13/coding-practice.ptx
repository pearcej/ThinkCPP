<exercises xml:id="chapter13_coding-practice">
  <title>Coding Practice</title>
  <exercise label="cp_13_1">
    <statement>
      <p>Create the enumerated type Planet, which maps the planets in our solar system to integers
        starting at 1. Make sure to list the planets out in order! (Sadly, Pluto is not a planet :(
        )</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_13_AC_1q">
        <code>
#include &lt;iostream&gt;
using namespace std;

// Write your code for the enumerated type Planet.
        </code>
    </program>
    <solution><p>Below is one way to implement the program. The planets in our solar system
        are Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune.</p> Below is one way
      to implement the program. The planets in our solar system are Mercury, Venus, Earth, Mars,
      Jupiter, Saturn, Uranus, and Neptune. <program xml:id="cp_13_AC_1a">
        <code>
#include &lt;iostream&gt;
using namespace std;

enum Planet { MERCURY = 1, VENUS, EARTH, MARS, JUPITER, SATURN, URANUS, NEPTUNE };
        </code>
    </program>
    </solution>
  </exercise>

  <exercise label="cp_13_AC_2_q">
    <statement>
      <p>How long is a year on other planets? Let&#8217;s write a program that prints out the number
        of days in a year on each planet using a switch statement. These values are, in planetary
        order, 88 days, 225 days, 365 days, 687 days, 4333 days, 10759 days, 30687 days, and 60190
        days. Print out this information in the following format: Planet <c>planet</c> has <c>numDays</c> number
        of days in a year! Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_13_AC_2q_editor">
        <code>
#include &lt;iostream&gt;
using namespace std;

enum Planet { MERCURY = 1, VENUS, EARTH, MARS, JUPITER, SATURN, URANUS, NEPTUNE };

int main() {
    Planet p = JUPITER;
    // Write your code here.
}
        </code>
    </program>
    <hint>
      <activity label="cp_13_AC_2_pp">
        <statement>
          <p>How long is a year on other planets? Let&#8217;s write a program that prints out the
            number of days in a year on each planet using a switch statement. These values are, in
            planetary order, 88 days, 225 days, 365 days, 687 days, 4333 days, 10759 days, 30687
            days, and 60190 days. Print out this information in the following format: Planet <c>planet</c>
            has <c>numDays</c> number of days in a year! Use the lines to construct the code, then go back
            to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="14">
            <cline>enum Planet { MERCURY = 1, VENUS, EARTH, MARS, JUPITER, SATURN, URANUS, NEPTUNE };</cline>
          </block>
          <block order="11">
            <cline>int main() {</cline>
          </block>
          <block order="8">
            <cline>    Planet p = VENUS;</cline>
          </block>
          <block order="6">
            <cline>    switch (p) {</cline>
          </block>
          <block order="9">
            <cline>        case 1:</cline>
            <cline>            cout &lt;&lt; "Planet Mercury has 88 number of days in a year!" &lt;&lt; endl;</cline>
            <cline>            break;</cline>
          </block>
          <block order="7">
            <cline>        case 2:</cline>
            <cline>            cout &lt;&lt; "Planet Venus has 225 number of days in a year!" &lt;&lt; endl;</cline>
            <cline>            break;</cline>
          </block>
          <block order="1">
            <cline>        case 3:</cline>
            <cline>            cout &lt;&lt; "Planet Earth has 365 number of days in a year!" &lt;&lt; endl;</cline>
            <cline>            break;</cline>
          </block>
          <block order="5">
            <cline>        case 4:</cline>
            <cline>            cout &lt;&lt; "Planet Mars has 687 number of days in a year!" &lt;&lt; endl;</cline>
            <cline>            break;</cline>
          </block>
          <block order="12">
            <cline>        case 5:</cline>
            <cline>            cout &lt;&lt; "Planet Jupiter has 4333 number of days in a year!" &lt;&lt; endl;</cline>
            <cline>            break;</cline>
          </block>
          <block order="10">
            <cline>        case 6:</cline>
            <cline>            cout &lt;&lt; "Planet Saturn has 10759 number of days in a year!" &lt;&lt; endl;</cline>
            <cline>            break;</cline>
          </block>
          <block order="13">
            <cline>        case 7:</cline>
            <cline>            cout &lt;&lt; "Planet Uranus has 30687 number of days in a year!" &lt;&lt; endl;</cline>
            <cline>            break;</cline>
          </block>
          <block order="3">
            <cline>        case 8:</cline>
            <cline>            cout &lt;&lt; "Planet Neptune has 60190 number of days in a year!" &lt;&lt; endl;</cline>
            <cline>            break;</cline>
          </block>
          <block order="2">
            <cline>    }</cline>
          </block>
          <block order="4">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>


  <exercise label="cp_13_3">
    <statement>
      <p>A Bingo board has 25 Spaces in a matrix-like grid. A Space has a number value randomly
        selected from 1 to 75 and can either be filled or not. Write the struct definitions for <c>Space</c>
        and <c>BingoBoard</c>.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_13_AC_3q">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

// Write your code for the struct Space here.

// Write your code for the struct BingoBoard here.
        </code>
    </program>
    <solution><p>Below is one way to implement the program. We declare the <c>Space</c> and <c>BingoBoard</c>
      struct and create the instance variables in order. Make sure to set <c>is_filled</c> to <c>false</c>!</p>
      Below is one way to implement the program. We declare the Space and BingoBoard struct and
      create the instance variables in order. Make sure to set is_filled to false! <program xml:id="cp_13_AC_3a">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

struct Space {
    int value;
    bool is_filled;
};

struct BingoBoard {
    vector&lt;vector&lt;Space&gt; &gt; board;
};
        </code>
    </program>
    </solution>
  </exercise>

  <exercise label="cp_13_AC_4_q">
    <statement>
      <p>Now let&#8217;s generate a <c>BingoBoard</c>! We want to fill the 25 <c>Space</c>s on the <c>BingoBoard</c> with
        random values from 1 to 75 without repititon. To do this, we&#8217;ll make a <c>vector</c> of
        numbers from 1 to 75 and shuffle it using the same method as shown in this chapter. Then we
        will select the first 25 values for the 25 spaces on the <c>BingoBoard</c>. We will do this entire
        process in multiple steps. First, write the function <c>randomInt</c>, which generates a random value
        between low and high, inclusive. Be sure to include the relevant libraries! Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_13_AC_4q_editor">
        <code>
#include &lt;iostream&gt;
// Add any relevant libraries here.
using namespace std;

// Write your code for the randomInt function here.
        </code>
    </program>
    <hint>
      <activity label="cp_13_AC_4_pp">
        <statement>
          <p>Now let&#8217;s generate a <c>BingoBoard</c>! We want to fill the 25 <c>Space</c>s on the <c>BingoBoard</c> with
            random values from 1 to 75 without repititon. To do this, we&#8217;ll make a <c>vector</c> of
            numbers from 1 to 75 and shuffle it using the same method as shown in this chapter. Then
            we will select the first 25 values for the 25 spaces on the <c>BingoBoard</c>. We will do this
            entire process in multiple steps. First, write the function <c>randomInt</c>, which generates a
            random value between low and high, inclusive. Be sure to include the relevant libraries!
            Use the lines to construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="2">
            <cline>int randomInt(int low, int high) {</cline>
          </block>
          <block order="3">
            <cline>   srand(time(NULL));</cline>
          </block>
          <block order="4">
            <cline>   int x = random();</cline>
          </block>
          <block order="6">
            <cline>   int y = x % (high - low + 1) + low;</cline>
          </block>
          <block order="5">
            <cline>   return y;</cline>
          </block>
          <block order="1">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_13_5">
    <statement>
      <p>Now we need a way to swap the values at two indices in a vector. Write the function <c>swapValues</c>,
        which takes a <c>vector</c> of <c>int</c>s and two indices as parameters.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_13_AC_5q">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

// Write your code for the swapValues function here.
        </code>
    </program>
    <solution><p>Below is one way to implement the program. We store the value at <c>index1</c> in a <c>temp</c>
      variable, replace the value at <c>index1</c> with the value at <c>index2</c>, and then finally replace the
      value at <c>index2</c> with the value of <c>temp</c>. Make sure to pass <c>vec</c> by reference!</p> Below
      is one way to implement the program. We store the value at index1 in a temp variable, replace
      the value at index1 with the value at index2, and then finally replace the value at index2
      with the value of temp. Make sure to pass vec by reference! <program xml:id="cp_13_AC_5a">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

void swapValues (vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}
        </code>
    </program>
    </solution>
  </exercise>

  <exercise label="cp_13_AC_6_q">
    <statement>
      <p>Now that we have the functions <c>randomInt</c> and <c>swapValues</c>, we can write the function <c>generateRandVec</c>. <c>generateRandVec</c>
        creates a <c>vector</c> with values from 1 to 75, shuffles it using <c>randomInt</c> and <c>swapValues</c>, and
        returns the shuffled <c>vector</c>. Check the hint below for help with the construction of
        the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_13_AC_6q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
#include &lt;numeric&gt;
using namespace std;

// Write your code for the generateRandVec function here.
        </code>
    </program>
    <hint>
      <activity label="cp_13_AC_6_pp">
        <statement>
          <p>Now that we have the functions <c>randomInt</c> and <c>swapValues</c>, we can write the function <c>generateRandVec</c>. <c>generateRandVec</c>
            creates a <c>vector</c> with values from 1 to 75, shuffles it using <c>randomInt</c> and <c>swapValues</c>, and
            returns the shuffled <c>vector</c>. Use the lines to construct the code, then go back to
            complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="4">
            <cline>vector&lt;int&gt; generateRandVec() {</cline>
          </block>
          <block order="1">
            <cline>   vector&lt;int&gt; vec(75);</cline>
          </block>
          <block order="6">
            <cline>   iota(vec.begin(), vec.end(), 1);</cline>
          </block>
          <block order="8">
            <cline>   for (size_t i = 0; i &lt; vec.size(); ++i) {</cline>
          </block>
          <block order="2">
            <cline>       int x = randomInt(i, vec.size() - 1);</cline>
          </block>
          <block order="3">
            <cline>       swapValues(vec, i, x);</cline>
          </block>
          <block order="9">
            <cline>   }</cline>
          </block>
          <block order="5">
            <cline>   return vec;</cline>
          </block>
          <block order="7">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_13_7">
    <statement>
      <p>We can now fill our <c>BingoBoard</c> with values! Write the <c>BingoBoard</c> member function <c>makeBoard</c>. Use the <c>generateRandVec</c>
        function and select the first 25 values to fill up the board. Make sure to create a free
        space in the middle of the board! Set the value of the free space to 0 and <c>is_filled</c> to <c>true</c>.
        All other spaces should have <c>is_filled</c> set to <c>false</c>.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_13_AC_7q">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
#include &lt;numeric&gt;
using namespace std;

struct Space {
    int value;
    bool is_filled;
};

struct BingoBoard {
    vector&lt;vector&lt;Space&gt; &gt; board;
    void makeBoard ();
};

int randomInt (int low, int high);
void swapValues (vector&lt;int&gt; &amp;vec, int index1, int index2);
vector&lt;int&gt; generateRandVec ();

// Write your code for the makeBoard function here.
        </code>
<tests>
int randomInt(int low, int high) {
    srand(time(NULL));
    int x = random();
    int y = x % (high - low + 1) + low;
    return y;
}

void swapValues(vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}

vector&lt;int&gt; generateRandVec() {
    vector&lt;int&gt; vec(75);
    iota(vec.begin(), vec.end(), 1);
    for (size_t i = 0; i &lt; vec.size(); ++i) {
        int x = randomInt(i, vec.size() - 1);
        swapValues(vec, i, x);
    }
    return vec;
}
</tests>

    </program>
    <solution><p>Below is one way to implement the program. First we need to initialize the board to
      the correct dimensions. Then, we use <c>generateRandVec</c> to create a <c>vector</c> of random values from 1 to
      75. Afterwards, we set the values of the 25 <c>Space</c>s to the first 25 values in the random <c>vector</c>.
      Lastly, we set the middle <c>Space</c> to 0 and set its <c>is_filled</c> to <c>true</c>.</p> Below is one way to
      implement the program. First we need to initialize the board to the correct dimensions. Then,
      we use generateRandVec to create a vector of random values from 1 to 75. Afterwards, we set
      the values of the 25 Spaces to the first 25 values in the random vector. Lastly, we set the
      middle Space to 0 and set its is_filled to true. <program xml:id="cp_13_AC_7a">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
#include &lt;numeric&gt;
using namespace std;

struct Space {
    int value;
    bool is_filled;
};

struct BingoBoard {
    vector&lt;vector&lt;Space&gt; &gt; board;
    void makeBoard ();
};

int randomInt (int low, int high);
void swapValues (vector&lt;int&gt; &amp;vec, int index1, int index2);
vector&lt;int&gt; generateRandVec ();

void BingoBoard::makeBoard() {
    // Initialize board
    Space s = {0, false};
    vector&lt;Space&gt; cols(5, s);
    for (size_t i = 0; i &lt; 5; ++i) {
        board.push_back(cols);
    }

    // Fill board with random values
    vector&lt;int&gt; vec = generateRandVec();
    int count = 0;
    for (size_t row = 0; row &lt; board.size(); ++row) {
        for (size_t col = 0; col &lt; board[row].size(); ++col) {
        board[row][col].value = vec[count];
        ++count;
        }
    }

    // Create free space
    board[2][2].value = 0;
    board[2][2].is_filled = true;
}
        </code>
<tests>
int randomInt(int low, int high) {
    srand(time(NULL));
    int x = random();
    int y = x % (high - low + 1) + low;
    return y;
}

void swapValues(vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}

vector&lt;int&gt; generateRandVec() {
    vector&lt;int&gt; vec(75);
    iota(vec.begin(), vec.end(), 1);
    for (size_t i = 0; i &lt; vec.size(); ++i) {
        int x = randomInt(i, vec.size() - 1);
        swapValues(vec, i, x);
    }
    return vec;
}
</tests>

    </program>
    </solution>
  </exercise>

  <exercise label="cp_13_AC_8_q">
    <statement>
      <p>Let&#8217;s print out our <c>BingoBoard</c>! Write the <c>BingoBoard</c> member function <c>printBoard</c>. Insert tabs
        between each value in each row to make the board print out neater. Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_13_AC_8q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;cstdlib&gt;
#include &lt;numeric&gt;
using namespace std;

struct Space {
    int value;
    bool is_filled;
};

struct BingoBoard {
    vector&lt;vector&lt;Space&gt; &gt; board;
    void makeBoard ();
    void printBoard ();
};

int randomInt (int low, int high);
void swapValues (vector&lt;int&gt; &amp;vec, int index1, int index2);
vector&lt;int&gt; generateRandVec ();

// Write your code for the printBoard function here.

int main() {
    BingoBoard bingo;
    bingo.makeBoard ();
    bingo.printBoard ();
}
        </code>
<tests>
int randomInt(int low, int high) {
    srand(time(NULL));
    int x = random();
    int y = x % (high - low + 1) + low;
    return y;
}

void swapValues(vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}

vector&lt;int&gt; generateRandVec() {
    vector&lt;int&gt; vec(75);
    iota(vec.begin(), vec.end(), 1);
    for (size_t i = 0; i &lt; vec.size(); ++i) {
        int x = randomInt(i, vec.size() - 1);
        swapValues(vec, i, x);
    }
    return vec;
}

void BingoBoard::makeBoard() {
    // Initialize board
    Space s = {0, false};
    vector&lt;Space&gt; cols(5, s);
    for (size_t i = 0; i &lt; 5; ++i) {
        board.push_back(cols);
    }

    // Fill board with random values
    vector&lt;int&gt; vec = generateRandVec();
    int count = 0;
    for (size_t row = 0; row &lt; board.size(); ++row) {
        for (size_t col = 0; col &lt; board[row].size(); ++col) {
        board[row][col].value = vec[count];
        ++count;
        }
    }

    // Create free space
    board[2][2].value = 0;
    board[2][2].is_filled = true;
}
</tests>

    </program>
    <hint>
      <activity label="cp_13_AC_8_pp">
        <statement>
          <p>Let&#8217;s print out our <c>BingoBoard</c>! Write the <c>BingoBoard</c> member function <c>printBoard</c>. Insert
            tabs between each value in each row to make the board print out neater. Use the lines to
            construct the code, then go back to complete the Activecode.</p>
        </statement>
        <blocks>
          <block order="6">
            <cline>void BingoBoard::printBoard () {</cline>
          </block>
          <block order="1">
            <cline>    for (size_t j = 0; j &lt; board.size(); j++) {</cline>
          </block>
          <block order="4">
            <cline>        for (size_t i = 0; i &lt; board[j].size(); i++) {</cline>
          </block>
          <block order="3">
            <cline>            cout &lt;&lt; board[j][i].value &lt;&lt; "\t";</cline>
          </block>
          <block order="5">
            <cline>        }</cline>
          </block>
          <block order="2">
            <cline>        cout &lt;&lt; endl;</cline>
          </block>
          <block order="8">
            <cline>    }</cline>
          </block>
          <block order="7">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

  <exercise label="cp_13_9">
    <statement>
      <p>Bubble sort is a method of sorting that involves repeatedly swapping the adjacent elements
        if they are in the wrong order. For example, let&#8217;s say we have the <c>vector</c> with
        elements {3, 2, 4, 1}. On the first pass, we take a look at the first two elements, 3 and 2.
        Since 3 is bigger than 2, we swap them. Thus, the <c>vector</c> now looks like {2, 3, 4, 1}. Next,
        we look at the next two elements, 3 and 4. Since 3 is less than 4, we don&#8217;t swap.
        Lastly, we look at the last two elements, 4 and 1. Since 4 is greater than 1, we swap the.
        Thus the <c>vector</c> now looks like {2, 3, 1, 4}. Now we restart and look at the first two
        elements again and the process continues. This way, the biggest elements
        &#8220;bubble&#8221; to the back. Write the function <c>bubbleSort</c>, which takes a <c>vector</c> as a
        parameter and sorts it. Feel free to use the provided <c>swapValues</c> function.</p>
    </statement>
    <program interactive="activecode"
             xml:id="cp_13_AC_9q">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

void swapValues(vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}

// Write your code for the bubbleSort function here.

int main() {
    vector&lt;int&gt; vec = { 5, 1, 4, 2, 8 };
    bubbleSort (vec);
    for (size_t i = 0; i &lt; vec.size(); ++i) {
        cout &lt;&lt; vec[i] &lt;&lt; " ";
    }
}
        </code>
    </program>
    <solution><p>Below is one way to implement the program. We must loop through all elements in the
      vector. Since we know the last <c>i</c> elements are already in place, our inner loop only goes
      up to <c>vec.size() - 1 - i</c>. If the next element is greater than the current element, we swap the two
      elements.</p> Below is one way to implement the program. We must loop through all elements in
      the vector. Since we know the last i elements are already in place, our inner loop only goes
      up to vec.size() - 1 - i. If the next element is greater than the current element, we swap the
      two elements. <program xml:id="cp_13_AC_9a">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

void swapValues(vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}

void bubbleSort(vector&lt;int&gt; &amp;vec) {
    for (size_t i = 0; i &lt; vec.size() - 1; ++i) {
        for (size_t j = 0; j &lt; vec.size() - 1 - i; ++j) {
            if (vec[j] &gt; vec[j + 1]) {
                swapValues(vec, j, j + 1);
            }
        }
    }
}

int main() {
    vector&lt;int&gt; vec = { 5, 1, 4, 2, 8 };
    bubbleSort (vec);
    for (size_t i = 0; i &lt; vec.size(); ++i) {
        cout &lt;&lt; vec[i] &lt;&lt; " ";
    }
}
        </code>
    </program>
    </solution>
  </exercise>

  <exercise label="cp_13_AC_10_q">
    <statement>
      <p>You may have noticed that in some cases, our version of <c>bubbleSort</c> does an unnecessary amount
        of work. For example, if our <c>vector</c> was {1, 2, 3, 5, 4}, <c>bubbleSort</c> would swap 4 and 5, but
        then keep going even though our <c>vector</c> is already in order! We can save some work by
        including a <c>bool</c> called <c>is_changed</c>. If we swap values during a pass, we set <c>is_changed</c> to true.
        If nothing has been swapped, then <c>is_changed</c> stays false, and we know to break out of the loop
        since our <c>vector</c> is already sorted. Write the function <c>fastBubbleSort</c>, which is <c>bubbleSort</c> with this
        modification. Check the hint below for help with the construction of the code.</p>

    </statement>
    <program interactive="activecode"
             xml:id="cp_13_AC_10q_editor">
        <code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

void swapValues(vector&lt;int&gt; &amp;vec, int index1, int index2) {
    int temp = vec[index1];
    vec[index1] = vec[index2];
    vec[index2] = temp;
}

// Write your code for the fastBubbleSort function here.

int main() {
    vector&lt;int&gt; vec = { 1, 3, 5, 4, 6, 8, 9 };
    fastBubbleSort (vec);
    for (size_t i = 0; i &lt; vec.size(); ++i) {
        cout &lt;&lt; vec[i] &lt;&lt; " ";
    }
}
        </code>
    </program>
    <hint>
      <activity label="cp_13_AC_10_pp">
        <statement>
          <p>You may have noticed that in some cases, our version of <c>bubbleSort</c> does an unnecessary
            amount of work. For example, if our <c>vector</c> was {1, 2, 3, 5, 4}, <c>bubbleSort</c> would swap 4
            and 5, but then keep going even though our <c>vector</c> is already in order! We can save some
            work by including a <c>bool</c> called <c>is_changed</c>. If we swap values during a pass, we set <c>is_changed</c>
            to true. If nothing has been swapped, then <c>is_changed</c> stays false, and we know to break out
            of the loop since our <c>vector</c> is already sorted. Write the function <c>fastBubbleSort</c>, which is <c>bubbleSort</c>
            with this modification. Use the lines to construct the code, then go back to complete
            the Activecode.</p>
        </statement>
        <blocks>
          <block order="13">
            <cline>void fastBubbleSort(vector&lt;int&gt; &amp;vec) {</cline>
          </block>
          <block order="7">
            <cline>    bool is_changed = false;</cline>
          </block>
          <block order="1">
            <cline>    for (size_t i = 0; i &lt; vec.size() - 1; ++i) {</cline>
          </block>
          <block order="3">
            <cline>        for (size_t j = 0; j &lt; vec.size() - 1 - i; ++j) {</cline>
          </block>
          <block order="11">
            <cline>            if (vec[j] &gt; vec[j + 1]) {</cline>
          </block>
          <block order="4">
            <cline>                swapValues(vec, j, j + 1);</cline>
          </block>
          <block order="5">
            <cline>                is_changed = true;</cline>
          </block>
          <block order="6">
            <cline>            }</cline>
          </block>
          <block order="10">
            <cline>            if (is_changed == false) {</cline>
          </block>
          <block order="12">
            <cline>                break;</cline>
          </block>
          <block order="8">
            <cline>            }</cline>
          </block>
          <block order="2">
            <cline>        }</cline>
          </block>
          <block order="14">
            <cline>    }</cline>
          </block>
          <block order="9">
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>

</exercises>