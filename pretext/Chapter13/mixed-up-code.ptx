<?xml version="1.0"?>
<exercises xml:id="chapter13_mixed-up-code-practice">
  <title>Mixed Up Code Practice</title>
  <exercise label="mucp_13_1"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Below is the enumerated type Days which maps days of the week to integers
        starting at 1. Use a switch statement to determine whether or not day
        is a weekend or not. Check for cases in numerical order.</p>
    </statement>
    <blocks>
      <block order="13">
        <cline>enum Day { MON = 1, TUE, WED, THU, FRI, SAT, SUN };</cline>
      </block>
      <block order="15">
        <cline>int main() {</cline>
      </block>
      <block order="14">
        <cline>   Day day = SUN;</cline>
      </block>
      <block order="8">
        <cline>   switch (day &gt; 5) {</cline>
      </block>
      <block order="2">
        <cline>      case 0:</cline>
      </block>
      <block order="1">
        <cline><![CDATA[         cout << "It is not the weekend :(" << endl;]]></cline>
      </block>
      <block order="12">
        <cline>         break;</cline>
      </block>
      <block order="6">
        <cline>      case 1:</cline>
      </block>
      <block order="9">
        <cline><![CDATA[         cout << "It is the weekend :)" << endl;]]></cline>
      </block>
      <block order="10">
        <cline>         break;</cline>
      </block>
      <block order="5">
        <cline>      default:</cline>
      </block>
      <block order="3">
        <cline><![CDATA[         cout << "Invalid input." << endl;]]></cline>
      </block>
      <block order="7">
        <cline>         break;</cline>
      </block>
      <block order="11">
        <cline>   }</cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_13_2"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Use a switch statement to check and print out whether a number is divisible by two. Prompt
        and get input from the user. If input isn't valid, print out the default statement <q>Invalid
        input.</q> Check for cases in numerical order.</p>
    </statement>
    <blocks>
      <block order="10">
        <cline>int main() {</cline>
      </block>
      <block order="15">
        <cline>   int input;</cline>
      </block>
      <block order="12">
        <cline><![CDATA[   cout << "Please enter an integer: ";]]></cline>
      </block>
      <block order="11">
        <cline>   cin &gt;&gt;  input;</cline>
      </block>
      <block order="2">
        <cline>   switch (input % 2) {</cline>
      </block>
      <block order="9">
        <cline>      case 0:</cline>
      </block>
      <block order="4">
        <cline><![CDATA[         cout << input << " is even!" << endl;]]></cline>
      </block>
      <block order="1">
        <cline>         break;</cline>
      </block>
      <block order="7">
        <cline>      case 1:</cline>
      </block>
      <block order="16">
        <cline><![CDATA[         cout << input << " is odd!" << endl;]]></cline>
      </block>
      <block order="3">
        <cline>         break;</cline>
      </block>
      <block order="14">
        <cline>      default:</cline>
      </block>
      <block order="8">
        <cline><![CDATA[         cout << "Invalid input." << endl;]]></cline>
      </block>
      <block order="5">
        <cline>         break;</cline>
      </block>
      <block order="13">
        <cline>   }</cline>
      </block>
      <block order="6">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_13_3"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Use a switch statement to check and print out the maximum between two numbers. Prompt and
        get input from the user for two integers. If input isn't valid, print out the default
        statement <q>Invalid input.</q> Check for cases in numerical order.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>int main() {</cline>
      </block>
      <block order="18">
        <cline>   int input1;</cline>
      </block>
      <block order="16">
        <cline>   int input2;</cline>
      </block>
      <block order="5">
        <cline><![CDATA[   cout << "Please enter first integer: ";]]></cline>
      </block>
      <block order="1">
        <cline>   cin &gt;&gt;  input1;</cline>
      </block>
      <block order="9">
        <cline><![CDATA[   cout << "Please enter second integer: ";]]></cline>
      </block>
      <block order="11">
        <cline>   cin &gt;&gt;  input2;</cline>
      </block>
      <block order="10">
        <cline>   switch (input1 &gt; input2) {</cline>
      </block>
      <block order="12">
        <cline>      case 0:</cline>
      </block>
      <block order="4">
        <cline><![CDATA[         cout << "The maximum is " << input2 << endl;]]></cline>
      </block>
      <block order="13">
        <cline>         break;</cline>
      </block>
      <block order="14">
        <cline>      case 1:</cline>
      </block>
      <block order="6">
        <cline><![CDATA[         cout << "The maximum is " << input1 << endl;]]></cline>
      </block>
      <block order="15">
        <cline>      default:</cline>
      </block>
      <block order="8">
        <cline><![CDATA[         cout << "Invalid input." << endl;]]></cline>
      </block>
      <block order="3">
        <cline>         break;</cline>
      </block>
      <block order="17">
        <cline>   }</cline>
      </block>
      <block order="7">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_13_4"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Below is the pseudocode for the implementation of mergeSort.
        Put the blocks in the correct order!</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>Deck Deck::mergeSort() const {</cline>
      </block>
      <block order="3"
             correct="no">
        <cline>Deck::mergeSort() const {  </cline>
      </block>
      <block order="4">
        <cline>   find the midpoint of the deck</cline>
      </block>
      <block order="5">
        <cline>   divide the deck into two subdecks</cline>
      </block>
      <block order="7">
        <cline>   sort the subdecks using sort</cline>
      </block>
      <block order="1">
        <cline>   merge the two halves and return the result</cline>
      </block>
      <block order="6"
             correct="no">
        <cline>   use a for loop to traverse half the deck  </cline>
      </block>
      <block order="9">
        <cline>   divide each subdeck into two more subdecks</cline>
      </block>
      <block order="8">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_13_5"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's revisit the Dictionary data structure defined in the previous section.
        Write the struct definitions for Entry, which has member variables word and page,
        and for Dictionary, which has a vector of Entries. Put the necessary
        blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>struct Entry {</cline>
      </block>
      <block order="10">
        <cline>   string word;</cline>
      </block>
      <block order="7">
        <cline>   int page;</cline>
      </block>
      <block order="8"
             correct="no">
        <cline>   Entry word;  </cline>
      </block>
      <block order="9">
        <cline>};</cline>
      </block>
      <block order="1">
        <cline>struct Dictionary {</cline>
      </block>
      <block order="4">
        <cline><![CDATA[   vector<Entry> entries;]]></cline>
      </block>
      <block order="6"
             correct="no">
        <cline><![CDATA[   vector<Word> entries;  ]]></cline>
      </block>
      <block order="3"
             correct="no">
        <cline>   Entry entries;  </cline>
      </block>
      <block order="5">
        <cline>};</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_13_6"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Assume our dictionary is currently unsorted. Let's write a Dictionary member function find
        that takes a string word as a parameter and returns the index of its corresponding
        entry. If the word isn't in the dictionary, return -1.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="1">
        <choice correct="yes">
          <cline>int Dictionary::find(string word) {</cline>
        </choice>
        <choice>
          <cline>int Dictionary::find(Entry word) {  </cline>
        </choice>
      </block>
      <block order="8">
        <cline><![CDATA[   for (size_t i = 0; i < entries.size(); ++i) {]]></cline>
      </block>
      <block order="6"
             correct="no">
        <cline><![CDATA[   for (size_t i = 1; i < entries.size(); ++i) {  ]]></cline>
      </block>
      <block order="5"
             correct="no">
        <cline><![CDATA[   for (size_t i = 1; i < Dictionary.entries.size(); ++i) {  ]]></cline>
      </block>
      <block order="2">
        <cline>      if (entries[i].word == word) {</cline>
      </block>
      <block order="3"
             correct="no">
        <cline>      if (i.word == word) {  </cline>
      </block>
      <block order="12">
        <cline>         return i;</cline>
      </block>
      <block order="10">
        <cline>      }</cline>
      </block>
      <block order="7">
        <cline>   }</cline>
      </block>
      <block order="4">
        <cline>   return -1;</cline>
      </block>
      <block order="9">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_13_7"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Of course, all dictionaries are in some sort of order. In order to do this, we
        must first write the Dictionary member function findFirstWord, which takes a starting
        index as a parameter returns the index of the Entry with the highest priority alphabetically
        (i.e. the Entry with a word that would come first in the alphabet).
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="6">
        <choice correct="yes">
          <cline>int Dictionary::findFirstWord(int start) {</cline>
        </choice>
        <choice>
          <cline>int Dictionary::findFirstWord(string word) {  </cline>
        </choice>
      </block>
      <block order="12">
        <cline>   int min = start;</cline>
      </block>
      <block order="3">
        <cline><![CDATA[   for (size_t i = start; i < entries.size(); ++i) {]]></cline>
      </block>
      <block order="1"
             correct="no">
        <cline><![CDATA[   for (size_t i = 0; i < entries.size(); ++i) {  ]]></cline>
      </block>
      <block order="4">
        <cline><![CDATA[      if (entries[i].word < entries[min].word) {]]></cline>
      </block>
      <block order="7"
             correct="no">
        <cline>      if (entries[i].word &gt; entries[min].word) {  </cline>
      </block>
      <block order="10">
        <cline>         min = i;</cline>
      </block>
      <block order="9">
        <cline>      }</cline>
      </block>
      <block order="2">
        <cline>   }</cline>
      </block>
      <block order="5">
        <cline>   return min;</cline>
      </block>
      <block order="11">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_13_8"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>We also need a swap function. Write the Dictionary member function
        swap which takes two indices as parameters and swaps the Entries
        at those indices.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="2">
        <choice correct="yes">
          <cline>void Dictionary::swap(int a, int b) {</cline>
        </choice>
        <choice>
          <cline>void Dictionary::swap() {  </cline>
        </choice>
      </block>
      <block order="1">
        <cline>   Entry temp = entries[a];</cline>
      </block>
      <block order="5">
        <cline>   entries[a] = entries[b];</cline>
      </block>
      <block order="6">
        <cline>   entries[b] = temp;</cline>
      </block>
      <block order="3">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_13_9"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Now let's write the Dictionary member function alphabetize, which
        sorts the Entries in the Dictionary in alphabetical order. Use
        the findFirstWord and swap functions we defined earlier!
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="1">
        <choice correct="yes">
          <cline>void Dictionary::alphabetize() {</cline>
        </choice>
        <choice>
          <cline>int Dictionary::alphabetize() {  </cline>
        </choice>
      </block>
      <block order="4">
        <cline><![CDATA[   for (size_t i = 0; i < entries.size(); ++i) {]]></cline>
      </block>
      <block order="3"
             correct="no">
        <cline><![CDATA[   for (size_t i = 0; i < entries.size() - 1; ++i) {  ]]></cline>
      </block>
      <block order="2">
        <cline>      int min = findFirstWord (i);</cline>
      </block>
      <block order="9"
             correct="no">
        <cline>      int min = findFirstWord (0);  </cline>
      </block>
      <block order="10">
        <cline>      swap (i, min);</cline>
      </block>
      <block order="6"
             correct="no">
        <cline>      swap (0, min);  </cline>
      </block>
      <block order="7">
        <cline>   }</cline>
      </block>
      <block order="8">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_13_10"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's check to see if our sorting worked! Write the Dictionary
        member function printDictionary, which prints out the word in each
        Entry.
        Put the necessary blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>void Dictionary::printDictionary() {</cline>
      </block>
      <block order="1">
        <cline><![CDATA[   for (size_t i = 0; i < entries.size(); ++i) {]]></cline>
      </block>
      <block order="7">
        <cline><![CDATA[      cout << entries[i].word << endl;]]></cline>
      </block>
      <block order="3"
             correct="no">
        <cline><![CDATA[      cout << entries[i].Entry << endl;  ]]></cline>
      </block>
      <block order="5"
             correct="no">
        <cline><![CDATA[      cout << Entry.word << endl;  ]]></cline>
      </block>
      <block order="4">
        <cline>   }</cline>
      </block>
      <block order="6">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</exercises>