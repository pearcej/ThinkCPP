<?xml version="1.0"?>
<section xml:id="chapter13_activecode-exercises">
  <title>Activecode Exercises</title>
  <p>Answer the following <term>Activecode</term> questions to assess what you have learned in this chapter.</p>
  <exercise label="XXX">
    <statement>
      <p>Write the enumerated type <c>Days</c> which maps days of the week to integers
                    starting at 1. Use a switch statement to determine whether or not day
                    is a weekend or not. Check for cases in numerical order.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_13_1_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to use a switch statement to classify a day of the week.

    
    <program xml:id="mucp_13_1_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

enum Day { MON = 1, TUE, WED, THU, FRI, SAT, SUN };

int main() {
    Day day = SUN;
    switch (day > 5) {
        case 0:
            cout << "It is not the weekend :(" << endl;
            break;
        case 1:
            cout << "It is the weekend :)" << endl;
            break;
        default:
            cout << "Invalid input." << endl;
            break;
    }
}
        ]]></code></program>

            

<exercise label="mucp_13_1_ac_a"><statement><p>Below is one way to use a switch statement to classify a day of the week.</p></statement><program xml:id="mucp_13_1_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

enum Day { MON = 1, TUE, WED, THU, FRI, SAT, SUN };

int main() {
    Day day = SUN;
    switch (day > 5) {
        case 0:
            cout << "It is not the weekend :(" << endl;
            break;
        case 1:
            cout << "It is the weekend :)" << endl;
            break;
        default:
            cout << "Invalid input." << endl;
            break;
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Use a switch statement to check and print out whether a number is divisible by two.
                    Prompt and get input from the user. If input isn't valid,
                    print out the default statement <q>Invalid input.</q> Check for cases in numerical order.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_13_2_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to use a switch statement to check and print out whether a number is divisible by
                    two.

    
    <program xml:id="mucp_13_2_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int input;
    cout << "Please enter an integer: ";
    cin >> input;
    switch (input % 2) {
        case 0:
            cout << input << " is even!" << endl;
            break;
        case 1:
            cout << input << " is odd!" << endl;
            break;
        default:
            cout << "Invalid input." << endl;
            break;
    }
}
        ]]></code></program>

            

<exercise label="mucp_13_2_ac_a"><statement><p>Below is one way to use a switch statement to check and print out whether a number is divisible by
                    two.</p></statement><program xml:id="mucp_13_2_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int input;
    cout << "Please enter an integer: ";
    cin >> input;
    switch (input % 2) {
        case 0:
            cout << input << " is even!" << endl;
            break;
        case 1:
            cout << input << " is odd!" << endl;
            break;
        default:
            cout << "Invalid input." << endl;
            break;
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Use a switch statement to check and print out the maximum between two numbers.
                    Prompt and get input from the user for two integers. If input isn't valid,
                    print out the default statement <q>Invalid input.</q> Check for cases in numerical order.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_13_3_ac_q_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to use a switch statement to check and print out the maximum between two numbers.

    
    <program xml:id="mucp_13_3_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int input1;
    int input2;
    cout << "Please enter first integer: ";
    cin >> input1;
    cout << "Please enter second integer: ";
    cin >> input2;
    switch (input1 > input2) {
        case 0:
            cout << "The maximum is " << input2 << endl;
            break;
        case 1:
            cout << "The maximum is " << input1 << endl;
        default:
            cout << "Invalid input." << endl;
            break;
    }
}
        ]]></code></program>

            

<exercise label="mucp_13_3_ac_a"><statement><p>Below is one way to use a switch statement to check and print out the maximum between two numbers.</p></statement><program xml:id="mucp_13_3_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    int input1;
    int input2;
    cout << "Please enter first integer: ";
    cin >> input1;
    cout << "Please enter second integer: ";
    cin >> input2;
    switch (input1 > input2) {
        case 0:
            cout << "The maximum is " << input2 << endl;
            break;
        case 1:
            cout << "The maximum is " << input1 << endl;
        default:
            cout << "Invalid input." << endl;
            break;
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Write the pseudocode for the implementation of <c>mergeSort</c>.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_13_4_ac_q_editor">
      <code>
// YOUR PSEUDOCODE HERE
        </code>
    </program>
    <solution>


    
                Below is one way to write the pseudocode of mergeSort.

    
    <program xml:id="mucp_13_4_ac_a_editor" line-numbers="yes"><code>
Deck Deck::mergeSort() const {
    find the midpoint of the deck
    divide the deck into two subdecks
    sort the subdecks using sort
    merge the two halves and return the result
    divide each subdeck into two more subdecks
}
        </code></program>

            

<exercise label="mucp_13_4_ac_a"><statement><p>Below is one way to write the pseudocode of <c>mergeSort</c>.</p></statement><program xml:id="mucp_13_4_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code>
Deck Deck::mergeSort() const {
    find the midpoint of the deck
    divide the deck into two subdecks
    sort the subdecks using sort
    merge the two halves and return the result
    divide each subdeck into two more subdecks
}
        </code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's revisit the Dictionary data structure defined in the previous section.
                    Write the struct definitions for <c>Entry</c>, which has member variables word and page,
                    and for <c>Dictionary</c>, which has a vector of Entries.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_13_5_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the struct definition for Entry and for Dictionary.

    
    <program xml:id="mucp_13_5_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Entry {
    string word;
    int page;
};

struct Dictionary {
    vector<Entry> entries;
};
        ]]></code></program>

            

<exercise label="mucp_13_5_ac_a"><statement><p>Below is one way to write the struct definition for <c>Entry</c> and for <c>Dictionary</c>.</p></statement><program xml:id="mucp_13_5_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Entry {
    string word;
    int page;
};

struct Dictionary {
    vector<Entry> entries;
};
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Assume our dictionary is currently unsorted. Let's write a Dictionary member function <c>find</c>
                    that takes a string word as a parameter and returns the index of its corresponding
                    entry. If the word isn't in the dictionary, return -1.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_13_6_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the Dictionary member function.

    
    <program xml:id="mucp_13_6_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Entry {
    string word;
    int page;
};

struct Dictionary {
    vector<Entry> entries;
};

int Dictionary::find(string word) {
    for (size_t i = 0; i < entries.size(); ++i) {
        if (entries[i].word == word) {
            return i;
        }
    }
    return -1;
}
        ]]></code></program>

            

<exercise label="mucp_13_6_ac_a"><statement><p>Below is one way to write the Dictionary member function.</p></statement><program xml:id="mucp_13_6_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Entry {
    string word;
    int page;
};

struct Dictionary {
    vector<Entry> entries;
};

int Dictionary::find(string word) {
    for (size_t i = 0; i < entries.size(); ++i) {
        if (entries[i].word == word) {
            return i;
        }
    }
    return -1;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Of course, all dictionaries are in some sort of order. In order to do this, we
                    must first write the Dictionary member function <c>findFirstWord</c>, which takes a starting
                    index as a parameter returns the index of the Entry with the highest priority alphabetically
                    (i.e. the Entry with a word that would come first in the alphabet).</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_13_7_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the findFirstWord member function.

    
    <program xml:id="mucp_13_7_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Entry {
    string word;
    int page;
};

struct Dictionary {
    vector<Entry> entries;
};

int Dictionary::findFirstWord(int start) {
    int min = start;
    for (size_t i = start; i < entries.size(); ++i) {
        if (entries[i].word < entries[min].word) {
            min = i;
        }
    }
    return min;
}
        ]]></code></program>

            

<exercise label="mucp_13_7_ac_a"><statement><p>Below is one way to write the <c>findFirstWord</c> member function.</p></statement><program xml:id="mucp_13_7_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Entry {
    string word;
    int page;
};

struct Dictionary {
    vector<Entry> entries;
};

int Dictionary::findFirstWord(int start) {
    int min = start;
    for (size_t i = start; i < entries.size(); ++i) {
        if (entries[i].word < entries[min].word) {
            min = i;
        }
    }
    return min;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>We also need a swap function. Write the Dictionary member function
                    <c>swap</c> which takes two indices as parameters and swaps the Entries
                    at those indices.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_13_8_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the swap member function

    
    <program xml:id="mucp_13_8_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Entry {
    string word;
    int page;
};

struct Dictionary {
    vector<Entry> entries;
};

void Dictionary::swap(int a, int b) {
    Entry temp = entries[a];
    entries[a] = entries[b];
    entries[b] = temp;
}
        ]]></code></program>

            

<exercise label="mucp_13_8_ac_a"><statement><p>Below is one way to write the <c>swap</c> member function</p></statement><program xml:id="mucp_13_8_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Entry {
    string word;
    int page;
};

struct Dictionary {
    vector<Entry> entries;
};

void Dictionary::swap(int a, int b) {
    Entry temp = entries[a];
    entries[a] = entries[b];
    entries[b] = temp;
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Now let's write the Dictionary member function <c>alphabetize</c>, which
                    sorts the Entries in the Dictionary in alphabetical order. Use
                    the <c>findFirstWord</c> and <c>swap</c> functions we defined earlier!</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_13_9_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the Dictionary member function alphabetize.

    
    <program xml:id="mucp_13_9_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

void Dictionary::alphabetize() {
    for (size_t i = 0; i < entries.size(); ++i) {
        int min = findFirstWord (i);
        swap (i, min);
    }
}
        ]]></code></program>

            

<exercise label="mucp_13_9_ac_a"><statement><p>Below is one way to write the Dictionary member function <c>alphabetize</c>.</p></statement><program xml:id="mucp_13_9_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

void Dictionary::alphabetize() {
    for (size_t i = 0; i < entries.size(); ++i) {
        int min = findFirstWord (i);
        swap (i, min);
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
  <exercise label="XXX">
    <statement>
      <p>Let's check to see if our sorting worked! Write the Dictionary
                    member function <c>printDictionary</c>, which prints out the word in each
                    Entry.</p>
    </statement>
    <program interactive="activecode" line-numbers="yes" xml:id="mucp_13_10_ac_q_editor">
      <code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;
// YOUR CODE HERE
        ]]></code>
    </program>
    <solution>


    
                Below is one way to write the Dictionary member function printDictionary.

    
    <program xml:id="mucp_13_10_ac_a_editor" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Entry {
    string word;
    int page;
};

struct Dictionary {
    vector<Entry> entries;
};

void Dictionary::printDictionary() {
    for (size_t i = 0; i < entries.size(); ++i) {
        cout << entries[i].word << endl;
    }
}
        ]]></code></program>

            

<exercise label="mucp_13_10_ac_a"><statement><p>Below is one way to write the Dictionary member function <c>printDictionary</c>.</p></statement><program xml:id="mucp_13_10_ac_a_editor-1" interactive="activecode" line-numbers="yes"><code><![CDATA[
#include <iostream>
#include <vector>
using namespace std;

struct Entry {
    string word;
    int page;
};

struct Dictionary {
    vector<Entry> entries;
};

void Dictionary::printDictionary() {
    for (size_t i = 0; i < entries.size(); ++i) {
        cout << entries[i].word << endl;
    }
}
        ]]></code></program></exercise>
            </solution>
  </exercise>
</section>
