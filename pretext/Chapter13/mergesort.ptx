<?xml version="1.0"?>
<section xml:id="chapter13_mergesort">
  <title>Mergesort</title>
  <p>In <xref ref="chapter13_sorting"/>, we saw a simple
    sorting algorithm that turns out not to be very efficient. In order to sort <m>n</m> items, it
    has to traverse the vector <m>n</m> times, and each traversal takes an amount of time that is
    proportional to <m>n</m>. The total time, therefore, is proportional to <m>n^2</m>.</p>
  <p>In this section I will sketch a more efficient algorithm called <term>mergesort</term>. To sort <m>
    n</m> items, mergesort takes time proportional to <m>n \log n</m>. That may not seem impressive,
    but as <m>n</m> gets big, the difference between <m>n^2</m> and <m>n \log n</m> can be enormous.
    Try out a few values of <m>n</m> and see.</p>
  <p>The basic idea behind mergesort is this: if you have two subdecks, each
    of which has been sorted, it is easy (and fast) to merge them into a
    single, sorted deck. Try this out with a deck of cards:</p>
  <p>
    <ol>
      <li>
        <p>Form two subdecks with about 10 cards each and sort them so that when
          they are face up the lowest cards are on top. Place both decks face
          up in front of you.</p>
      </li>
      <li>
        <p>Compare the top card from each deck and choose the lower one. Flip it
          over and add it to the merged deck.</p>
      </li>
      <li>
        <p>Repeat step two until one of the decks is empty. Then take the
          remaining cards and add them to the merged deck.</p>
      </li>
    </ol>
  </p>
  <p>The result should be a single sorted deck. Here's what this looks like
    in pseudocode:</p>
  <program>Deck merge(const Deck&amp; d1, const Deck&amp; d2) {
    // create a new deck big enough for all the cards
    Deck result (d1.cards.size() + d2.cards.size());

    // use the index i to keep track of where we are in
    // the first deck, and the index j for the second deck
    int i = 0;
    int j = 0;

    // the index k traverses the result deck
    for (size_t k = 0; k&lt;result.cards.size(); k++) {

        // if d1 is empty, d2 wins; if d2 is empty, d1 wins;
        // otherwise, compare the two cards

        // add the winner to the new deck
    }
    return result;
}</program>
  <p>I chose to make <c>merge</c> a nonmember function because the two arguments are symmetric.</p>
  <p>The best way to test <c>merge</c> is to build and shuffle a deck, use subdeck to form two (small)
    hands, and then use the sort routine from the previous chapter to sort the two halves. Then you
    can pass the two halves to <c>merge</c> to see if it works.</p>
  <p>If you can get that working, try a simple implementation of <c>mergeSort</c>:</p>
  <program>Deck Deck::mergeSort() const {
    // find the midpoint of the deck
    // divide the deck into two subdecks
    // sort the subdecks using sort
    // merge the two halves and return the result
}</program>
  <p>Notice that the current object is declared <c>const</c> because <c>mergeSort</c> does not modify it. Instead,
    it creates and returns a new <c>Deck</c> object.</p>
  <p>If you get that version working, the real fun begins! The magical thing about mergesort is that
    it is recursive. At the point where you sort the subdecks, why should you invoke the old, slow
    version of <c>sort</c>? Why not invoke the spiffy new <c>mergeSort</c> you are in the process of writing?</p>
  <p>Not only is that a good idea, it is <em>necessary</em> in order to achieve the performance
    advantage I promised. In order to make it work, though, you have to add a base case so that it
    doesn't recurse forever. A simple base case is a subdeck with 0 or 1 cards. If <c>mergesort</c> receives
    such a small subdeck, it can return it unmodified, since it is already sorted.</p>
  <p>The recursive version of <c>mergesort</c> should look something like this:</p>
  <program>Deck Deck::mergeSort(Deck deck) const {
    // if the deck is 0 or 1 cards, return it

    // find the midpoint of the deck
    // divide the deck into two subdecks
    // sort the subdecks using mergesort
    // merge the two halves and return the result
}</program>
  <p>As usual, there are two ways to think about recursive programs: you can think through the
    entire flow of execution, or you can make the <q>leap of
      faith.</q> I have deliberately constructed this example to encourage you to make the leap of
    faith.</p>
  <p>When you were using <c>sort</c> to sort the subdecks, you didn't feel compelled to follow the flow
    of execution, right? You just assumed that the <c>sort</c> function would work because you already
    debugged it. Well, all you did to make <c>mergeSort</c> recursive was replace one sort algorithm with
    another. There is no reason to read the program differently.</p>
  <p>Well, actually you have to give some thought to getting the base case
    right and making sure that you reach it eventually, but other than that,
    writing the recursive version should be no problem. Good luck!</p>
  <exercise label="mergesort_1">
    <statement>
      <p>The efficiency of a simple sorting algorithm is __________. The
        efficiency of mergesort is __________. Mergesort is __________ than
        the simple sorting algorithm.</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p><m>n</m>, <m>n \log n</m>, more efficient</p>
        </statement>
        <feedback>
          <p>Simple sort traverses the vector n times, and each traversal takes additional time.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p><m>n^2</m>, <m>n \log n</m>, more efficient</p>
        </statement>
        <feedback>
          <p>Simple sort takes time proporitonal to <m>n^2</m>, mergesort takes time proportional to <m>n
            \log n</m> (which is more efficient).</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><m>n \log n</m>, <m>n</m>, less efficient</p>
        </statement>
        <feedback>
          <p>You might be confused about which algorithm is which. Also, what is the efficiency of
            simple sort?</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><m>n \log n</m>, <m>n^2</m>, less efficient</p>
        </statement>
        <feedback>
          <p>You might be confused about which algorithm is which.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><m>n^2,</m> <m>n \log n</m>, less efficient</p>
        </statement>
        <feedback>
          <p>Which algorithm is more efficient? (Which function grows more slowly?)</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mergesort_2">
    <statement>
      <p>Write your implementation of <c>merge</c> in the commented area of the active code below. Read
        the comments in <c>main</c> to see how we'll test if your <c>merge</c> function works. If you get
        stuck, you can reveal the hint below for help.</p>
    </statement>
    <program xml:id="mergesort_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <string>
#include <vector>
using namespace std;

enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES };

enum Rank { ACE=1, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE,
TEN, JACK, QUEEN, KING };

int randomInt(int low, int high);

struct Card {
    Rank rank;
    Suit suit;
    Card();
    Card(Suit s, Rank r);
    void print() const;
    bool isGreater(const Card& c2) const;
    bool equals(const Card& c2) const;
};

struct Deck {
    vector<Card> cards;
    Deck();
    Deck(int n);
    void print() const;
    void swapCards(int index1, int index2);
    int findLowestCard(int index);
    void shuffleDeck();
    void sortDeck();
    Deck subdeck(int low, int high) const;
};

int findBisect(Deck subdeck, Card card);

Deck merge(const Deck& d1, const Deck& d2) {
    // ``merge`` should merge d1 with d2 and return
    // a merged deck. Follow the pseudocode above,
    // delete the existing code, and write your
    // implementation here.
    Deck deck(0); return deck;
}

int main() {
    Deck deck;

    // Shuffle a deck of cards and split it in half
    deck.shuffleDeck();
    Deck d1 = deck.subdeck(0, 25);
    Deck d2 = deck.subdeck(26, 51);

    // Sort each half
    d1.sortDeck();
    d2.sortDeck();
    cout << "Sorted first half:" << endl;
    d1.print();
    cout << endl;
    cout << "Sorted second half:" << endl;
    d2.print();
    cout << endl;

    // Merge sorted decks together
    Deck finished = merge(d1, d2);

    // We should see a sorted standard deck of 52 cards
    cout << "Merged sorted full deck:" << endl;
    finished.print();
}
        ]]></code>
      <tests>
Card::Card() {
    suit = SPADES;  rank = ACE;
}

Card::Card(Suit s, Rank r) {
    suit = s;  rank = r;
}

void Card::print() const {
    vector&lt;string&gt; suits(4);
    suits[0] = "Clubs";
    suits[1] = "Diamonds";
    suits[2] = "Hearts";
    suits[3] = "Spades";

    vector&lt;string&gt; ranks(14);
    ranks[1] = "Ace";
    ranks[2] = "2";
    ranks[3] = "3";
    ranks[4] = "4";
    ranks[5] = "5";
    ranks[6] = "6";
    ranks[7] = "7";
    ranks[8] = "8";
    ranks[9] = "9";
    ranks[10] = "10";
    ranks[11] = "Jack";
    ranks[12] = "Queen";
    ranks[13] = "King";

    cout &lt;&lt; ranks[rank] &lt;&lt; " of " &lt;&lt; suits[suit] &lt;&lt; endl;
}

bool Card::isGreater(const Card&amp; c2) const {
    if (suit &gt; c2.suit) return true;
    if (suit &lt; c2.suit) return false;
    if (rank &gt; c2.rank) return true;
    if (rank &lt; c2.rank) return false;
    return false;
}

bool Card::equals(const Card&amp; c2) const {
    return (rank == c2.rank &amp;&amp; suit == c2.suit);
}

Deck::Deck() {
    vector&lt;Card&gt; temp (52);
    cards = temp;

    int i = 0;
    for (Suit suit = CLUBS; suit &lt;= SPADES; suit = Suit(suit+1)) {
        for (Rank rank = ACE; rank &lt;= KING; rank = Rank(rank+1)) {
            cards[i].suit = suit;
            cards[i].rank = rank;
            i++;
        }
    }
}

Deck::Deck(int size) {
    vector&lt;Card&gt; temp (size);
    cards = temp;
}

void Deck::print() const {
    for (size_t i = 0; i &lt; cards.size(); i++) {
        cards[i].print();
    }
}

int randomInt(int low, int high) {
    srand (time(NULL));
    int x = random();
    int y = x % (high - low + 1) + low;
    return y;
}

void Deck::swapCards(int index1, int index2) {
    Card temp = cards[index1];
    cards[index1] = cards[index2];
    cards[index2] = temp;
}

int Deck::findLowestCard(int index) {
    int min = index;
    for (size_t i = index; i &lt; cards.size(); ++i) {
        if (cards[min].isGreater(cards[i])) {
            min = i;
        }
    }
    return min;
}

Deck Deck::subdeck(int low, int high) const {
    Deck sub(high-low+1);

    for (size_t i = 0; i &lt; sub.cards.size(); i++) {
        sub.cards[i] = cards[low+i];
    }
    return sub;
}

int findBisect(Deck subdeck, Card card) {
   if (subdeck.cards.size() == 1 &amp;&amp; !subdeck.cards[0].equals(card)) return -1;
   int mid = subdeck.cards.size() / 2;
   if (subdeck.cards[mid].equals(card)) return mid;
   else if (subdeck.cards[mid].isGreater(card)) {
       return findBisect (subdeck.subdeck(0, mid - 1), card);
   }
   else {
       return findBisect (subdeck.subdeck(mid + 1, subdeck.cards.size()), card);
   }
}

void Deck::shuffleDeck() {
    for (size_t i = 0; i &lt; cards.size(); i++) {
        int x = randomInt (i, cards.size() - 1);
        swapCards (i, x);
    }
}

void Deck::sortDeck() {
    for (size_t i = 0; i &lt; cards.size(); i++) {
        int x = findLowestCard (i);
        swapCards (i, x);
    }
}
</tests>
    </program>
    <hint>
      <title>merge</title>
      <activity label="mergesort_help_1"
                numbered="yes"
                adaptive="yes"
                indentation="hide">
        <statement>
          <p>First, let's write the code for the merge function. merge should
            take two decks as parameters and return a deck with the deck merged.</p>
        </statement>
        <blocks>
          <block order="13">
            <choice correct="yes">
              <cline>Deck merge(const Deck&amp; d1, const Deck&amp; d2) {</cline>
            </choice>
            <choice>
              <cline>void merge(const Deck&amp; d1, const Deck&amp; d2) {                         </cline>
            </choice>
          </block>
          <block order="6">
            <cline> Deck result (d1.cards.size() + d2.cards.size());</cline>
          </block>
          <block order="7">
            <cline> size_t i = 0;</cline>
            <cline> size_t j = 0;</cline>
          </block>
          <block order="1">
            <cline><![CDATA[ for (size_t k = 0; k < result.cards.size(); ++k) {]]></cline>
          </block>
          <block order="10">
            <choice correct="yes">
              <cline>  if (d1.cards.empty()) {</cline>
              <cline>   result.cards[k] = d2.cards[j];</cline>
              <cline>   ++j;</cline>
              <cline>  }</cline>
            </choice>
            <choice>
              <cline>  if (d1.cards.empty()) {</cline>
              <cline>   result.cards[k] = d1.cards[i];                         </cline>
              <cline>   ++i;</cline>
              <cline>  }</cline>
            </choice>
          </block>
          <block order="8">
            <choice correct="yes">
              <cline>  else if (d2.cards.empty()) {</cline>
              <cline>   result.cards[k] = d1.cards[i];</cline>
              <cline>   ++i;</cline>
              <cline>  }</cline>
            </choice>
            <choice>
              <cline>  else if (d1.cards.empty()) {</cline>
              <cline>   result.cards[k] = d2.cards[j];                         </cline>
              <cline>   ++j;</cline>
              <cline>  }</cline>
            </choice>
          </block>
          <block order="12">
            <cline>  else {</cline>
          </block>
          <block order="4">
            <cline>   if (j &gt;= d2.cards.size()) {</cline>
            <cline>    result.cards[k] = d1.cards[i];</cline>
            <cline>    ++i;</cline>
            <cline>   }</cline>
          </block>
          <block order="11">
            <cline>   else if (i &gt;= d1.cards.size() || d1.cards[i].isGreater(d2.cards[j])) {</cline>
            <cline>    result.cards[k] = d2.cards[j];</cline>
            <cline>    ++j;</cline>
            <cline>   }</cline>
          </block>
          <block order="14">
            <cline>   else {</cline>
            <cline>    result.cards[k] = d1.cards[i];</cline>
            <cline>    ++i;</cline>
            <cline>   }</cline>
            <cline>  }</cline>
          </block>
          <block order="9">
            <cline> }</cline>
            <cline> return result;</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>
  <exercise label="mergesort_3">
    <statement>
      <p>Now that we've written <c>merge</c>, it's time to write the <c>mergeSort</c> function. Try writing the
        non-recursive version of <c>mergeSort</c> first before writing the recursive version. Follow the
        comments in <c>main</c> to test your functions. If done correctly, the program should output a
        sorted deck of cards. If you get stuck, you can reveal the hints below for help.</p>
    </statement>
    <program xml:id="mergesort_3_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <string>
#include <vector>
using namespace std;

enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES };

enum Rank { ACE=1, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE,
TEN, JACK, QUEEN, KING };

int randomInt(int low, int high);

struct Card {
    Rank rank;
    Suit suit;
    Card();
    Card(Suit s, Rank r);
    void print() const;
    bool isGreater(const Card& c2) const;
    bool equals(const Card& c2) const;
};

struct Deck {
    vector<Card> cards;
    Deck();
    Deck(int n);
    void print() const;
    void swapCards(int index1, int index2);
    int findLowestCard(int index);
    void shuffleDeck();
    void sortDeck();
    Deck subdeck(int low, int high) const;
    Deck mergeSort() const;
    Deck mergeSort(Deck deck) const;
};

int findBisect(Deck subdeck, Card card);
Deck merge(const Deck& d1, const Deck& d2);

Deck Deck::mergeSort() const {
    // This version of ``mergeSort`` is the non-recursive version.
    // Follow the pseudocode above delete the existing code,
    // and write your implementation here.
    Deck deck(0); return deck;
}

Deck Deck::mergeSort(Deck deck) const {
    // This version of ``mergeSort`` is the recursive version.
    // Follow the pseudocode above delete the existing code,
    // and write your implementation here.
    Deck deck1(0); return deck;
}

int main() {
    Deck deck1;
    deck1.shuffleDeck();
    Deck sorted1 = deck1.mergeSort();
    sorted1.print();

    // Once you get the above code to work, comment it
    // out and uncomment the code below to test the
    // recursive version of ``mergeSort``.

    /*
    Deck deck2;
    deck2.shuffleDeck();
    Deck sorted2 = deck2.mergeSort(deck2);
    sorted2.print();
    */
}
        ]]></code>
      <tests>
Card::Card() {
    suit = SPADES;  rank = ACE;
}

Card::Card(Suit s, Rank r) {
    suit = s;  rank = r;
}

void Card::print() const {
    vector&lt;string&gt; suits(4);
    suits[0] = "Clubs";
    suits[1] = "Diamonds";
    suits[2] = "Hearts";
    suits[3] = "Spades";

    vector&lt;string&gt; ranks(14);
    ranks[1] = "Ace";
    ranks[2] = "2";
    ranks[3] = "3";
    ranks[4] = "4";
    ranks[5] = "5";
    ranks[6] = "6";
    ranks[7] = "7";
    ranks[8] = "8";
    ranks[9] = "9";
    ranks[10] = "10";
    ranks[11] = "Jack";
    ranks[12] = "Queen";
    ranks[13] = "King";

    cout &lt;&lt; ranks[rank] &lt;&lt; " of " &lt;&lt; suits[suit] &lt;&lt; endl;
}

bool Card::isGreater(const Card&amp; c2) const {
    if (suit &gt; c2.suit) return true;
    if (suit &lt; c2.suit) return false;
    if (rank &gt; c2.rank) return true;
    if (rank &lt; c2.rank) return false;
    return false;
}

bool Card::equals(const Card&amp; c2) const {
    return (rank == c2.rank &amp;&amp; suit == c2.suit);
}

Deck::Deck() {
    vector&lt;Card&gt; temp (52);
    cards = temp;

    int i = 0;
    for (Suit suit = CLUBS; suit &lt;= SPADES; suit = Suit(suit+1)) {
        for (Rank rank = ACE; rank &lt;= KING; rank = Rank(rank+1)) {
            cards[i].suit = suit;
            cards[i].rank = rank;
            i++;
        }
    }
}

Deck::Deck(int size) {
    vector&lt;Card&gt; temp (size);
    cards = temp;
}

void Deck::print() const {
    for (size_t i = 0; i &lt; cards.size(); i++) {
        cards[i].print();
    }
}

int randomInt(int low, int high) {
    srand (time(NULL));
    int x = random();
    int y = x % (high - low + 1) + low;
    return y;
}

void Deck::swapCards(int index1, int index2) {
    Card temp = cards[index1];
    cards[index1] = cards[index2];
    cards[index2] = temp;
}

int Deck::findLowestCard(int index) {
    int min = index;
    for (size_t i = index; i &lt; cards.size(); ++i) {
        if (cards[min].isGreater(cards[i])) {
            min = i;
        }
    }
    return min;
}

Deck Deck::subdeck(int low, int high) const {
    Deck sub(high-low+1);

    for (size_t i = 0; i &lt; sub.cards.size(); i++) {
        sub.cards[i] = cards[low+i];
    }
    return sub;
}

int findBisect(Deck subdeck, Card card) {
    if (subdeck.cards.size() == 1 &amp;&amp; !subdeck.cards[0].equals(card)) return -1;
    int mid = subdeck.cards.size() / 2;
    if (subdeck.cards[mid].equals(card)) return mid;
    else if (subdeck.cards[mid].isGreater(card)) {
        return findBisect (subdeck.subdeck(0, mid - 1), card);
    }
    else {
        return findBisect (subdeck.subdeck(mid + 1, subdeck.cards.size()), card);
    }
}

void Deck::shuffleDeck() {
    for (size_t i = 0; i &lt; cards.size(); i++) {
        int x = randomInt (i, cards.size() - 1);
        swapCards (i, x);
    }
}

void Deck::sortDeck() {
    for (size_t i = 0; i &lt; cards.size(); i++) {
        int x = findLowestCard (i);
        swapCards (i, x);
    }
}

Deck merge(const Deck&amp; d1, const Deck&amp; d2) {
    Deck result (d1.cards.size() + d2.cards.size());
    size_t i = 0;
    size_t j = 0;
    for (size_t k = 0; k &lt; result.cards.size(); ++k) {
        if (d1.cards.empty()) {
            result.cards[k] = d2.cards[j];
            ++j;
        }
        else if (d2.cards.empty()) {
            result.cards[k] = d1.cards[i];
            ++i;
        }
        else {
            if (j &gt;= d2.cards.size()) {
                result.cards[k] = d1.cards[i];
                ++i;
            }
            else if (i &gt;= d1.cards.size() || d1.cards[i].isGreater(d2.cards[j])) {
                result.cards[k] = d2.cards[j];
                ++j;
            }
            else {
                result.cards[k] = d1.cards[i];
                ++i;
            }
        }
    }
    return result;
}
</tests>
    </program>
    <hint>
      <title>mergeSort</title>
      <activity label="mergesort_help_2"
                numbered="yes"
                adaptive="yes"
                indentation="hide">
        <statement>
          <p>Let's write the code for the mergeSort function. mergeSort
            should be a Deck member function that returns a sorted deck.</p>
        </statement>
        <blocks>
          <block order="1">
            <choice correct="yes">
              <cline>Deck Deck::mergeSort() const {</cline>
            </choice>
            <choice>
              <cline>Deck mergeSort() {                         </cline>
            </choice>
          </block>
          <block order="5">
            <cline> int mid = cards.size() / 2;</cline>
          </block>
          <block order="2">
            <cline> Deck d1 = subdeck(0, mid - 1);</cline>
            <cline> Deck d2 = subdeck(mid, cards.size() - 1);</cline>
          </block>
          <block order="3">
            <cline> d1.sortDeck();</cline>
            <cline> d2.sortDeck();</cline>
          </block>
          <block order="4">
            <cline> return merge(d1, d2);</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
    <hint>
      <title>
        mergeSort recursive
      </title>
      <activity label="mergesort_help_3"
                numbered="yes"
                adaptive="yes"
                indentation="hide">
        <statement>
          <p>Let's take it one step further and rewrite <c>mergeSort</c> as a recursive function.</p>
        </statement>
        <blocks>
          <block order="1">
            <cline>Deck Deck::mergeSort(Deck deck) const {</cline>
          </block>
          <block order="5">
            <cline> if (deck.cards.size() == 0 || deck.cards.size() == 1) {</cline>
            <cline>  return deck;</cline>
            <cline> }</cline>
          </block>
          <block order="3">
            <cline> int mid = deck.cards.size() / 2;</cline>
          </block>
          <block order="6">
            <cline> Deck d1 = subdeck(0, mid - 1);</cline>
            <cline> Deck d2 = subdeck(mid, deck.cards.size() - 1);</cline>
          </block>
          <block order="2">
            <cline> Deck merged1 = d1.mergeSort(d1);</cline>
            <cline> Deck merged2 = d2.mergeSort(d2);</cline>
          </block>
          <block order="4">
            <cline> return merge(merged1, merged2);</cline>
            <cline>}</cline>
          </block>
        </blocks>
      </activity>
    </hint>
  </exercise>
</section>